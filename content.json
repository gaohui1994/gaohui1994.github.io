{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-05-07T22:37:51.180Z","updated":"2018-05-07T22:37:51.180Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-05-07T22:37:51.189Z","updated":"2018-05-07T22:37:51.189Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-05-07T22:37:51.204Z","updated":"2018-05-07T22:37:51.204Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"test1/hello-world","date":"2018-05-07T22:42:55.186Z","updated":"2018-05-04T09:00:29.813Z","comments":true,"path":"2018/05/08/test1/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/08/test1/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test1","slug":"test1","permalink":"http://yoursite.com/categories/test1/"}],"tags":[]},{"title":"react入门2","slug":"test1/02-react开发环境搭建","date":"2018-05-07T22:42:55.179Z","updated":"2018-05-04T11:10:50.281Z","comments":true,"path":"2018/05/08/test1/02-react开发环境搭建/","link":"","permalink":"http://yoursite.com/2018/05/08/test1/02-react开发环境搭建/","excerpt":"","text":"开发环境react开发环境搭建基本使用 在页面中使用引入 123456&lt;!--react的核心库--&gt;&lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;!--react的与dom相关的一些功能--&gt;&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;&lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt; 基本开发环境搭建 使用 create-react-app 快速构建 React 开发环境 安装项目模板 基于webpack快速搭建开发环境 1.全局安装开发环境 1npm install -g create-react-app 2.创建react项目 1create-react-app my-app 3.切换目录 12345678cd my-app辅助cmd命令: mkdir del rmdir tree 4.启动应用程序 12npm start 目录结构解析 使用 tree /f &gt; tree.txt 命令生成项目目录结构 1234567891011121314151617├─ .gitignore│ package.json│ README.md│ ├─public│ favicon.ico│ index.html│ manifest.json│ └─src App.css App.js App.test.js index.css index.js logo.svg registerServiceWorker.js 搭建 webpack + React 开发环境在这里,使用webpack搭建开发环境,官网参考 https://webpack.github.io/ 初始化 npm 环境并安装插件当前的 web 前端开发，基本使用 npm 管理第三方依赖（插件） 初始化 npm 环境 使用npm init 或者是 npm init -y命令初始化创建package.json文件 首先保证有 node 和 npm 环境，运行node -v和npm -v查看 进入项目目录，运行npm init按照步骤填写最终生成package.json文件，所有使用 npm 做依赖管理的项目，根目录下都会有一个这个文件，该文件描述了项目的基本信息以及一些第三方依赖项（插件）。详细的使用说明可查阅官网文档，不过是英文的。 安装插件 运行npm install webpack webpack-dev-server --save-dev安装webpack环境 运行npm i react react-dom --save安装项目核心依赖 已知我们将使用 webpack 作为构建工具，那么就需要安装相应插件，运行 npm install webpack webpack-dev-server --save-dev 来安装两个插件。 又已知我们将使用 React ，也需要安装相应插件，运行 npm i react react-dom --save来安装两个插件。其中i是install的简写形式。 安装完成之后，查看package.json可看到多了devDependencies和dependencies两项，根目录也多了一个node_modules文件夹。 --save 和 --save-dev 的区别npm i时使用--save和--save-dev，可分别将依赖（插件）记录到package.json中的dependencies和devDependencies下面。 dependencies下记录的是项目在运行时必须依赖的插件，常见的例如react jquery等，即及时项目打包好了、上线了，这些也是需要用的，否则程序无法正常执行。 devDependencies下记录的是项目在开发过程中使用的插件，例如这里我们开发过程中需要使用webpack打包，而我在工作中使用fis3打包，但是一旦项目打包发布、上线了之后，webpack和fis3就都没有用了，可卸磨杀驴。 延伸一下，我们的项目有package.json，其他我们用的项目如webpack也有package.json，见./node_modules/webpack/package.json，其中也有devDependencies和dependencies。当我们使用npm i webpack时，./node_modules/webpack/package.json中的dependencies会被 npm 安装上，而devDependencies也没必要安装。 配置 webpack.config.js为了提高学习效率，webpack 最最基础的用法，就不再挨个演示了（推荐一个非常好的入门文章，以及更多资料）这里我们把项目中的webpack.config.js这个配置文件详细的讲解一下，过程中也会照顾 0 基础的同学。 文件格式webpack.config.js 就是一个普通的 js 文件，符合 commonJS 规范。最后输出一个对象，即module.exports = {...} 输入 &amp; 输出这个比较基础，不过需要新建./app/index.jsx作为入口文件，目前项目中只有这一个入口文件。不过 webpack 支持多个入口文件，可查阅文档。 输出就是一个bundle.js，js 和 css 都在里面，不过只有在开发环境下才用，发布代码的时候，肯定不能只有这么一个文件，接下来会讲到。 module针对不同类型的文件，使用不同的loader，当然使用之前要安装，例如npm i style-loader css-loader --save-dev。该项目代码中，我们用到的文件格式有：js/jsx 代码、css/less 代码、图片、字体文件。 less 是 css 的语法糖，可以更高效低冗余的写 css，不熟悉的朋友可去官网看看，非常简单。 在加载 css/less 时用到了postcss，主要使用autoprefixer功能，帮助自动加 css3 的浏览器前缀，非常好用。 编译 es6 和 jsx 语法时，用到家喻户晓的babel，另外还需增加一个.babelrc的配置文件。 plugins使用 html 模板（需要npm i html-webpack-plugin --save-dev），这样可以将输出的文件名（如./bundle.js）自动注入到 html 中，不用我们自己手写。手写的话，一旦修改就需要改两个地方。 使用热加载和自动打开浏览器插件 devServer对 webpack-dev-server 的配置 npm start在 package.json 中，输入以下代码，将这一串命令封装为npm start，这样就可以运行项目代码了。 123\"scripts\": &#123; \"start\": \"NODE_ENV=dev webpack-dev-server --progress --colors\"&#125; 代码中NODE_ENV=dev代表当前是开发环境下，这里的&quot;dev&quot;可被 js 代码中的process.env.NODE_ENV得到并做一些其他处理。 定义环境全局变量以下定义，可使得代码通过__DEV__得到当前是不是开发模式。 123new webpack.DefinePlugin(&#123; __DEV__: JSON.stringify(JSON.parse((process.env.NODE_ENV == 'dev') || 'false'))&#125;) 打开./app/util/localStore.js可以看到if (__DEV__) { console.error(&#39;localStorage.getItem报错, &#39;, ex.message) }，即只有开发环境下才提示error，发布之后就不会提示了。（因为发布的命令中用到NODE_ENV=production） 配置 webpack.production.config.js开发环境下，可以不用考虑系统的性能，更多考虑的是如何增加开发效率。而发布系统时，就需要考虑发布之后的系统的性能，包括加载速度、缓存等。下面介绍发布用配置代码和开发用的不一样的地方。 发布到 ./build 文件夹中path: __dirname + &quot;/build&quot;, vendor将第三方依赖单独打包。即将 node_modules 文件夹中的代码打包为 vendor.js 将我们自己写的业务代码打包为 app.js。这样有助于缓存，因为在项目维护过程中，第三方依赖不经常变化，而业务代码会经常变化。 md5后缀为每个打包出来的文件都加md5后缀，例如&quot;/js/[name].[chunkhash:8].js&quot;，可使文件强缓存。 分目录打包出来的不同类型的文件，放在不同目录下，例如图片文件将放在img/目录下 Copyright自动为打包出来的代码增加 copyright 内容 分模块new webpack.optimize.OccurenceOrderPlugin(), 压缩代码使用 Uglify 压缩代码，其中warnings: false是去掉代码中的 warning 分离 css 和 js 文件开发环境下，css 代码是放在整个打包出来的那个 bundle.js 文件中的，发布环境下当然不能混淆在一起，使用new ExtractTextPlugin(&#39;/css/[name].[chunkhash:8].css&#39;),将 css 代码分离出来。 npm run build打开package.json，查看以下代码。npm start和npm run build分别是运行代码和打包项目。另外，&quot;start&quot;、&quot;test&quot;可以不用run。 1234\"scripts\": &#123; \"start\": \"NODE_ENV=dev webpack-dev-server --progress --colors\", \"build\": \"rm -rf ./build &amp;&amp; NODE_ENV=production webpack --config ./webpack.production.config.js --progress --colors\"&#125;, 这两个命令主要有以下区别： 前者中默认使用 webpack.config.js 作为配置文件，而后者中强制使用 webpack.production.config.js 作为配置文件 前者NODE_ENV=dev而后者NODE_ENV=production，标识不同的环境。而这个&quot;dev&quot; &quot;production&quot;可以在代码中通过process.env.NODE_ENV获取。 最小化压缩 React以下配置可以告诉 React 当前是生产环境，请最小化压缩 js ，即把开发环境中的一些提示、警告、判断通通去掉，直流以下发布之后可用的代码。 12345new webpack.DefinePlugin(&#123; 'process.env':&#123; 'NODE_ENV': JSON.stringify(process.env.NODE_ENV) &#125;&#125;),","categories":[{"name":"test1","slug":"test1","permalink":"http://yoursite.com/categories/test1/"}],"tags":[]},{"title":"react入门","slug":"test1/01-react入门","date":"2018-05-07T22:42:55.170Z","updated":"2018-05-04T11:10:26.028Z","comments":true,"path":"2018/05/08/test1/01-react入门/","link":"","permalink":"http://yoursite.com/2018/05/08/test1/01-react入门/","excerpt":"","text":"react基础教程react入门简介 React 是一个用于构建用户界面的 JAVASCRIPT 库。 React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。 起源 React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站 描述12345678由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机 react的特点12345671.声明式设计 −React采用声明范式，可以轻松描述应用。2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。3.灵活 −React可以与已知的库或框架很好地配合。4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。 hello world最小化的 HTML 模板 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Hello World&lt;/title&gt; &lt;!--react的核心库--&gt; &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt; &lt;!--react的与dom相关的一些功能--&gt; &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt; &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt; &lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; &lt;!-- &lt;script&gt; 标签的 type 属性为 text/babel 。 这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。 凡是使用 JSX 的地方，都要加上 type=&quot;text/babel&quot; 。 --&gt; &lt;script type=&quot;text/babel&quot;&gt; // ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。 ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById(&apos;root&apos;) ); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- -&gt; CDNReact 和 ReactDOM 的UMD版本可通过 CDN 获得。 开发环境12&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt; 生产环境 相比开发环境进行了压缩和优化 12&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt; crossorigin如果你从 CDN 引用 React，我们建议保留 crossorigin 属性设置：","categories":[{"name":"test1","slug":"test1","permalink":"http://yoursite.com/categories/test1/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-07T22:30:03.040Z","updated":"2018-05-07T22:30:03.042Z","comments":true,"path":"2018/05/08/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}