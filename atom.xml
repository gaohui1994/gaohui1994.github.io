<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaoHui</title>
  
  <subtitle>Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-10T01:33:22.032Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GaoHui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>03-vue指令</title>
    <link href="http://yoursite.com/2018/05/10/vue/03-directive/"/>
    <id>http://yoursite.com/2018/05/10/vue/03-directive/</id>
    <published>2018-05-10T01:32:34.951Z</published>
    <updated>2018-05-10T01:33:22.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三部分-指令"><a href="#第三部分-指令" class="headerlink" title="第三部分 指令"></a>第三部分 指令</h1><h2 id="内置指令总结"><a href="#内置指令总结" class="headerlink" title="内置指令总结"></a>内置指令总结</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><blockquote><p>可以绑定属性,包括class style,而已省略,使用:替代</p></blockquote><blockquote><blockquote><p>　<strong>在1vue.0中有三种修饰符,.sync,.once,.camel,在2.0中能够废弃了前面两个</strong></p></blockquote></blockquote><blockquote><blockquote><blockquote><p>.camel将绑定的特性的名称转化为驼峰法则命名</p></blockquote></blockquote></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><blockquote><p>随着表单控件的不同而有所不同</p></blockquote><blockquote><p>可以添加修饰符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lazy      .number      .trim</span><br></pre></td></tr></table></figure><h3 id="v-if-v-else-if-v-else-v-show"><a href="#v-if-v-else-if-v-else-v-show" class="headerlink" title="v-if v-else-if v-else v-show"></a>v-if v-else-if v-else v-show</h3><blockquote><p>可以配合模板使用</p></blockquote><p><strong>v-if和v-show两者都可以实现元素的状态切换,但是两者存在一些区别</strong></p><blockquote><p>v-if根据判断条件决定是否渲染,如果条件为假,不进行任何操作</p></blockquote><blockquote><p>v-show无论如何都会进行模块的渲染,只是简单的基于css 的切换</p></blockquote><blockquote><blockquote><p><strong>一般来说， v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。<br>因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好。</strong></p></blockquote></blockquote><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><p>可以配合模板使用,也可以单独进行列表和表格的渲染</p></blockquote><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><blockquote><p>进行事件的绑定,可以省略,使用@替代</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类似于原生js的事件绑定的方式</span><br><span class="line"></span><br><span class="line">1. 获取dom元素</span><br><span class="line"></span><br><span class="line">2. 进行事件的添加</span><br><span class="line"></span><br><span class="line">3. 添加事件处理函数</span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><blockquote><p>绑定文本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">        &lt;!--上下两种书写形式的 效果是一样的--&gt;</span><br><span class="line">        &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var viewModel = &#123;</span><br><span class="line">        //模型数据的初始化</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // viewModel    连接模型和数据库</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:viewModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><blockquote><p>绑定html标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">        &lt;!--上下两种书写形式的 效果是一样的--&gt;</span><br><span class="line">        &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var viewModel = &#123;</span><br><span class="line">        //模型数据的初始化</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // viewModel    连接模型和数据库</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:viewModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><blockquote><p>不需要表达式</p></blockquote><blockquote><p>只绑定一次,数据修改时,模型上面的数据不会再动态渲染到页面上</p></blockquote><blockquote><blockquote><p>　<strong>2.0版本新增</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;message&quot; id=&quot;&quot; value=&quot;&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><blockquote><p>不需要表达式</p><blockquote><p>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p></blockquote></blockquote><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><blockquote><p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            [v-cloak] &#123;</span><br><span class="line">                display: none;</span><br><span class="line">                color: red;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div v-cloak&gt;</span><br><span class="line">                &#123;&#123;message&#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    这段 CSS 的含义是，包含 v-cloak (cloak n. 披风，斗篷；vt. 遮盖，掩盖) 属性的 html 标签在页面初始化时会被隐藏。</span><br><span class="line"></span><br><span class="line">在 vuejs instance ready 之后，v-cloak 属性会被自动去除，也就是对应的标签会变为可见</span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        //模型数据的初始化</span><br><span class="line">        message: &apos;hello world!&apos;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // viewModel    连接模型和数据库</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote><p>除了内置指令，Vue.js 也允许注册自定义指令。自定义指令提供一种机制将数据的变化映射为 DOM 行为。<br>可以用 Vue.directive(id, definition) 方法注册一个全局自定义指令，它接收两个参数指令 ID 与定义对象。</p><blockquote><p>也可以用组件的 directives 选项注册一个局部自定义指令。</p></blockquote></blockquote><h3 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt;</span><br><span class="line">            &lt;input v-focus&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //注册一个全局自动以的指令 v-focus</span><br><span class="line">    Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line">        //绑定的元素插入到父节点时调用</span><br><span class="line">        inserted: function(el) &#123;</span><br><span class="line">            //聚焦元素</span><br><span class="line">            el.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //创建vue的实例</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt;</span><br><span class="line">            &lt;input v-focus&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建根实例</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        directives: &#123;</span><br><span class="line">            // 注册一个局部的自定义指令 v-focus</span><br><span class="line">            focus: &#123;</span><br><span class="line">                // 指令的定义,当指定的元素绑定到父元素时调用</span><br><span class="line">                inserted: function(el) &#123;</span><br><span class="line">                    // 聚焦元素</span><br><span class="line">                    el.focus()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="钩子函数及其参数"><a href="#钩子函数及其参数" class="headerlink" title="钩子函数及其参数"></a>钩子函数及其参数</h3><p><strong>指令定义函数提供了几个钩子函数（可选）：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.0版本中的钩子函数</span><br><span class="line">bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</span><br><span class="line">update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新</span><br><span class="line">unbind: 只调用一次， 指令与元素解绑时调用。</span><br><span class="line"></span><br><span class="line">2.0新增的钩子函数</span><br><span class="line">inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</span><br><span class="line">componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。</span><br></pre></td></tr></table></figure><p><strong>接下来我们来看一下钩子函数的参数 :(包括 el，binding，vnode，oldVnode)</strong></p><pre><code>el: 指令所绑定的元素，可以用来直接操作 DOM 。binding: 一个对象，包含以下属性：    name: 指令名，不包括 v- 前缀。    value: 指令的绑定值， 例如： v-my-directive=&quot;1 + 1&quot;, value 的值是 2。    oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。    expression: 绑定值的字符串形式。 例如 v-my-directive=&quot;1 + 1&quot; ， expression 的值是 &quot;1 + 1&quot;。    arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 &quot;foo&quot;。    modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。vnode: Vue 编译生成的虚拟节点，查阅 VNode API 了解更多详情。oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</code></pre><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><blockquote><p>五个钩子函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!--视图--&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div v-if=&apos;message&apos;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-my-directive=&quot;message&quot; v-model=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //指令名称          有了指令    能干什么</span><br><span class="line">    Vue.directive(&apos;my-directive&apos;, &#123;</span><br><span class="line">        //第一次绑定的时候调用        只调用一次</span><br><span class="line">        bind: function(el, binding, vnode, oldnode) &#123;</span><br><span class="line">            console.log(&apos;bind    &apos;, arguments)</span><br><span class="line">        &#125;,</span><br><span class="line">        //被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）</span><br><span class="line">        inserted: function(el) &#123;</span><br><span class="line">            console.log(&quot;inserted&quot;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //更新的时候调用</span><br><span class="line">        update: function() &#123;</span><br><span class="line">            console.log(&apos;updata&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //解绑定的时候调用</span><br><span class="line">        unbind: function() &#123;</span><br><span class="line">            console.log(&apos;unbind   &apos;, arguments)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //组件完成一个周期调用</span><br><span class="line">        componentUpdated: function() &#123;</span><br><span class="line">            console.log(&quot;componentUpdated&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &quot;hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    vm.$data.message = 1000;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="钩子函数的参数和binding参数的属性"><a href="#钩子函数的参数和binding参数的属性" class="headerlink" title="钩子函数的参数和binding参数的属性"></a>钩子函数的参数和binding参数的属性</h4><blockquote><p>钩子函数的四个参数和binding参数的六个个属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!--视图--&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div v-if=&apos;message&apos;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-my-directive=&quot;message&quot; v-model=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //指令名称          有了指令    能干什么     五个钩子函数</span><br><span class="line">    Vue.directive(&apos;my-directive&apos;, &#123;</span><br><span class="line">        //第一次绑定的时候调用        只调用一次</span><br><span class="line">        bind: function(el, binding, vnode, oldnode) &#123;</span><br><span class="line">            console.log(&apos;bind    &apos;, arguments)</span><br><span class="line">        &#125;,</span><br><span class="line">        //被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）</span><br><span class="line">        inserted: function(el) &#123;</span><br><span class="line">            console.log(&quot;inserted&quot;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //更新的时候调用</span><br><span class="line">        update: function() &#123;</span><br><span class="line">            console.log(&apos;updata&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //解绑定的时候调用</span><br><span class="line">        unbind: function() &#123;</span><br><span class="line">            console.log(&apos;unbind   &apos;, arguments)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //组件完成一个周期调用</span><br><span class="line">        componentUpdated: function() &#123;</span><br><span class="line">            console.log(&quot;componentUpdated&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &quot;hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    vm.message = 1000;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="自定义指令子简写"><a href="#自定义指令子简写" class="headerlink" title="自定义指令子简写"></a>自定义指令子简写</h4><blockquote><p>大多数情况下，我们可能想在 bind 和 update 钩子上做重复动作，并且不想关心其它的钩子函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div v-color-swatch=&quot;&#123; color: &apos;green&apos;, text: &apos;菜鸟教程!&apos; &#125;&quot;&gt;</span><br><span class="line">                test</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            //大多数情况下，我们可能想在 bind 和 update 钩子上做重复动作，并且不想关心其它的钩子函数。可以这样写:</span><br><span class="line">            Vue.directive(&apos;color-swatch&apos;, function(el, binding) &#123;</span><br><span class="line">                //el: 可以直接通过el操作dom</span><br><span class="line">                el.style.backgroundColor = binding.value.color;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            new Vue(&#123;</span><br><span class="line">                el: &apos;#app&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令之对象字面量"><a href="#自定义指令之对象字面量" class="headerlink" title="自定义指令之对象字面量"></a>自定义指令之对象字面量</h4><blockquote><p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。<br>记住，指令函数能够接受所有合法类型的 JavaScript 表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line">            &lt;!--自定义指令--&gt;</span><br><span class="line">            &lt;div v-runoob=&quot;&#123; color: &apos;green&apos;, text: &apos;菜鸟教程!&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.directive(&apos;runoob&apos;, function(el, binding) &#123;</span><br><span class="line">        //el: 可以直接通过el操作dom</span><br><span class="line">        el.innerHTML = binding.value.text;</span><br><span class="line">        el.style.backgroundColor = binding.value.color;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="指令的高级选项-了解"><a href="#指令的高级选项-了解" class="headerlink" title="指令的高级选项(了解)"></a>指令的高级选项(了解)</h2><blockquote><p>该部分在2.0中已经不做详细的讲解</p></blockquote><h2 id="vue2-0中的变化"><a href="#vue2-0中的变化" class="headerlink" title="vue2.0中的变化"></a>vue2.0中的变化</h2><p><strong>变化主要体现在以下两个方面</strong></p><h3 id="钩子函数-1"><a href="#钩子函数-1" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.0中</span><br><span class="line"></span><br><span class="line">bind：只调用一次，在指令第一次绑定到元素上时调用。</span><br><span class="line">update： 在 bind 之后立即以初始值为参数第一次调用，之后每当绑定值变化时调用，参数为新值与旧值。</span><br><span class="line">unbind：只调用一次，在指令从元素上解绑时调用。</span><br></pre></td></tr></table></figure><h3 id="函数的参数-实例属性"><a href="#函数的参数-实例属性" class="headerlink" title="函数的参数/实例属性"></a>函数的参数/实例属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.0中</span><br><span class="line"></span><br><span class="line">所有的钩子函数将被复制到实际的指令对象中，钩子内 this 指向这个指令对象。这个对象暴露了一些有用的属性：</span><br><span class="line">el: 指令绑定的元素。</span><br><span class="line">vm: 拥有该指令的上下文 ViewModel。</span><br><span class="line">expression: 指令的表达式，不包括参数和过滤器。</span><br><span class="line">arg: 指令的参数。</span><br><span class="line">name: 指令的名字，不包含前缀。</span><br><span class="line">modifiers: 一个对象，包含指令的修饰符。</span><br><span class="line">descriptor: 一个对象，包含指令的解析结果。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三部分-指令&quot;&gt;&lt;a href=&quot;#第三部分-指令&quot; class=&quot;headerlink&quot; title=&quot;第三部分 指令&quot;&gt;&lt;/a&gt;第三部分 指令&lt;/h1&gt;&lt;h2 id=&quot;内置指令总结&quot;&gt;&lt;a href=&quot;#内置指令总结&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>02-vue基础</title>
    <link href="http://yoursite.com/2018/05/10/vue/02-base1/"/>
    <id>http://yoursite.com/2018/05/10/vue/02-base1/</id>
    <published>2018-05-10T01:32:34.949Z</published>
    <updated>2018-05-10T01:33:12.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二部分-vue的基础特性-上"><a href="#第二部分-vue的基础特性-上" class="headerlink" title="第二部分 vue的基础特性(上)"></a>第二部分 vue的基础特性(上)</h1><blockquote><p>在这一章我们主要是讲解一些vue实例的属性和一些基础的指令</p></blockquote><blockquote><blockquote><p>vue实例属性:其实和我们之前所学的对象的属性是相似的东西</p></blockquote></blockquote><blockquote><blockquote><p>vue的基础指令: 对于指令,大家可能之前么有接触过相关的概念,其实大家可以这样理解</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>指令:可以看做是命令,在vue中我们可以通过指令来完成相关的操作</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>指令: 在vue中以v-开头,后面紧跟具体的操作命令</p></blockquote></blockquote></blockquote><p><strong>一些基本的指令,具体的用法下面会进行介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">v-once: 只绑定一次</span><br><span class="line"></span><br><span class="line">v-bind: 绑定数据</span><br><span class="line"></span><br><span class="line">v-model: 绑定模型</span><br><span class="line"></span><br><span class="line">v-on: 绑定事件</span><br><span class="line"></span><br><span class="line">v-if v-show: 条件渲染</span><br></pre></td></tr></table></figure><h2 id="实例和选项"><a href="#实例和选项" class="headerlink" title="实例和选项"></a>实例和选项</h2><blockquote><p>也就是vue实例化后的对象的一些属性相关的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el         data       methods</span><br><span class="line"></span><br><span class="line">$el        $data                $mount</span><br></pre></td></tr></table></figure><h3 id="代理-数据"><a href="#代理-数据" class="headerlink" title="代理/数据"></a>代理/数据</h3><blockquote><p>我们之前提到过,vue是mvvm模型,其中的m指的是数据模型,在这里我们对数据模型这一块做一个简单的讲解</p></blockquote><h4 id="vue的代理-数据"><a href="#vue的代理-数据" class="headerlink" title="vue的代理/数据"></a>vue的代理/数据</h4><blockquote><p>每个vue的实例都会代理其data对象中的所有的属性</p><blockquote><ol><li>通过vue的实例,可以直接访问data对象中属性</li></ol></blockquote><blockquote><ol start="2"><li>通过vue的实例,可以设置data对象里面的内容,设置属性也会影响到原始的数据</li></ol></blockquote></blockquote><h4 id="在代理中存在的问题"><a href="#在代理中存在的问题" class="headerlink" title="在代理中存在的问题"></a>在代理中存在的问题</h4><blockquote><p>在实例创建之后添加新的属性到实例上,不会触发视图的更新</p><blockquote><p><strong>关于这一部分的内容在响应系统中再做详细的讲解</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    //直接访问</span><br><span class="line">    console.log(vm.message)//hello world</span><br><span class="line">    </span><br><span class="line">    //设置属性也会影响到数据</span><br><span class="line">    vm.message = 10;</span><br><span class="line">    console.log(dataModel.message)//10</span><br><span class="line">    </span><br><span class="line">    //在vue实例创建之后,再添加新的属性到实例上,不会触发视图的更新</span><br><span class="line">    vm.a = 100;</span><br><span class="line">    console.log(dataModel.a)//undefined</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="vue-的"><a href="#vue-的" class="headerlink" title="vue 的 $"></a>vue 的 $</h4><blockquote><p>Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的数据属性区分</p></blockquote><blockquote><blockquote><p>了解 : $set 的使用存在一些问题,在vue2.0中作了简单修改</p></blockquote></blockquote><blockquote><p>对于 Vue 实例，可以使用 $set(key, value) 实例方法：这样使用会报错,以下两种方式是可以使用的(<strong>存在疑问</strong>)</p></blockquote><blockquote><blockquote><p>　Vue.set(object, key, value)</p></blockquote></blockquote><blockquote><blockquote><p>this.$set(this.someObject,’b’,2)</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&apos;item in arr&apos;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        arr : [1,2,3]</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //读取值</span><br><span class="line">    console.log(vm.arr)</span><br><span class="line">    console.log(vm.$data.arr)</span><br><span class="line">    </span><br><span class="line">    //设置值----存在的问题,当数组里面的值使用下标的形式修改的时候,视图和模型数据不会动态更新</span><br><span class="line">    vm.arr[0]=4;</span><br><span class="line">    </span><br><span class="line">    //使用set方法设置的值,可以动态更新到模型数据和视图上</span><br><span class="line">    Vue.set(vm.arr,0,100)</span><br><span class="line">    </span><br><span class="line">    //使用vue的实例暴露出来的属性和方法进行操作</span><br><span class="line">    vm.$set(vm.arr,1,200)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote><p>使用<strong>methods</strong>来定义方法,使用v-on监听事件,绑定事件处理函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">关于事件处理这一块,在这里做一点补充</span><br><span class="line"></span><br><span class="line">1. 在vue1中,支持自定义事件,vue2中废弃了</span><br><span class="line"></span><br><span class="line">2. vue2中推荐使用全局的$on和$emit来进行全局的方法的定义和触发</span><br><span class="line"></span><br><span class="line">3. vue2中,也可以使用插件vuex来处理</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里使用v-on来绑定事件处理的方法(函数)--&gt;</span><br><span class="line">            &lt;button v-on:click=&apos;fn&apos;&gt;click&lt;/button&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel,</span><br><span class="line">        //在这里使用methods对象来定义方法(点击事件处理函数)</span><br><span class="line">        methods:&#123;</span><br><span class="line">            fn: function()&#123;</span><br><span class="line">                console.log(&quot;这个方法被调用了&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li><p>vue在创建的时候会有一系列初始化的步骤</p><ul><li><p>实例需要配置数据监测(data observe),模板编译,挂载到dom,然后在变化时更新dom</p></li><li><p>实例也会调用一些生命周期钩子,为我们提供了自定义逻辑的机会</p></li><li><p>所有的生命周期钩子自动绑定this上下文到实例中,箭头函数绑定</p></li></ul></li><li><p>生命周期钩子函数</p><ul><li>其实指的也就是生命周期方法,只不过是<strong>挂载</strong>到执行的各个阶段,所以叫钩子函数</li></ul></li></ol><p><img src="img/生命周期1.bmp" alt="双向绑定"></p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue入门之生命周期&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;btnSetNumber&quot; v-model=&quot;number&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var app = new Vue(&#123;</span><br><span class="line">                el: &apos;#app&apos;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    number: 1</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                //在创建对象之前,监控数据变化和初始化事件之前调用</span><br><span class="line">                beforeCreate: function() &#123;</span><br><span class="line">                    console.log(&apos;beforeCreate 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)  //数据监测还没有开始</span><br><span class="line">                &#125;,</span><br><span class="line">                //实例创建完成之后调用,挂载阶段还没有开始</span><br><span class="line">                created: function() &#123;</span><br><span class="line">                    console.log(&apos;cteated 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //开始挂载的时候执行,这时html还没有渲染到页面上</span><br><span class="line">                beforeMount: function() &#123;</span><br><span class="line">                    console.log(&apos;beforeMount 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //挂载完成,也就是模板中的heml渲染到了页面中,此时可以做一些ajax的操作,这个钩子函数只会执行一次</span><br><span class="line">                mounted: function() &#123;</span><br><span class="line">                    console.log(&apos;mounted 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //数据更新之前调用</span><br><span class="line">                beforeUpdate: function() &#123;</span><br><span class="line">                    console.log(&apos;beforeUpdate 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //数据更新之后调用</span><br><span class="line">                updated: function() &#123;</span><br><span class="line">                    console.log(&apos;updated 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //数据销毁之前</span><br><span class="line">                beforeDestroy: function() &#123;</span><br><span class="line">                    console.log(&apos;beforeDestroy 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">                //数据销毁之后</span><br><span class="line">                destroyed: function() &#123;</span><br><span class="line">                    console.log(&apos;destroyed 钩子执行...&apos;);</span><br><span class="line">                    console.log(this.number)</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            //实现数据的更新</span><br><span class="line">            //  vm.$set(dataModel, &apos;number&apos;, 123)</span><br><span class="line">    </span><br><span class="line">            //销毁钩子的执行</span><br><span class="line">            //  vm.$destroy(true)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>在vue2.0之后 , 也就是后续的版本中, 生命周期钩子已经发生的变化   ,   在原先的基础上新增了两个生命周期钩子函数</p></blockquote><p><strong>1.activated</strong></p><p>keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。</p><p><strong>2.deactivated</strong></p><p>keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。</p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><blockquote><p>vue的核心特性之一是双向的数据绑定,关于如何进行数据的绑定,下面我们结合具体的例子来作讲解</p></blockquote><h3 id="数据绑定的语法"><a href="#数据绑定的语法" class="headerlink" title="数据绑定的语法"></a>数据绑定的语法</h3><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><blockquote><p>直接填坑,进行数据的绑定</p><blockquote><p>v-once:只绑定一次,首次赋值后更改vm实例的属性值不会引起dom元素绑定的值的变化</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;message&quot; id=&quot;&quot; value=&quot;&quot; /&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="html属性的绑定"><a href="#html属性的绑定" class="headerlink" title="html属性的绑定"></a>html属性的绑定</h4><blockquote><p>v-bind: 为html标签绑定属性值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;div v-bind:id=&quot;mainID&quot; v-html=&quot;main&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;img v-bind:src=&quot;imgUrl&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  绑定属性</span><br><span class="line">    v-bind:prop_name=&quot;prop_value&quot;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   输出html</span><br><span class="line">    v-html=&quot;content&quot;</span><br><span class="line">    </span><br><span class="line">    在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。  </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;hello world&quot;,</span><br><span class="line">            mainID:&quot;dv&quot;,</span><br><span class="line">            main:&quot;&lt;p&gt;这是v-html绑定的内容&lt;/p&gt;&quot;,</span><br><span class="line">            imgUrl:&apos;http://img2.imgtn.bdimg.com/it/u=2204211808,2775991232&amp;fm=23&amp;gp=0.jpg&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="绑定表达式"><a href="#绑定表达式" class="headerlink" title="绑定表达式"></a>绑定表达式</h4><blockquote><p>一段绑定表达式可以由一个简单的js表达式和可选的一个或多个过滤器组成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--字符串拼接--&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; message + &quot;----&quot; + name &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;!--三元运算符--&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; bool ? 1 : 0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;!--四则运算--&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; num * 2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    使用的限制是只能包含单个表达式</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //创建Vue对象</span><br><span class="line">    var app =new Vue (&#123;</span><br><span class="line">        el:&apos;#app&apos;,//将Vue对象绑定到指定的选择器</span><br><span class="line">        data:&#123;</span><br><span class="line">            message: &apos;hello world &apos;,</span><br><span class="line">            name:&apos;高辉&apos;,</span><br><span class="line">            bool: true,</span><br><span class="line">            num:10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><blockquote><p>vue中使用v-model指令对表单元素进行双向的数据绑定</p></blockquote><h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><blockquote><p>绑定的值就是value值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;    </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><blockquote><p>绑定的值也是value值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;p&gt;multiline message is&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;p style=&quot;white-space: pre&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;textarea v-model=&quot;message&quot; placeholder=&quot;mulpiline message&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h4><blockquote><p>绑定的值就是选中单选框的value值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;label&gt;</span><br><span class="line">                &lt;input type=&quot;radio&quot; value=&quot;male&quot; v-model=&apos;gender&apos; /&gt;男</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;label&gt;</span><br><span class="line">                &lt;input type=&quot;radio&quot; value=&quot;female&quot; v-model=&apos;gender&apos; /&gt;女</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;gender&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;,</span><br><span class="line">        gender:&quot;male&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="checkbox-1"><a href="#checkbox-1" class="headerlink" title="checkbox - 1"></a>checkbox - 1</h4><blockquote><p>单选:　绑定的值是bool值,决定是否选中</p></blockquote><blockquote><p>多选: 绑定的值是一个数组类型,value值为数组里面的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123; message1 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;checked1&quot; /&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;h2&gt;&#123;&#123;message2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot;  v-model=&quot;checked2&quot; value=&quot;1&quot; /&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot;  v-model=&quot;checked2&quot; value=&quot;2&quot; /&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;rose&lt;/label&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;input type=&quot;checkbox&quot;  v-model=&quot;checked2&quot; value=&quot;3&quot; /&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;mack&lt;/label&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;input type=&quot;checkbox&quot;  v-model=&quot;checked2&quot; value=&quot;4&quot; /&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;july&lt;/label&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123;checked&#125;&#125;&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message1: &apos;单选&apos;,</span><br><span class="line">        message2: &apos;多选&apos;,</span><br><span class="line">        checked1: false,</span><br><span class="line">        checked2:[1,2]</span><br><span class="line">    &#125;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="checkedbox-2"><a href="#checkedbox-2" class="headerlink" title="checkedbox - 2"></a>checkedbox - 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;!--引入js--&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; picked &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; toggle &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; v-bind:true-value=&quot;a&quot; v-bind:false-value=&quot;b&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">      picked: &apos;&apos;,</span><br><span class="line">      toggle: true,</span><br><span class="line">      selected: &apos;abc&apos;,</span><br><span class="line">      a: &apos;1&apos;,</span><br><span class="line">      b: &apos;2&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var em = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><blockquote><p>单选: 根据option的value值设置选中</p></blockquote><blockquote><p>多选: 根据value值的数组设置选中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h2&gt;单选&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">            &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">                &lt;option value=&quot;A&quot;&gt;A&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;B&quot;&gt;B&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;C&quot;&gt;C&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            &lt;p&gt;单选选中项是: &#123;&#123;selected&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h2&gt;多选&lt;/h2&gt;</span><br><span class="line">            &lt;select v-model=&quot;selecteds&quot; multiple&gt;</span><br><span class="line">                &lt;option value=&quot;A&quot;&gt;A&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;B&quot;&gt;B&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;C&quot;&gt;C&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            &lt;p&gt;多选选中项是:　&#123;&#123;selecteds&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h2&gt;动态的select--循环渲染-设置单选&lt;/h2&gt;</span><br><span class="line">            &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">                &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt;</span><br><span class="line">                    &#123;&#123;option.text&#125;&#125;</span><br><span class="line">                &lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            &lt;p&gt;多选选中项是:　&#123;&#123;selecteds&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message1: &apos;单选&apos;,</span><br><span class="line">        message2: &apos;多选&apos;,</span><br><span class="line">        selected: &apos;B&apos;,</span><br><span class="line">        selecteds: [&apos;A&apos;, &apos;B&apos;],</span><br><span class="line">        options: [&#123;</span><br><span class="line">            text: &apos;One&apos;,</span><br><span class="line">            value: &apos;A&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            text: &apos;Two&apos;,</span><br><span class="line">            value: &apos;B&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            text: &apos;Three&apos;,</span><br><span class="line">            value: &apos;C&apos;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="绑定value"><a href="#绑定value" class="headerlink" title="绑定value"></a>绑定value</h4><blockquote><p>对于单选按钮，勾选框及选择列表选项， v-model 绑定的 value 通常是静态字符串（对于勾选框是逻辑值）</p></blockquote><blockquote><p>复选框</p></blockquote><blockquote><p>选择列表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--对于单选按钮，勾选框及选择列表选项， v-model 绑定的 value 通常是静态字符串（对于勾选框是逻辑值）：--&gt;</span><br><span class="line">            &lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot;&gt;</span><br><span class="line">            &lt;!-- `toggle` 为 true 或 false --&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot;&gt;</span><br><span class="line">            &lt;!-- 当选中时，`selected` 为字符串 &quot;abc&quot; --&gt;</span><br><span class="line">            &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">                &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--复选框--&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; v-bind:true-value=&quot;a&quot; v-bind:false-value=&quot;b&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--选择列表--&gt;</span><br><span class="line">            &lt;select v-model=&quot;selected1&quot;&gt;</span><br><span class="line">                &lt;!-- 内联对象字面量 --&gt;</span><br><span class="line">                &lt;option v-bind:value=&quot;&#123; number: 123 &#125;&quot;&gt;123&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        picked: &apos;a&apos;,</span><br><span class="line">        toggle: true,</span><br><span class="line">        selected: &apos;abc&apos;,</span><br><span class="line">        a: true,</span><br><span class="line">        b: false,</span><br><span class="line">        selected1: &#123;</span><br><span class="line">            number: 123</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 选中</span><br><span class="line">    console.log(vm.toggle === vm.a) //true</span><br><span class="line"></span><br><span class="line">    // 取消选中</span><br><span class="line">    console.log(vm.toggle === vm.b) //false</span><br><span class="line"></span><br><span class="line">    // 选择列表的设置</span><br><span class="line">    console.log(vm.selected1)</span><br><span class="line">    console.log(vm.selected1.number)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h5><blockquote><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据 (除了 上述 IME 部分)</p><blockquote><p>但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    禁用数据的双向绑定</span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;hello world!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h5><blockquote><p>如果想自动将用户的输入值转为 Number 类型</p><blockquote><p>如果原值的转换结果为 NaN 则返回原值</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model.number=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    用户输入的数据可以转化W为number类型   进行输入的转化</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   不能转化问number类型(NaN),会保持当前的输入</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;11&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h5><blockquote><p>过滤用户输入的首尾空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model.trim=&apos;message&apos; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--过滤用户输入的首尾空格--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="class-与-style"><a href="#class-与-style" class="headerlink" title="class 与 style"></a>class 与 style</h3><h4 id="class的绑定"><a href="#class的绑定" class="headerlink" title="class的绑定"></a>class的绑定</h4><ol><li><p>对象语法</p></li><li><p>数组语法</p></li></ol><h4 id="style的绑定"><a href="#style的绑定" class="headerlink" title="style的绑定"></a>style的绑定</h4><ol><li><p>对象语法</p><blockquote><p>使用对象的形式绑定样式</p></blockquote></li><li><p>数组语法</p><blockquote><p>绑定多个对象</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            .active &#123;</span><br><span class="line">                background: pink;</span><br><span class="line">                width: 200px;</span><br><span class="line">                height: 200px;</span><br><span class="line">                float: left;</span><br><span class="line">                margin-left: 30px;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            .bd &#123;</span><br><span class="line">                border: 1px solid red;</span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--绑定单个类样式--&gt;</span><br><span class="line">            &lt;div v-bind:class=&quot;&#123;active:isActive&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--绑定多个类样式--&gt;</span><br><span class="line">            &lt;div v-bind:class=&quot;&#123;active:isActive,bd:hasBorder&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--使用对象的方式绑定类样式--&gt;</span><br><span class="line">            &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--使用数组绑定--&gt;</span><br><span class="line">            &lt;div v-bind:class=&quot;[classA,classB]&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--三元表达式--&gt;</span><br><span class="line">            &lt;div v-bind:class=&quot;[classA, isB ? classB : &apos;&apos;]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--内联样式的绑定--&gt;</span><br><span class="line">            &lt;div v-bind:style=&quot;&#123;fontSize: size + &apos;px&apos;, backgroundColor: bgcolor, width: width&#125;&quot;&gt;</span><br><span class="line">                vue 内联样式的绑定</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  </span><br><span class="line">样式的绑定</span><br><span class="line">    1. v-bind:class=&quot;&#123;active:isActive&#125;</span><br><span class="line">    </span><br><span class="line">                   当绑定的数据isActive的值为true时,就会为该元素添加类样式</span><br><span class="line"></span><br><span class="line">    2. v-bind:class=&quot;&#123;active:isActive,bd:hasBorder&#125;&quot; </span><br><span class="line">   </span><br><span class="line">                   支持混合类样式绑定,即同时绑定多个类样式</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    3. v-bind:class=&quot;classObject&quot;</span><br><span class="line">                </span><br><span class="line">                   支持使用对象绑定类样式</span><br><span class="line">                   </span><br><span class="line">    4. v-bind:class=&quot;[classA,classB]&quot;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    5. &lt;div v-bind:class=&quot;[classA, isB ? classB : &apos;&apos;]&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">        当 v-bind:style 使用需要厂商前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasBorder: true,</span><br><span class="line">            classObject: &#123;</span><br><span class="line">                active: true,</span><br><span class="line">                bd: true</span><br><span class="line">            &#125;,</span><br><span class="line">            //内联样式</span><br><span class="line">            size: 19,</span><br><span class="line">            width: 200,</span><br><span class="line">            bgcolor: &apos;red&apos;,</span><br><span class="line">            //数组形式</span><br><span class="line">            classA: &quot;a&quot;,</span><br><span class="line">            classB: &apos;b&apos;,</span><br><span class="line">            isB: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h2><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>v-if　 v-else-if v-else</p></blockquote><blockquote><p>v-show</p></blockquote><blockquote><blockquote><p>　<strong>支持模板语法</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;!--这里 v-if 指令将根据表达式 greeting 值的真假删除/插入 &lt;p&gt; 元素。--&gt;</span><br><span class="line">            &lt;p v-if=&quot;greeting&quot;&gt;Hello!&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;!--bool值可以使条件表达式--&gt;</span><br><span class="line">            &lt;p v-if=&quot;Math.random()&gt;0.5&quot;&gt;根据随机值判断是否显示&lt;/p&gt;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            &lt;!--使用v-if配合template可以实现模板渲染--&gt;</span><br><span class="line">            &lt;template v-if=&apos;bool&apos;&gt;</span><br><span class="line">                &lt;h1&gt;&#123;&#123;header&#125;&#125;&lt;/h1&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;paragraph&#125;&#125; 1&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;paragraph&#125;&#125; 2&lt;/p&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;data in array&quot;&gt;&#123;&#123;data&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var viewModel = &#123;</span><br><span class="line">        //模型数据的初始化</span><br><span class="line">        message: &apos;hello world!&apos;,</span><br><span class="line">        greeting:true,</span><br><span class="line">        bool:true,</span><br><span class="line">        header:&quot;这是一个标题&quot;,</span><br><span class="line">        paragraph:&quot;这是一个段落&quot;,</span><br><span class="line">        array:[1,2,3,4]</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // viewModel    连接模型和数据库</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: viewModel,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><blockquote><p>v-for</p></blockquote><blockquote><blockquote><p><strong>支持模板语法</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--view--&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;!--简单的列表渲染--&gt;</span><br><span class="line">                &lt;li v-for=&apos;data in liData1&apos;&gt;</span><br><span class="line">                    &#123;&#123;data&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;!--复杂的列表渲染--&gt;</span><br><span class="line">                &lt;li v-for=&apos;data in liData2&apos;&gt;</span><br><span class="line">                    &#123;&#123;data.text&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;!--添加index--&gt;</span><br><span class="line">                &lt;li v-for=&quot;(data,index) in liData2&quot;&gt;</span><br><span class="line">                    &#123;&#123;data.text&#125;&#125;=======index====&#123;&#123;index&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--模板语法--&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;h2&gt;模板渲染&lt;/h2&gt;</span><br><span class="line">                &lt;template v-for=&quot;item in items&quot;&gt;</span><br><span class="line">                    &lt;li&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">                    &lt;li class=&quot;divider&quot;&gt;&#123;&#123;item.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //    model</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        num: 10,</span><br><span class="line">        liData1: [1, 2, 3],</span><br><span class="line">        liData2: [&#123;</span><br><span class="line">            text: &quot;这是一段文本&quot;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            text: &quot;这是一段文本&quot;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            text: &quot;这是一段文本&quot;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            text: &quot;这是一段文本&quot;</span><br><span class="line">        &#125;],</span><br><span class="line">        items: [&#123;</span><br><span class="line">            name: 1,</span><br><span class="line">            age: 1</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: 2,</span><br><span class="line">            age: 2</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // viewModel</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="template模板用法-简单了解"><a href="#template模板用法-简单了解" class="headerlink" title="template模板用法(简单了解)"></a>template模板用法(简单了解)</h3><blockquote><p>template标签用法</p></blockquote><blockquote><p>vue实例的   el 和 template   选项</p><blockquote><p>配合使用,完成页面的渲染</p></blockquote></blockquote><blockquote><blockquote><p><strong>组件/模板内部的元素一定要有一个根元素包裹</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!--视图的入口--&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script id=&quot;tp1&quot; type=&quot;x-template&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;tp1&quot;&gt;</span><br><span class="line">                &lt;p&gt;this is a tp1 from script tag&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    //在这里,将template对应的script内部的元素挂载到对应的el所指定的位置</span><br><span class="line">    var vm= new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        template:&quot;#tp1&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二部分-vue的基础特性-上&quot;&gt;&lt;a href=&quot;#第二部分-vue的基础特性-上&quot; class=&quot;headerlink&quot; title=&quot;第二部分 vue的基础特性(上)&quot;&gt;&lt;/a&gt;第二部分 vue的基础特性(上)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在这一
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>01-vue入门</title>
    <link href="http://yoursite.com/2018/05/10/vue/01-vueStart/"/>
    <id>http://yoursite.com/2018/05/10/vue/01-vueStart/</id>
    <published>2018-05-10T01:32:34.667Z</published>
    <updated>2018-05-10T01:33:01.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-vue入门-简介"><a href="#第一部分-vue入门-简介" class="headerlink" title="第一部分: vue入门/简介"></a>第一部分: vue入门/简介</h1><p>嘻嘻嘻</p><h2 id="vue的引入"><a href="#vue的引入" class="headerlink" title="vue的引入"></a>vue的引入</h2><blockquote><p>先看下面这样一个简单的例子,实现了这样一个功能</p></blockquote><blockquote><blockquote><p><strong>数据的双向绑定:也就是数据的同步修改</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">逻辑分析: </span><br><span class="line"></span><br><span class="line">1. 我们需要一个UI元素和属性相互绑定的方法</span><br><span class="line">2. 我们需要监视属性和UI元素的变化</span><br><span class="line">3. 我们需要让所有绑定的对象和元素都能感知到变化</span><br></pre></td></tr></table></figure><h3 id="vue与js的对比"><a href="#vue与js的对比" class="headerlink" title="vue与js的对比"></a>vue与js的对比</h3><h4 id="js的实现-了解"><a href="#js的实现-了解" class="headerlink" title="js的实现(了解)"></a>js的实现(了解)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Demo&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h4&gt;数据的双向绑定----js的实现&lt;/h4&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; data-bind-1=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; data-bind-1=&quot;name&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function DataBinder(object_id) &#123;</span><br><span class="line">        // Create a simple PubSub object</span><br><span class="line">        var pubSub = &#123;</span><br><span class="line">                callbacks: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">                on: function(msg, callback) &#123;</span><br><span class="line">                    this.callbacks[msg] = this.callbacks[msg] || [];</span><br><span class="line">                    this.callbacks[msg].push(callback);</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                publish: function(msg) &#123;</span><br><span class="line">                    this.callbacks[msg] = this.callbacks[msg] || [];</span><br><span class="line">                    for(var i = 0, len = this.callbacks[msg].length; i &lt; len; i++) &#123;</span><br><span class="line">                        this.callbacks[msg][i].apply(this, arguments);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            data_attr = &quot;data-bind-&quot; + object_id,</span><br><span class="line">            message = object_id + &quot;:input&quot;,</span><br><span class="line">            timeIn;</span><br><span class="line"></span><br><span class="line">        changeHandler = function(evt) &#123;</span><br><span class="line">            var target = evt.target || evt.srcElement, // IE8 compatibility</span><br><span class="line">                prop_name = target.getAttribute(data_attr);</span><br><span class="line"></span><br><span class="line">            if(prop_name &amp;&amp; prop_name !== &quot;&quot;) &#123;</span><br><span class="line">                clearTimeout(timeIn);</span><br><span class="line">                timeIn = setTimeout(function() &#123;</span><br><span class="line">                    pubSub.publish(message, prop_name, target.value);</span><br><span class="line">                &#125;, 50);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // Listen to change events and proxy to PubSub</span><br><span class="line">        if(document.addEventListener) &#123;</span><br><span class="line">            document.addEventListener(&quot;input&quot;, changeHandler, false);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // IE8 uses attachEvent instead of addEventListener</span><br><span class="line">            document.attachEvent(&quot;oninput&quot;, changeHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // PubSub propagates changes to all bound elements</span><br><span class="line">        pubSub.on(message, function(evt, prop_name, new_val) &#123;</span><br><span class="line">            var elements = document.querySelectorAll(&quot;[&quot; + data_attr + &quot;=&quot; + prop_name + &quot;]&quot;),</span><br><span class="line">                tag_name;</span><br><span class="line"></span><br><span class="line">            for(var i = 0, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">                tag_name = elements[i].tagName.toLowerCase();</span><br><span class="line"></span><br><span class="line">                if(tag_name === &quot;input&quot; || tag_name === &quot;textarea&quot; || tag_name === &quot;select&quot;) &#123;</span><br><span class="line">                    elements[i].value = new_val;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    elements[i].innerHTML = new_val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return pubSub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function DBind(uid) &#123;</span><br><span class="line">        var binder = new DataBinder(uid),</span><br><span class="line"></span><br><span class="line">            user = &#123;</span><br><span class="line">                // ...</span><br><span class="line">                attributes: &#123;&#125;,</span><br><span class="line">                set: function(attr_name, val) &#123;</span><br><span class="line">                    this.attributes[attr_name] = val;</span><br><span class="line">                    // Use the `publish` method</span><br><span class="line">                    binder.publish(uid + &quot;:input&quot;, attr_name, val, this);</span><br><span class="line">                &#125;,</span><br><span class="line">                get: function(attr_name) &#123;</span><br><span class="line">                    return this.attributes[attr_name];</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                _binder: binder</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        // Subscribe to the PubSub</span><br><span class="line">        binder.on(uid + &quot;:input&quot;, function(evt, attr_name, new_val, initiator) &#123;</span><br><span class="line">            if(initiator !== user) &#123;</span><br><span class="line">                user.set(attr_name, new_val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var DBind = new DBind(1);</span><br><span class="line">    DBind.set(&quot;name&quot;, &quot;黄奇&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="vue的实现"><a href="#vue的实现" class="headerlink" title="vue的实现"></a>vue的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;!--1. 引入js文件--&gt;</span><br><span class="line">    &lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--2. 视图    view--&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h4&gt;数据双向绑定----vue&lt;/h4&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//数据模型</span><br><span class="line">var dataModel = &#123;</span><br><span class="line">    message: &quot;hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//viewModel   ----连接视图和数据模型</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: dataModel</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><h3 id="描述-vue的发展史"><a href="#描述-vue的发展史" class="headerlink" title="描述(vue的发展史)"></a>描述(vue的发展史)</h3><p><img src="img/0000.png" alt=""></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vue是一个构建用户界面的框架(库),它的目标是通过尽可能简单的api实现响应的数据绑定和组合的视图集合</span><br><span class="line"></span><br><span class="line">vue自身不是一个全能框架的核心是只关注视图层,因此它非常容易学习，非常容易与其它库或已有项目整合</span><br><span class="line"></span><br><span class="line">vue在与相关工具和支持库一起使用时, 也能完美地驱动复杂的单页应用,在之后的课程中,我们会配合webpack来使用</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><h4 id="响应的数据绑定-响应式编程"><a href="#响应的数据绑定-响应式编程" class="headerlink" title="响应的数据绑定/响应式编程"></a>响应的数据绑定/响应式编程</h4><blockquote><p>保持状态和数据的同步</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.js 的核心是一个响应的数据绑定系统，它让数据与 DOM 保持同步非常简单。在使用 jQuery 手工操作 </span><br><span class="line"></span><br><span class="line">DOM时，我们的代码常常是命令式的、重复的与易错的。</span><br><span class="line"></span><br><span class="line">Vue.js 拥抱数据驱动的视图概念。通俗地讲，它意味着我们在普通 HTML 模板中使用特殊的语法将 </span><br><span class="line"></span><br><span class="line">DOM“绑定”到底层数据。一旦创建了绑定，DOM 将与数据保持同步。</span><br><span class="line"></span><br><span class="line">每当修改了数据，DOM 便相应地更新。这样我们应用中的逻辑就几乎都是直接修改数据了，不必与 </span><br><span class="line"></span><br><span class="line">DOM更新搅在一起。这让我们的代码更容易撰写、理解与维护。</span><br></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。</span><br><span class="line"></span><br><span class="line">在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</span><br></pre></td></tr></table></figure><h2 id="为什么要用Vue-js"><a href="#为什么要用Vue-js" class="headerlink" title="为什么要用Vue.js"></a>为什么要用Vue.js</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="轻量级的框架"><a href="#轻量级的框架" class="headerlink" title="轻量级的框架"></a>轻量级的框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只关注视图层,是一个构建数据驱动的视图集合,大小只有几十kb</span><br></pre></td></tr></table></figure><h4 id="简单易学"><a href="#简单易学" class="headerlink" title="简单易学"></a>简单易学</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">国人开发,中文文档,不存在语言障碍,易于理解与学习</span><br></pre></td></tr></table></figure><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">保留了angular的优点</span><br><span class="line">在数据操作方面变得更为简单,极大的解放了dom操作(通过属性绑定的形式来实现)</span><br></pre></td></tr></table></figure><h4 id="组件化-1"><a href="#组件化-1" class="headerlink" title="组件化"></a>组件化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">保留了 react框架的优点</span><br><span class="line">实现html的封装,重用,在构建单页面应用方面有独特的优势</span><br></pre></td></tr></table></figure><h4 id="视图-数据-结构分离"><a href="#视图-数据-结构分离" class="headerlink" title="视图,数据,结构分离"></a>视图,数据,结构分离</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使得数据的更改变得非常简单,不需要进行逻辑代码的修改,只需要操作数据就能够完成相关的操作</span><br></pre></td></tr></table></figure><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom操作是非常耗费性能的</span><br><span class="line">不再使用原生的dom操作节点,极大解放dom操作,但具体操作的还是dom,只不过是换了另外一种方式</span><br></pre></td></tr></table></figure><h4 id="运行速度更快"><a href="#运行速度更快" class="headerlink" title="运行速度更快"></a>运行速度更快</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相比较react而言,同样都是操作虚拟dom,就性能而言,vue存在很大的优势(了解)</span><br></pre></td></tr></table></figure><h3 id="缺点-了解"><a href="#缺点-了解" class="headerlink" title="缺点/了解"></a>缺点/了解</h3><h4 id="支持特性"><a href="#支持特性" class="headerlink" title="支持特性"></a>支持特性</h4><blockquote><p>作为一个新兴的前端框架,在支持特性方面存在一些问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器端: 抛弃了对IE9以下版本的支持</span><br><span class="line">android: 4.2 + </span><br><span class="line">ios:　ios 7+</span><br></pre></td></tr></table></figure><h4 id="前后端混合受限"><a href="#前后端混合受限" class="headerlink" title="前后端混合受限"></a>前后端混合受限</h4><blockquote><p>在使用后端的 模板引擎渲染的项目中,vue会受到一定的限制</p></blockquote><blockquote><blockquote><p>vue只能和后端的模板文件混合在一起,获取的后端数据也依赖于后端的渲染,在处理json对象和数组的时候会很麻烦</p></blockquote></blockquote><h2 id="MVVM模式简介"><a href="#MVVM模式简介" class="headerlink" title="MVVM模式简介"></a>MVVM模式简介</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">大致可以分为三个部分:</span><br><span class="line"></span><br><span class="line">1. M: model,模型,在这里指的是数据模型</span><br><span class="line"></span><br><span class="line">2. V: view,视图,在这里指的就是我们写的页面</span><br><span class="line"></span><br><span class="line">3. VM ViewModel,是数据模型和视图连接的纽带(桥梁)</span><br><span class="line"></span><br><span class="line">我们要把数据模型上面的数据绑定到视图上,要通过这个纽带(桥梁)来实现</span><br></pre></td></tr></table></figure><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="img/02vue双向绑定.jpg" alt="双向绑定"></p><h2 id="第一个vue案例"><a href="#第一个vue案例" class="headerlink" title="第一个vue案例"></a>第一个vue案例</h2><h3 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h3><h4 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">兼容性提示： Vue.js 不支持 IE8 及其以下版本。</span><br></pre></td></tr></table></figure><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 开发版本: 包含完整的警告和调试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 生产版本: 删除了警告</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><ol><li>使用本地的vue.js<blockquote><p>存在的缺点</p><blockquote><p>需要提前进行下载<br>使用的时候受本地路径的限制,如果路径引入错误,会报错</p></blockquote></blockquote></li><li>也可以使用cdn加速服务,在有网络的情况下,直接引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><blockquote><p>存在的缺点</p><blockquote><p>没有网络的时候没法使用</p><ol start="3"><li>还有另外一种使用的方式,就是在项目模板中使用,关于这一部分内容,稍后进行讲解</li></ol></blockquote></blockquote></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue入门之Helloworld&lt;/title&gt;</span><br><span class="line">        &lt;!--第1步：引入Vue库--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!--第2步:  通过id属性设置视图的入口--&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--Vue的模板的绑定数据的方法， 类似于很多其他前端的模板，可以用两对花括号进行绑定Vue中的数据对象的属性 --&gt;</span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            //第3步：创建模型数据</span><br><span class="line">            var modelData = &#123;</span><br><span class="line">                message: &apos;Hello Vue!&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //第4步: 创建vue对象</span><br><span class="line">            var app = new Vue(&#123; // 创建Vue对象。Vue的核心对象。</span><br><span class="line">                el: &apos;#app&apos;, // el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span><br><span class="line">                data: modelData// data: 是Vue对象中绑定的数据模型</span><br><span class="line">                </span><br><span class="line">            &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分-vue入门-简介&quot;&gt;&lt;a href=&quot;#第一部分-vue入门-简介&quot; class=&quot;headerlink&quot; title=&quot;第一部分: vue入门/简介&quot;&gt;&lt;/a&gt;第一部分: vue入门/简介&lt;/h1&gt;&lt;p&gt;嘻嘻嘻&lt;/p&gt;
&lt;h2 id=&quot;vue的引入&quot;&gt;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="http://yoursite.com/2018/05/10/%E6%9D%82%E9%A1%B9/99-2-websocket/"/>
    <id>http://yoursite.com/2018/05/10/杂项/99-2-websocket/</id>
    <published>2018-05-10T00:36:28.979Z</published>
    <updated>2018-05-10T01:06:30.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p><a href="https://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/" target="_blank" rel="noopener">详情查看链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerwork
      
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>跨域问题解决方案</title>
    <link href="http://yoursite.com/2018/05/10/%E6%9D%82%E9%A1%B9/99-1-cros-proxy-jsonp/"/>
    <id>http://yoursite.com/2018/05/10/杂项/99-1-cros-proxy-jsonp/</id>
    <published>2018-05-10T00:36:28.970Z</published>
    <updated>2018-05-10T01:06:08.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域问题解决方案"><a href="#跨域问题解决方案" class="headerlink" title="跨域问题解决方案"></a>跨域问题解决方案</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>1.在项目的根目录下创建一个proxy.config.json文件</p><blockquote><p>内容如下: </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;**&quot;:&#123;</span><br><span class="line">    &quot;target&quot;:&quot;http://127.0.0.1:8800&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改package.json文件</p><blockquote><p>更改启动项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --proxy-config proxy.config.json</span><br></pre></td></tr></table></figure><p>3.配置根模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;HttpModule&#125; from &quot;@angular/http&quot;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">    HttpModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4.使用http</p><blockquote><p>三步操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 导入http</span><br><span class="line">    import &#123;Http&#125; from &quot;@angular/http&quot;</span><br><span class="line"></span><br><span class="line">2. 注入到构造函数        </span><br><span class="line">    constructor(public http:Http) &#123;&#125;</span><br><span class="line"></span><br><span class="line">3. 调用方法</span><br><span class="line">    ngOnInit()&#123;</span><br><span class="line">        var url = &quot;/test&quot;</span><br><span class="line">        this.http.get(url)</span><br><span class="line">        .subscribe((res)=&gt;&#123;</span><br><span class="line">            console.log(res.json())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>5.使用express框架,配置node服务,提供接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">let dataSet = [</span><br><span class="line">    &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;pengsuo&quot;,&quot;age&quot;:20&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;2&quot;,&quot;name&quot;:&quot;chenqian&quot;,&quot;age&quot;:34&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;mahao&quot;,&quot;age&quot;:30&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;4&quot;,&quot;name&quot;:&quot;chenbo&quot;,&quot;age&quot;:50&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">app.get(&quot;/test&quot;,(req,res)=&gt;&#123;</span><br><span class="line">    res.json(dataSet);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8800)</span><br><span class="line"></span><br><span class="line">console.log(&quot;http://127.0.0.1:8800&quot;)</span><br></pre></td></tr></table></figure><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><h3 id="angular的jsonp模块"><a href="#angular的jsonp模块" class="headerlink" title="angular的jsonp模块"></a>angular的jsonp模块</h3><p>1.配置根模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123;JsonpModule&#125; from &quot;@angular/http&quot;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">    JsonpModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.使用jsonp</p><blockquote><p>三步操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 导入jsonp</span><br><span class="line">    import &#123;Jsonp&#125; from &quot;@angular/http&quot;</span><br><span class="line"></span><br><span class="line">2. 注入到构造函数        </span><br><span class="line">    constructor(public jsonp:Jsonp) &#123;&#125;</span><br><span class="line"></span><br><span class="line">3. 调用方法</span><br><span class="line">    ngOnInit()&#123;</span><br><span class="line">        var url = &quot;http://127.0.0.1:8800/test?callback=JSONP_CALLBACK&quot;</span><br><span class="line">        this.jsonp.get(url)</span><br><span class="line">        .subscribe((res)=&gt;&#123;</span><br><span class="line">            console.log(res.json())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.服务器端代码书写</p><blockquote><p>基于nodejs的express框架</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">let dataSet = [</span><br><span class="line">    &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;pengsuo&quot;,&quot;age&quot;:20&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;2&quot;,&quot;name&quot;:&quot;chenqian&quot;,&quot;age&quot;:34&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;mahao&quot;,&quot;age&quot;:30&#125;,</span><br><span class="line">    &#123;&quot;id&quot;:&quot;4&quot;,&quot;name&quot;:&quot;chenbo&quot;,&quot;age&quot;:50&#125;</span><br><span class="line">];</span><br><span class="line">app.get(&quot;/test&quot;,(req,res)=&gt;&#123;</span><br><span class="line">    res.jsonp(dataSet);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(8800)</span><br><span class="line"></span><br><span class="line">console.log(&quot;http://127.0.0.1:8800&quot;)</span><br></pre></td></tr></table></figure><h3 id="jquery的ajax跨域"><a href="#jquery的ajax跨域" class="headerlink" title="jquery的ajax跨域"></a>jquery的ajax跨域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;get&quot;,</span><br><span class="line">    url: &quot;http://127.0.0.1:8800/test?callback=?&quot;,</span><br><span class="line">    async: true,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    error(error)&#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">    &#125;,</span><br><span class="line">    //jsonpCallback: &quot;fn&quot;,</span><br><span class="line">    dataType: &quot;jsonp&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="cros"><a href="#cros" class="headerlink" title="cros"></a>cros</h2><blockquote><p>服务器端设置跨域资源共享</p></blockquote><p><strong><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">详情参考此链接</a></strong></p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><blockquote><p>基于express框架</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.all(&apos;*&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;);</span><br><span class="line"></span><br><span class="line">    res.setHeader(&apos;Content-Type&apos;, &apos;application/json;charset=utf-8&apos;);</span><br><span class="line">    </span><br><span class="line">    next()</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">header(&quot;Access-Control-Allow-Origin: *&quot;);</span><br></pre></td></tr></table></figure><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跨域问题解决方案&quot;&gt;&lt;a href=&quot;#跨域问题解决方案&quot; class=&quot;headerlink&quot; title=&quot;跨域问题解决方案&quot;&gt;&lt;/a&gt;跨域问题解决方案&lt;/h1&gt;&lt;h2 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="http://yoursite.com/2018/05/10/%E6%9D%82%E9%A1%B9/88-1-flex+rem/"/>
    <id>http://yoursite.com/2018/05/10/杂项/88-1-flex+rem/</id>
    <published>2018-05-10T00:36:28.962Z</published>
    <updated>2018-05-10T01:06:05.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h1><blockquote><p>使用淘宝团队开发的适配方案  flexible</p><blockquote><p>也就是手淘的H5多终端适配方案</p></blockquote></blockquote><p><strong><a href="https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html" target="_blank" rel="noopener">flexible参考链接</a></strong></p><h2 id="使用的方式"><a href="#使用的方式" class="headerlink" title="使用的方式"></a>使用的方式</h2><h3 id="1-开启移动端布局"><a href="#1-开启移动端布局" class="headerlink" title="1.开启移动端布局"></a>1.开启移动端布局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 设置meta</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="2-引用多终端适配方案"><a href="#2-引用多终端适配方案" class="headerlink" title="2.引用多终端适配方案"></a>2.引用多终端适配方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 多终端适配</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-设置像素转化"><a href="#3-设置像素转化" class="headerlink" title="3.设置像素转化"></a>3.设置像素转化</h3><blockquote><p>将设计稿上的px  像素单位转化为  css 的 rem  布局方案</p></blockquote><blockquote><p>也就是px和rem的转化比例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">设计稿: 750 -----&gt;   转化比例  75</span><br><span class="line"></span><br><span class="line">设计稿: 640 -----&gt;   转化比例  64    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在hbuild中内置px转rem工具,如果找不到以下选项,建议更新hbuild版本</span><br><span class="line"></span><br><span class="line">    菜单栏----&gt; 工具 ----&gt;  选项  ----&gt;  Hbuild ----&gt; 代码助手设置  ----&gt; 启动px转rem自动提示</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;移动端布局&quot;&gt;&lt;a href=&quot;#移动端布局&quot; class=&quot;headerlink&quot; title=&quot;移动端布局&quot;&gt;&lt;/a&gt;移动端布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用淘宝团队开发的适配方案  flexible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也
      
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>04-微信小程序组件</title>
    <link href="http://yoursite.com/2018/05/10/weChat/04-%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/05/10/weChat/04-组件/</id>
    <published>2018-05-10T00:36:28.951Z</published>
    <updated>2018-05-10T01:07:58.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序组件"><a href="#微信小程序组件" class="headerlink" title="微信小程序组件"></a>微信小程序组件</h1><blockquote><p>框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序组件&quot;&gt;&lt;a href=&quot;#微信小程序组件&quot; class=&quot;headerlink&quot; title=&quot;微信小程序组件&quot;&gt;&lt;/a&gt;微信小程序组件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开
      
    
    </summary>
    
      <category term="weChat" scheme="http://yoursite.com/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title>03-小程序开发实战</title>
    <link href="http://yoursite.com/2018/05/10/weChat/03-%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/05/10/weChat/03-豆瓣电影的基本实现/</id>
    <published>2018-05-10T00:36:28.942Z</published>
    <updated>2018-05-10T01:08:13.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序开发实战–豆瓣电影"><a href="#小程序开发实战–豆瓣电影" class="headerlink" title="小程序开发实战–豆瓣电影"></a>小程序开发实战–豆瓣电影</h1><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><blockquote><p>在项目的app.json文件中完成配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微信小程序访问豆瓣电影api400错误解决方法"><a href="#微信小程序访问豆瓣电影api400错误解决方法" class="headerlink" title="微信小程序访问豆瓣电影api400错误解决方法"></a>微信小程序访问豆瓣电影api400错误解决方法</h2><p><img src="img/001.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小程序开发实战–豆瓣电影&quot;&gt;&lt;a href=&quot;#小程序开发实战–豆瓣电影&quot; class=&quot;headerlink&quot; title=&quot;小程序开发实战–豆瓣电影&quot;&gt;&lt;/a&gt;小程序开发实战–豆瓣电影&lt;/h1&gt;&lt;h2 id=&quot;项目配置&quot;&gt;&lt;a href=&quot;#项目配置&quot; cla
      
    
    </summary>
    
      <category term="weChat" scheme="http://yoursite.com/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title>02-基础知识点</title>
    <link href="http://yoursite.com/2018/05/10/weChat/02-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/05/10/weChat/02-基本知识点/</id>
    <published>2018-05-10T00:36:28.932Z</published>
    <updated>2018-05-10T01:08:08.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h1><h2 id="数据展示语法"><a href="#数据展示语法" class="headerlink" title="数据展示语法"></a>数据展示语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;msg&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;arr&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><blockquote><p>arr: 渲染的数据</p><p>item: 当前循环的内容</p></blockquote><p><strong>索引值添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;items&#125;&#125;&quot; wx:for-index=&quot;index&quot; wx:for-item=&quot;item&quot;&gt;</span><br><span class="line">&#123;&#123;index+1&#125;&#125;、&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="数据的添加和修改"><a href="#数据的添加和修改" class="headerlink" title="数据的添加和修改"></a>数据的添加和修改</h2><h3 id="数据的添加"><a href="#数据的添加" class="headerlink" title="数据的添加"></a>数据的添加</h3><blockquote><p>和vue的数据模型没有太大差别</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  message: &quot;hello world&quot;,</span><br><span class="line">  arr:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据的修改"><a href="#数据的修改" class="headerlink" title="数据的修改"></a>数据的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在生命周期钩子中修改数据</span><br><span class="line">onLoad() &#123;</span><br><span class="line">   //在这里修改页面数据 ---- 不能使用this.data.message,小程序捕获不到</span><br><span class="line">   this.setData(&#123;</span><br><span class="line">     message: Date.now()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="接口的调用"><a href="#接口的调用" class="headerlink" title="接口的调用"></a>接口的调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  //不能使用ajax的方式调取数据(BOM),应该使用微信官方提供的api</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: &apos;https://api.douban.com/v2/movie/in_theaters&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      &apos;count&apos;:5</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      // &apos;content-type&apos;: &apos;application/json&apos; // 默认值</span><br><span class="line">      &quot;Content-Type&quot;: &quot;json&quot;      </span><br><span class="line">    &#125;,</span><br><span class="line">    success: (res) =&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      // this.setData(&#123;</span><br><span class="line">      //   arr :  res.data.playlist.tracks</span><br><span class="line">      // &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; msg &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;button bindtap=&quot;clickMe&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础知识点&quot;&gt;&lt;a href=&quot;#基础知识点&quot; class=&quot;headerlink&quot; title=&quot;基础知识点&quot;&gt;&lt;/a&gt;基础知识点&lt;/h1&gt;&lt;h2 id=&quot;数据展示语法&quot;&gt;&lt;a href=&quot;#数据展示语法&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
      <category term="weChat" scheme="http://yoursite.com/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title>01-微信小程序入门</title>
    <link href="http://yoursite.com/2018/05/10/weChat/01-%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/05/10/weChat/01-入门/</id>
    <published>2018-05-10T00:36:28.924Z</published>
    <updated>2018-05-10T01:08:03.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序入门"><a href="#微信小程序入门" class="headerlink" title="微信小程序入门"></a>微信小程序入门</h1><p>萨芬给谁发的规范和</p><h2 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 需要会html--css--js,但不是必备</span><br><span class="line">2. 更好的话react  vue</span><br></pre></td></tr></table></figure><h2 id="项目目录结构解析"><a href="#项目目录结构解析" class="headerlink" title="项目目录结构解析"></a>项目目录结构解析</h2><p><img src="img/01-mulu.png" alt=""></p><p><strong>详解</strong></p><p>1.app.js: 定义应用程序的主逻辑</p><blockquote><p>定义全部逻辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//使用App构造方法创建应用程序</span><br><span class="line">App(&#123;</span><br><span class="line"></span><br><span class="line">  //小程序启动之后.onLaunch方法会执行</span><br><span class="line">  onLaunch()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  //定义全局的fn方法----这个方法可以看成是共享的</span><br><span class="line">  fn()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.app.json : 应用程序全局配置</p><blockquote><p>包含页面配置项和系统配置项等内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.app.wxss</p><blockquote><p>配置全局的样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**app.wxss**/</span><br><span class="line">.container &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  padding: 200rpx 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.project.config.json</p><blockquote><p>项目配置,可以设置一些个性化的内容,可以快速进行项目的个性化设置</p></blockquote><h2 id="文件-页面"><a href="#文件-页面" class="headerlink" title="文件/页面"></a>文件/页面</h2><p><img src="img/02-config.png" alt=""></p><h3 id="页面结构解析"><a href="#页面结构解析" class="headerlink" title="页面结构解析"></a>页面结构解析</h3><blockquote><p>为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</p></blockquote><p>1.index.js : 定义页面的逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//获取应用程序的实例</span><br><span class="line">var app = getApp()</span><br><span class="line"></span><br><span class="line">//Page就是一个页面构造器,用于创建页面</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123; // 参与页面渲染的数据</span><br><span class="line">    logs: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    // 页面渲染后 执行</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.index.json</p><blockquote><p>文件配置项</p></blockquote><p>3.index.wxml</p><blockquote><p>页面内容,相当于html部分</p></blockquote><p>4.index.wxss</p><blockquote><p>页面样式,相当于css</p></blockquote><h2 id="小程序特色"><a href="#小程序特色" class="headerlink" title="小程序特色"></a>小程序特色</h2><blockquote><p>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。</p></blockquote><blockquote><p>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p></blockquote><p>1.响应的数据绑定,类似于angular和vue</p><p>2.组件化-提供丰富的组件</p><p>3.丰富的api,简化操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序入门&quot;&gt;&lt;a href=&quot;#微信小程序入门&quot; class=&quot;headerlink&quot; title=&quot;微信小程序入门&quot;&gt;&lt;/a&gt;微信小程序入门&lt;/h1&gt;&lt;p&gt;萨芬给谁发的规范和&lt;/p&gt;
&lt;h2 id=&quot;必备知识&quot;&gt;&lt;a href=&quot;#必备知识&quot; class=
      
    
    </summary>
    
      <category term="weChat" scheme="http://yoursite.com/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title>22-核心知识点</title>
    <link href="http://yoursite.com/2018/05/10/angular2/999-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/05/10/angular2/999-核心知识点/</id>
    <published>2018-05-10T00:36:05.077Z</published>
    <updated>2018-05-10T01:31:39.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h1><ol><li>组件</li><li>路由</li><li>数据请求</li><li>服务</li><li>模块</li></ol><h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><ol><li>组件通信</li><li>服务的使用</li><li>路由守卫,异步模块加载……</li><li>依赖注入</li><li>rxjs</li></ol><p><strong>具体内容详见图谱</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;核心知识点&quot;&gt;&lt;a href=&quot;#核心知识点&quot; class=&quot;headerlink&quot; title=&quot;核心知识点&quot;&gt;&lt;/a&gt;核心知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;组件&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;数据请求&lt;/li&gt;
&lt;li&gt;服务&lt;/li&gt;
&lt;li&gt;模块
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>21-angular优质学习资源</title>
    <link href="http://yoursite.com/2018/05/10/angular2/300-3-%E4%BC%98%E8%B4%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2018/05/10/angular2/300-3-优质学习资源收集/</id>
    <published>2018-05-10T00:36:05.073Z</published>
    <updated>2018-05-10T01:31:31.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular优质学习资源"><a href="#angular优质学习资源" class="headerlink" title="angular优质学习资源"></a>angular优质学习资源</h1><h2 id="文档博客书籍类"><a href="#文档博客书籍类" class="headerlink" title="文档博客书籍类"></a>文档博客书籍类</h2><p>官方网站： <a href="https://angular.io" target="_blank" rel="noopener">https://angular.io</a></p><p>angular官方源码库 <a href="https://github.com/angular/angular" target="_blank" rel="noopener">https://github.com/angular/angular</a></p><p>中文站点： <a href="https://angular.cn" target="_blank" rel="noopener">https://angular.cn</a></p><p>Victor的blog（Victor是Angular路由模块的作者）： <a href="https://vsavkin.com/@vsavkin" target="_blank" rel="noopener">https://vsavkin.com/@vsavkin</a></p><p>Todd Motto的Blog： <a href="https://toddmotto.com/" target="_blank" rel="noopener">https://toddmotto.com/</a></p><p>ThoughtRAM上的Blog频道： <a href="https://blog.thoughtram.io/categories/angular-2/" target="_blank" rel="noopener">https://blog.thoughtram.io/categories/angular-2/</a></p><p>Angular University： <a href="http://blog.angular-university.io/" target="_blank" rel="noopener">http://blog.angular-university.io/</a></p><p>Deborah’s Developer MindScape： <a href="http://blogs.msmvps.com/deborahk/" target="_blank" rel="noopener">http://blogs.msmvps.com/deborahk/</a></p><p>Jason Watmore’s Blog： <a href="http://jasonwatmore.com/" target="_blank" rel="noopener">http://jasonwatmore.com/</a></p><p>RxJS官方网站： <a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io/</a></p><p>RxJS中文版文档（这是我看过的最好的关于RxJS的中文文档，注意，没有之一！向译者致敬！）： <a href="https://www.gitbook.com/book/buctwbzs/rxjs/details" target="_blank" rel="noopener">https://www.gitbook.com/book/buctwbzs/rxjs/details</a></p><p>一本开源的Angular2书籍：<a href="https://zhangchen915.gitbooks.io/angular2-training/" target="_blank" rel="noopener">https://zhangchen915.gitbooks.io/angular2-training/</a></p><h2 id="开源项目类"><a href="#开源项目类" class="headerlink" title="开源项目类"></a>开源项目类</h2><p>Angular Angury项目： <a href="https://augury.angular.io/" target="_blank" rel="noopener">https://augury.angular.io/</a></p><p>Angular Team在github上的地址： <a href="https://github.com/angular" target="_blank" rel="noopener">https://github.com/angular</a></p><p>ng2-bootstrap： <a href="https://ng-bootstrap.github.io/#/home" target="_blank" rel="noopener">https://ng-bootstrap.github.io/#/home</a></p><p>NGPrime： <a href="http://www.primefaces.org/primeng/#/" target="_blank" rel="noopener">http://www.primefaces.org/primeng/#/</a></p><p>Angular-Material2： <a href="https://github.com/angular/material2" target="_blank" rel="noopener">https://github.com/angular/material2</a></p><p>KendoUI：<a href="http://www.telerik.com/blogs/what-to-expect-in-2016-for-kendo-ui-with-angular-2-and-more" target="_blank" rel="noopener">http://www.telerik.com/blogs/what-to-expect-in-2016-for-kendo-ui-with-angular-2-and-more</a></p><p>ionic： <a href="https://ionic.io/" target="_blank" rel="noopener">https://ionic.io/</a></p><p>一个非常好的管理后台项目（那些拿Angular来做管理系统的朋友，请务必看这个项目，它是非常好的后台管理界面模板，而且是开源免费的）： <a href="https://github.com/akveo/ng2-admin" target="_blank" rel="noopener">https://github.com/akveo/ng2-admin</a></p><p>一个很好的Blog项目： <a href="https://github.com/WittBulter/sails-blog-frontend" target="_blank" rel="noopener">https://github.com/WittBulter/sails-blog-frontend</a></p><p>RxJS聊天室： <a href="https://github.com/ng-book/angular2-rxjs-chat" target="_blank" rel="noopener">https://github.com/ng-book/angular2-rxjs-chat</a></p><p>教学用的项目NiceFish： <a href="http://git.oschina.net/mumu-osc/NiceFish" target="_blank" rel="noopener">http://git.oschina.net/mumu-osc/NiceFish</a></p><p>GitHub上搜索Angular相关资源的更好方法：<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=topic%3Aangular&amp;type=Repositories&amp;ref=searchresults" target="_blank" rel="noopener">https://github.com/search?utf8=%E2%9C%93&amp;q=topic%3Aangular&amp;type=Repositories&amp;ref=searchresults</a></p><p>一组Angular2应用收集：<a href="http://angularexpo.com/" target="_blank" rel="noopener">http://angularexpo.com/</a></p><p>一组UI库：<a href="https://teradata.github.io/covalent/#/" target="_blank" rel="noopener">https://teradata.github.io/covalent/#/</a></p><p>一个非常好的入门项目： <a href="https://github.com/AngularClass/angular2-webpack-starter" target="_blank" rel="noopener">https://github.com/AngularClass/angular2-webpack-starter</a></p><p>基于Angular 1.x+Bootstrap的后台管理模板项目：<a href="https://github.com/akveo/blur-admin" target="_blank" rel="noopener">https://github.com/akveo/blur-admin</a></p><p>NiceFish（美人鱼）是一个系列教学项目 <a href="https://gitee.com/mumu-osc/NiceFish" target="_blank" rel="noopener">https://gitee.com/mumu-osc/NiceFish</a><br>NiceFish-openChina <a href="http://git.oschina.net/mumu-osc/NiceFish" target="_blank" rel="noopener">http://git.oschina.net/mumu-osc/NiceFish</a></p><p>webpack-angular-aot <a href="https://github.com/kunl/Angular-webpack-AOT" target="_blank" rel="noopener">https://github.com/kunl/Angular-webpack-AOT</a></p><p>codebe/钟钟,一个整合各种插件的项目 <a href="https://gitee.com/zt_zhong/CodeBe" target="_blank" rel="noopener">https://gitee.com/zt_zhong/CodeBe</a></p><h2 id="视频类"><a href="#视频类" class="headerlink" title="视频类"></a>视频类</h2><p>一个非常好的RxJS教学视频（想快速学会RxJS的朋友请务必仔细看完这个视频）： <a href="https://coryrylan.com/blog/introduction-to-rxjs-observables-and-angular" target="_blank" rel="noopener">https://coryrylan.com/blog/introduction-to-rxjs-observables-and-angular</a></p><p>关于RxJS的更多视频（RxJS官方出的）： <a href="https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises" target="_blank" rel="noopener">https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises</a></p><p>油管上的AngularConnect频道： <a href="https://www.youtube.com/channel/UCzrskTiT_ObAk3xBkVxMz5g" target="_blank" rel="noopener">https://www.youtube.com/channel/UCzrskTiT_ObAk3xBkVxMz5g</a></p><p>油管上的ng-conf频道： <a href="https://www.youtube.com/user/ngconfvideos" target="_blank" rel="noopener">https://www.youtube.com/user/ngconfvideos</a></p><p>angular1大漠视频教程 <a href="http://www.imooc.com/learn/156" target="_blank" rel="noopener">http://www.imooc.com/learn/156</a></p><p>优酷频道 <a href="http://i.youku.com/i/UMzI1MjQ0MDgw/videos?spm=a2hzp.8253876.0.0" target="_blank" rel="noopener">http://i.youku.com/i/UMzI1MjQ0MDgw/videos?spm=a2hzp.8253876.0.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angular优质学习资源&quot;&gt;&lt;a href=&quot;#angular优质学习资源&quot; class=&quot;headerlink&quot; title=&quot;angular优质学习资源&quot;&gt;&lt;/a&gt;angular优质学习资源&lt;/h1&gt;&lt;h2 id=&quot;文档博客书籍类&quot;&gt;&lt;a href=&quot;#文档
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>20-ui库</title>
    <link href="http://yoursite.com/2018/05/10/angular2/300-2-angular-ui%E5%BA%93/"/>
    <id>http://yoursite.com/2018/05/10/angular2/300-2-angular-ui库/</id>
    <published>2018-05-10T00:36:05.070Z</published>
    <updated>2018-05-10T01:31:23.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular-ui库"><a href="#angular-ui库" class="headerlink" title="angular ui库"></a>angular ui库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Angular-Material,Prime-NG,ng2-bootstrap,ionic</span><br></pre></td></tr></table></figure><h2 id="ng2-bootstrap"><a href="#ng2-bootstrap" class="headerlink" title="ng2-bootstrap"></a>ng2-bootstrap</h2><p><a href="https://github.com/valor-software/ngx-bootstrap" target="_blank" rel="noopener">官方文档链接地址</a></p><h2 id="PrimeNG"><a href="#PrimeNG" class="headerlink" title="PrimeNG"></a>PrimeNG</h2><p><a href="https://www.primefaces.org/primeng/#/" target="_blank" rel="noopener">官方文档链接地址</a></p><h2 id="Angular-Material2"><a href="#Angular-Material2" class="headerlink" title="Angular-Material2"></a>Angular-Material2</h2><p><a href="https://github.com/angular/material2" target="_blank" rel="noopener">官方文档链接地址</a></p><h2 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h2><p><a href="https://ionicframework.com/" target="_blank" rel="noopener">官方文档链接地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angular-ui库&quot;&gt;&lt;a href=&quot;#angular-ui库&quot; class=&quot;headerlink&quot; title=&quot;angular ui库&quot;&gt;&lt;/a&gt;angular ui库&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>19-angular核心</title>
    <link href="http://yoursite.com/2018/05/10/angular2/300-1-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/05/10/angular2/300-1-核心概念/</id>
    <published>2018-05-10T00:36:05.067Z</published>
    <updated>2018-05-10T01:31:16.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular核心"><a href="#angular核心" class="headerlink" title="angular核心"></a>angular核心</h1><h2 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h2><blockquote><p>Component,Module,Route</p></blockquote><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><strong>组件树与视图变更检测机制</strong></p><h4 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h4><p><img src="img/ngroot.png" alt=""></p><h4 id="数据变更检测机制"><a href="#数据变更检测机制" class="headerlink" title="数据变更检测机制"></a>数据变更检测机制</h4><blockquote><p>在angular1中使用的是数据双向绑定,利用脏值检测机制,每次当有内容发生变化的时候,都会检测整个应用程序,造成很大的性能上的浪费</p></blockquote><p><strong>在angular2以及以上版本中,抛弃了脏值检测的方式,而改用单项数据流,当内容发生变化的时候,不会检测整个组件树,只会检测当前分支</strong></p><blockquote><p>参考链接</p></blockquote><p><a href="https://github.com/modern-javascript/angular2-data-flow" target="_blank" rel="noopener">github官网-angular数据流</a></p><p><img src="img/comtree.png" alt=""></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote><p>类似于组件化,可以实现项目的按功能模块进行划分</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 应用程序的功能(业务)模块划分,使用根模块进行统一管理</span><br><span class="line"></span><br><span class="line">2. 模块内部可以包含组件,指令,管道,路由,服务......</span><br><span class="line"></span><br><span class="line">3. 配合路由操作可以实现按需加载   ----- 类似于vue的组件懒加载</span><br></pre></td></tr></table></figure><blockquote><p>在angular应用程序中,只有ngModule模块装饰器来定义一个模块,这样做的意义在哪?</p></blockquote><p><strong>在开发过程中,我们需要根据业务模块在应用程序开发的过程中,进行模块化的划分,但是在在项目打包的时候,我们需要在文件的体积和请求的次数之间进行一个权衡</strong></p><h4 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h4><blockquote><p>模块划分当然是越详细越好,有利于项目的二次开发和代码的维护</p></blockquote><p><img src="img/ngbundle.png" alt=""></p><h4 id="请求次数"><a href="#请求次数" class="headerlink" title="请求次数"></a>请求次数</h4><blockquote><p>每个模块(打包后的js文件)都会发送一次http请求</p><blockquote><p>我们可以在控制台的network查看具体的请求</p></blockquote></blockquote><h4 id="模块划分和请求次数的权衡"><a href="#模块划分和请求次数的权衡" class="headerlink" title="模块划分和请求次数的权衡"></a>模块划分和请求次数的权衡</h4><blockquote><p>需要根据实际需求在两者之间找到一个平衡点</p></blockquote><p><img src="img/balance.png" alt=""></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><blockquote><p>我们可以使用路由操作配合模块化实现异步模块加载</p></blockquote><p><strong>1.静态路由</strong></p><p><img src="img/staticrouter.png" alt=""></p><p><strong>2.异步路由</strong><br><img src="img/asyncrouter.png" alt=""></p><h2 id="Angular核心架构思想"><a href="#Angular核心架构思想" class="headerlink" title="Angular核心架构思想"></a>Angular核心架构思想</h2><h3 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.每一个HTML标签上面都会有一个注射器实例</span><br><span class="line"></span><br><span class="line">2.注射是通过constructor进行的</span><br><span class="line"></span><br><span class="line">3.@Injectable是@Component的子类</span><br></pre></td></tr></table></figure><p><strong>依赖注入的具体实现可以参考一下链接</strong></p><p><a href="https://vsavkin.com/dependency-injection-in-angular-1-and-angular-2-d69589979c18#.3ptlx48zf" target="_blank" rel="noopener">依赖注入的实现机制1</a><br><a href="https://my.oschina.net/mumu/blog/775695" target="_blank" rel="noopener">依赖注入的实现机制1</a></p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p><strong>数据绑定的具体实现可以参考一下链接</strong></p><p><a href="http://pascalprecht.github.io/slides/angular-2-change-detection-explained/#/" target="_blank" rel="noopener">数据绑定的实现1</a><br><a href="http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html" target="_blank" rel="noopener">数据绑定的实现2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angular核心&quot;&gt;&lt;a href=&quot;#angular核心&quot; class=&quot;headerlink&quot; title=&quot;angular核心&quot;&gt;&lt;/a&gt;angular核心&lt;/h1&gt;&lt;h2 id=&quot;三大核心概念&quot;&gt;&lt;a href=&quot;#三大核心概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>18-自动化测试</title>
    <link href="http://yoursite.com/2018/05/10/angular2/18-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/05/10/angular2/18-自动化测试/</id>
    <published>2018-05-10T00:36:05.061Z</published>
    <updated>2018-05-10T01:31:04.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>mooc网视频教程  <a href="http://www.imooc.com/video/2638" target="_blank" rel="noopener">http://www.imooc.com/video/2638</a></p><p><strong>karma 和 jasmine</strong></p><blockquote><p>Karma+Jasmine可以用于任意前端框架</p></blockquote><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>中文视频和详细的语法解释：<a href="http://www.imooc.com/video/4361" target="_blank" rel="noopener">http://www.imooc.com/video/4361</a></p><p>Protractor是专门针对Angular设计的 <a href="http://www.protractortest.org/#/" target="_blank" rel="noopener">http://www.protractortest.org/#/</a></p><h2 id="前端测试神器"><a href="#前端测试神器" class="headerlink" title="前端测试神器"></a>前端测试神器</h2><p>F2etest是一个面向前端、测试、产品等岗位的多浏览器兼容性测试整体解决方案<br><a href="https://github.com/alibaba/f2etest" target="_blank" rel="noopener">https://github.com/alibaba/f2etest</a></p><p><a href="http://f2etest.com/" target="_blank" rel="noopener">http://f2etest.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动化测试&quot;&gt;&lt;a href=&quot;#自动化测试&quot; class=&quot;headerlink&quot; title=&quot;自动化测试&quot;&gt;&lt;/a&gt;自动化测试&lt;/h1&gt;&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>17-i18n</title>
    <link href="http://yoursite.com/2018/05/10/angular2/17-i18n-%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>http://yoursite.com/2018/05/10/angular2/17-i18n-国际化/</id>
    <published>2018-05-10T00:36:05.058Z</published>
    <updated>2018-05-10T01:30:55.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h1><blockquote><p>国际化,让我们的应用支持多种语言</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;i18n&quot;&gt;&lt;a href=&quot;#i18n&quot; class=&quot;headerlink&quot; title=&quot;i18n&quot;&gt;&lt;/a&gt;i18n&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;国际化,让我们的应用支持多种语言&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>16-自定义指令</title>
    <link href="http://yoursite.com/2018/05/10/angular2/16-%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/10/angular2/16-指令/</id>
    <published>2018-05-10T00:36:05.055Z</published>
    <updated>2018-05-10T01:30:46.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义指令-—-陌陌"><a href="#自定义指令-—-陌陌" class="headerlink" title="自定义指令 —- 陌陌"></a>自定义指令 —- 陌陌</h2><p><a href="https://www.w3cschool.cn/vntgu/vntgu-p67s25w3.html" target="_blank" rel="noopener">详情参考此链接</a></p><p>在angular中指令有两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性型指令：比如   ngClass ngStyle   等 修改宿主元素的样式或行为等</span><br><span class="line"></span><br><span class="line">结构型指令，比如   *ngIf，*ngFor   修改DOM结构。</span><br></pre></td></tr></table></figure><h3 id="自定义指令的实现"><a href="#自定义指令的实现" class="headerlink" title="自定义指令的实现"></a>自定义指令的实现</h3><p><strong>创建指令 我们创建一个test指令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g directive directive/test</span><br></pre></td></tr></table></figure><p><strong>对于指令，会生成两个文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.directive.ts  </span><br><span class="line">test.directive.spec.ts</span><br></pre></td></tr></table></figure><p><strong>文件模板</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &apos;[appTest]&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class TestDirective &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义属性型指令"><a href="#自定义属性型指令" class="headerlink" title="自定义属性型指令"></a>自定义属性型指令</h4><blockquote><p>自定义属性型指令,完成类样式的添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; Directive, ElementRef, AfterViewInit, Renderer2 &#125; from &apos;@angular/core&apos;;   </span><br><span class="line"></span><br><span class="line">@Directive(&#123;   </span><br><span class="line">  selector: &apos;[appButton]&apos;  </span><br><span class="line">&#125;)  </span><br><span class="line">export class ButtonDirective implements AfterViewInit&#123;    </span><br><span class="line">  constructor(private er: ElementRef, private renderer2: Renderer2) &#123; &#125;    </span><br><span class="line">  </span><br><span class="line">  ngAfterViewInit() &#123;   </span><br><span class="line">    this.renderer2.addClass(this.er.nativeElement, &apos;btn&apos;);   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;button appButton&gt;指令按钮/button&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义结构型指令"><a href="#自定义结构型指令" class="headerlink" title="自定义结构型指令"></a>自定义结构型指令</h4><blockquote><p>自定义一个实现*ngIf功能的指令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; Directive, Input, ViewContainerRef, TemplateRef &#125; from &apos;@angular/core&apos;;   </span><br><span class="line"></span><br><span class="line">@Directive(&#123;   </span><br><span class="line">  selector: &apos;[appMyIf]&apos;  </span><br><span class="line">&#125;)  </span><br><span class="line">export class MyIfDirective &#123;    </span><br><span class="line">  constructor(private templateRef: TemplateRef&lt;any&gt;,   </span><br><span class="line">      private viewContainer: ViewContainerRef) &#123; &#125;    </span><br><span class="line">   </span><br><span class="line">  @Input() set appMyIf(condition: boolean) &#123;   </span><br><span class="line">    if (condition) &#123;   </span><br><span class="line">      this.viewContainer.createEmbeddedView(this.templateRef);   </span><br><span class="line">    &#125; else &#123;   </span><br><span class="line">      this.viewContainer.clear();   </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *appMyIf=&quot;isMyShow&quot;&gt;自定义结构型指令appMyIf&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自定义指令-—-陌陌&quot;&gt;&lt;a href=&quot;#自定义指令-—-陌陌&quot; class=&quot;headerlink&quot; title=&quot;自定义指令 —- 陌陌&quot;&gt;&lt;/a&gt;自定义指令 —- 陌陌&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/vn
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>15-动画</title>
    <link href="http://yoursite.com/2018/05/10/angular2/15-%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2018/05/10/angular2/15-动画/</id>
    <published>2018-05-10T00:36:05.052Z</published>
    <updated>2018-05-10T01:30:39.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="动画模块安装"><a href="#动画模块安装" class="headerlink" title="动画模块安装"></a>动画模块安装</h3><blockquote><p>Angular4后动画模块分离出来了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install @angular/animations --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;h3 id=&quot;动画模块安装&quot;&gt;&lt;a href=&quot;#动画模块安装&quot; class=&quot;headerlink&quot; title=&quot;动画模块安装&quot;&gt;&lt;/a&gt;动
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>14-表单处理</title>
    <link href="http://yoursite.com/2018/05/10/angular2/14-%E8%A1%A8%E5%8D%95/"/>
    <id>http://yoursite.com/2018/05/10/angular2/14-表单/</id>
    <published>2018-05-10T00:36:05.037Z</published>
    <updated>2018-05-10T01:30:31.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><h3 id="以前学过的表单"><a href="#以前学过的表单" class="headerlink" title="以前学过的表单"></a>以前学过的表单</h3><p><strong>1.基本的html表单</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;用户名: &lt;input type=&quot;text&quot;/&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;确认密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>2.html5表单</strong></p><blockquote><p>在原先表单的基础上,添加了一些简单的验证,并添加了一些新的输入类型和表单元素</p></blockquote><p>新增的表单输入类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line">date</span><br><span class="line">datetime</span><br><span class="line">datetime-local</span><br><span class="line">email</span><br><span class="line">month</span><br><span class="line">number</span><br><span class="line">range</span><br><span class="line">search</span><br><span class="line">tel</span><br><span class="line">time</span><br><span class="line">url</span><br><span class="line">week</span><br></pre></td></tr></table></figure><p>新增的表单元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;datalist&gt;</span><br><span class="line">&lt;keygen&gt;</span><br><span class="line">&lt;output&gt;</span><br></pre></td></tr></table></figure><p>新增的输入类型的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">autocomplete</span><br><span class="line">autofocus</span><br><span class="line">action</span><br><span class="line">enctype</span><br><span class="line">method</span><br><span class="line">novalidate</span><br><span class="line">target</span><br><span class="line">height and width</span><br><span class="line">     height 和 width 属性只适用于 image 类型的&lt;input&gt; 标签。</span><br><span class="line">list</span><br><span class="line">min and max</span><br><span class="line">multiple</span><br><span class="line">pattern (regexp)</span><br><span class="line">placeholder</span><br><span class="line">required</span><br><span class="line">step</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;用户名: &lt;input type=&quot;text&quot; required=&quot;required&quot;/&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;确认密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="在ng2Pro中的表单"><a href="#在ng2Pro中的表单" class="headerlink" title="在ng2Pro中的表单"></a>在ng2Pro中的表单</h3><h4 id="模板式表单"><a href="#模板式表单" class="headerlink" title="模板式表单"></a>模板式表单</h4><blockquote><p>在ng2Pro中在原先表单的继承上,添加了一些新的功能,通过指令的形式实现</p><blockquote><p><strong>模板驱动表单中,所有的验证逻辑都写在表单里面</strong></p></blockquote></blockquote><p><strong>1.使用angular表单,需要先导入FormsModule</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.导入表单模块</span><br><span class="line">    import &#123; FormsModule &#125; from &apos;@angular/forms&apos;;</span><br><span class="line"></span><br><span class="line">2. 放到模块装饰器的imports中</span><br><span class="line">    imports:[FormsModule]</span><br></pre></td></tr></table></figure><p><strong>2.取消了submit的默认提交事件</strong></p><blockquote><p>只有在添加ngNoForm的时候才会还原表单默认的提交事件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/login&quot; method=&quot;post&quot; ngNoForm&gt;</span><br><span class="line">    &lt;div&gt;用户名: &lt;input type=&quot;text&quot; required=&quot;required&quot;/&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;确认密码: &lt;input type=&quot;password&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>3.表单的使用比原先学习的方式更加便捷</strong></p><p><img src="img/form1.png" alt=""></p><blockquote><p>在这里使用到了一些知识点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. #myForm表示一个本地变量,你可以理解为就像vue中虚拟dom那样,能够直接获取到当前的标签,但是只能在当前页面使用</span><br><span class="line"></span><br><span class="line">2. ngForm指令你可以理解为表示的整个表单,其value属性值表示的是表单里面标识有name属性的所有的value值</span><br><span class="line">    但是ngForm不能够直接去使用(隐式创建了一个FormGroup类的实例,包含了表单内部的value值)</span><br><span class="line"></span><br><span class="line">3. #myForm=&apos;ngForm&apos;就是一个简单的赋值操作,使用本地变量的形式得到--angular--表单内部的Value值</span><br><span class="line"></span><br><span class="line">4. 在表单内部,可以直接使用ngModel来获取到表单内部的value值来添加到设置的name属性上(后面会有效果的演示)</span><br><span class="line">    注意: 在这里不能使用[(ngModel)]</span><br><span class="line"></span><br><span class="line">5. ngSubmit事件 其实就是--angular--表单的提交事件,可以理解为重命名了一下</span><br></pre></td></tr></table></figure><blockquote><p>实现的效果如下</p></blockquote><p><img src="img/form2.png" alt=""></p><p><strong>3.ngModelGroup的使用</strong></p><blockquote><p>可以用于处理复杂的表单</p></blockquote><p><img src="img/form3.png" alt=""></p><p><img src="img/form4.png" alt=""></p><blockquote><p>结构层次上更加清晰</p></blockquote><p><img src="img/form5.png" alt=""></p><h4 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a>响应式表单</h4><blockquote><p>响应式表单的类名和指令如下图所示</p><blockquote><p><strong>将功能代码书写到代码中进行实现,简化页面的html结构</strong></p></blockquote></blockquote><p><img src="img/form0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FormControl   用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。</span><br><span class="line"></span><br><span class="line">FormGroup     用于 跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。     </span><br><span class="line">              组件中的顶级表单就是一个FormGroup。</span><br><span class="line"></span><br><span class="line">FormArray     用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。</span><br></pre></td></tr></table></figure><p><strong>1.FormControl</strong></p><p><img src="img/form6.png" alt=""></p><p><strong>2.FormGroup和FormArray</strong></p><blockquote><p>如果有多个FormControl，我们会希望把它们注册进一个父FormGroup中</p><blockquote></blockquote><p>同样,如果有多个FormController,我们可以把它放到一个FormArray中</p><blockquote><p>最终FormArray是要放到FormGroup中的</p></blockquote></blockquote><p><img src="img/form7.png" alt=""></p><h4 id="动态表单"><a href="#动态表单" class="headerlink" title="动态表单"></a>动态表单</h4><blockquote><p>根据数据去动态的生成表单</p><p><strong>表单几乎都是使用代码创建的</strong></p></blockquote><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><blockquote><p>Angular使用ngModel和name属性构建了一个FormControl，这也是我们可以通过<strong>NgForm.controls</strong>获取里面所有具有name属性的表单，它是一个数组。 而对于每一个FormControl，它都有以下验证属性： </p></blockquote><p><img src="img/form11.png" alt=""></p><p><strong>内置的一些校验规则</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">required</span><br><span class="line">requiredTrue</span><br><span class="line">minLength</span><br><span class="line">maxLength</span><br><span class="line">pattern</span><br><span class="line">nullValidator</span><br><span class="line">compose</span><br><span class="line">composeAsync</span><br></pre></td></tr></table></figure><h5 id="基本验证"><a href="#基本验证" class="headerlink" title="基本验证"></a>基本验证</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label&gt; </span><br><span class="line">     性别：   </span><br><span class="line">     &lt;select [(ngModel)]=&quot;sex&quot; name=&quot;sex&quot; required #sexInput=&quot;ngModel&quot;&gt;   </span><br><span class="line">       &lt;option value=&quot;man&quot;&gt;男&lt;/option&gt;   </span><br><span class="line">       &lt;option value=&quot;female&quot;&gt;女&lt;/option&gt;   </span><br><span class="line">     &lt;/select&gt;   </span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">    &lt;p *ngIf=&quot;sexInput.invalid&quot; class=&quot;error&quot;&gt;不合法&lt;/p&gt;</span><br><span class="line">    &lt;p *ngIf=&quot;sexInput.errors?.required&quot;&gt;失败显示的内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="能力提升"><a href="#能力提升" class="headerlink" title="能力提升"></a>能力提升</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;   </span><br><span class="line">  &lt;form #userForm=&quot;ngForm&quot; (ngSubmit)=&quot;onSubmit(userForm.form.valid)&quot; novalidate&gt;   </span><br><span class="line">    &lt;div&gt;   </span><br><span class="line">      &lt;label&gt;   </span><br><span class="line">        用户：&lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; required&gt;   </span><br><span class="line">      &lt;/label&gt;   </span><br><span class="line">      &lt;p *ngIf=&quot;userForm.controls[&apos;name&apos;]?.invalid&quot; class=&quot;error&quot;&gt;用户名必填&lt;/p&gt;   </span><br><span class="line">    &lt;/div&gt;   </span><br><span class="line">    &lt;div&gt;   </span><br><span class="line">      &lt;label&gt;   </span><br><span class="line">        电话：&lt;input type=&quot;text&quot; name=&quot;tel&quot; [(ngModel)]=&quot;tel&quot; pattern=&quot;1[3|5|8]\d&#123;9&#125;&quot; required&gt;   </span><br><span class="line">      &lt;/label&gt;   </span><br><span class="line">    &lt;/div&gt;   </span><br><span class="line">    &lt;div&gt;   </span><br><span class="line">      &lt;label&gt;   </span><br><span class="line">        性别：   </span><br><span class="line">        &lt;select [(ngModel)]=&quot;sex&quot; name=&quot;sex&quot; required&gt;   </span><br><span class="line">          &lt;option value=&quot;man&quot;&gt;男&lt;/option&gt;   </span><br><span class="line">          &lt;option value=&quot;female&quot;&gt;女&lt;/option&gt;   </span><br><span class="line">        &lt;/select&gt;   </span><br><span class="line">      &lt;/label&gt;   </span><br><span class="line">      &lt;p *ngIf=&quot;userForm.controls[&apos;sex&apos;]?.errors?.required&quot;&gt;&lt;/p&gt;   </span><br><span class="line">    &lt;/div&gt;   </span><br><span class="line">    &lt;button type=&quot;submit&quot;  [disabled]=&quot;!userForm.form.valid&quot;&gt;发布&lt;/button&gt;   </span><br><span class="line">  &lt;/form&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表单处理&quot;&gt;&lt;a href=&quot;#表单处理&quot; class=&quot;headerlink&quot; title=&quot;表单处理&quot;&gt;&lt;/a&gt;表单处理&lt;/h2&gt;&lt;h3 id=&quot;以前学过的表单&quot;&gt;&lt;a href=&quot;#以前学过的表单&quot; class=&quot;headerlink&quot; title=&quot;以前学
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
  <entry>
    <title>13-服务</title>
    <link href="http://yoursite.com/2018/05/10/angular2/13-%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/05/10/angular2/13-服务/</id>
    <published>2018-05-10T00:36:05.033Z</published>
    <updated>2018-05-10T01:30:17.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><blockquote><p>封装了一项功能,并且可以通过注入的方式供其他使用的独立模块</p><blockquote><p>服务可以分为很多种—-包括值,函数以及其他特性</p></blockquote></blockquote><blockquote><p> 如果在项目中有一段代码是很多组件都要使用的，那么最好的方式就是把它做成服务。</p></blockquote><blockquote><p><strong>服务是一种在组件中共享功能的机制</strong>，当我们使用标签将多个组件组合在一起时我们需要操作一些数据或是需要做一些运算时，我们需要做一个服务；服务能帮我们引入外部的数据</p></blockquote><h3 id="old"><a href="#old" class="headerlink" title="old"></a>old</h3><h4 id="服务的种类"><a href="#服务的种类" class="headerlink" title="服务的种类"></a>服务的种类</h4><blockquote><p>服务分为很多种，包括：值、函数，以及应用所需的特性。</p></blockquote><p><strong>以下是几种常见的服务：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">日志服务</span><br><span class="line">数据服务</span><br><span class="line">消息总线</span><br><span class="line">税款计算器</span><br><span class="line">应用程序配置</span><br></pre></td></tr></table></figure><h4 id="服务的生成-基本使用"><a href="#服务的生成-基本使用" class="headerlink" title="服务的生成(基本使用)"></a>服务的生成(基本使用)</h4><p>1.创建服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g service serviceName/file</span><br></pre></td></tr></table></figure><p>2.提供服务</p><blockquote><p>提供的服务需要在app.module.ts中显式声明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.先导入</span><br><span class="line">    import &#123; HeroService &#125; from &apos;./hero.service&apos;;</span><br><span class="line"></span><br><span class="line">2.再声明</span><br><span class="line">    providers: [HeroService],</span><br></pre></td></tr></table></figure><p>3.服务实现的功能</p><blockquote><p>也就是说这个服务是做什么的</p></blockquote><p><strong>以一个提供数据的服务为例</strong></p><p><img src="img/service1.png" alt=""></p><p>4.使用服务</p><p><img src="img/service02.png" alt=""></p><h4 id="服务的应用"><a href="#服务的应用" class="headerlink" title="服务的应用"></a>服务的应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">日志服务</span><br><span class="line">数据服务</span><br><span class="line">消息总线</span><br><span class="line">税款计算器</span><br><span class="line">应用程序配置</span><br></pre></td></tr></table></figure><h5 id="数据服务"><a href="#数据服务" class="headerlink" title="数据服务"></a>数据服务</h5><blockquote><p>将项目中使用到的相关数据获取的操作都分离出来,做成一个可复用的可注入的服务</p></blockquote><p><strong>1.定义服务Appservice</strong></p><blockquote><p>首先使用命令行生成一个服务</p><blockquote><p><strong>ng g service service/app</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Injectable&#125; from &quot;@angular/core&quot;;</span><br><span class="line">import &#123;Http, Jsonp&#125; from &quot;@angular/http&quot;;</span><br><span class="line">import &quot;rxjs/add/operator/map&quot;;</span><br><span class="line">@Injectable()</span><br><span class="line">export class AppService &#123;</span><br><span class="line">  constructor(public http:Http, public jsonp:Jsonp) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  // http.get</span><br><span class="line">  httpGet(url, params) &#123;</span><br><span class="line">    return this.http.get(url, &#123;search: params&#125;).map(result=&gt;result.json());</span><br><span class="line">  &#125;</span><br><span class="line">  // http.post</span><br><span class="line">  httpPost(url, params) &#123;</span><br><span class="line">    return this.http.post(url, params).map(result=&gt;result.json());</span><br><span class="line">  &#125;</span><br><span class="line">  // jsonp</span><br><span class="line">  jsonpGet(url, params) &#123;</span><br><span class="line">    return this.jsonp.get(url, &#123;search: params&#125;).map(result=&gt;result.json());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.定义组件,加载服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component, OnInit&#125; from &quot;@angular/core&quot;;</span><br><span class="line">// 获取路由传递传递过来的params(id) 增加模块激活的路由(ActivatedRoute)</span><br><span class="line">import &#123;ActivatedRoute&#125; from &quot;@angular/router&quot;;</span><br><span class="line">import &#123;AppService&#125; from &quot;./app.service&quot;;</span><br><span class="line">import &#123;URLSearchParams&#125; from &quot;@angular/http&quot;;</span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &quot;my-info&quot;,</span><br><span class="line">    templateUrl: &quot;../templates/about-info.html&quot;,</span><br><span class="line">    providers: [AppService]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class AboutInfoComponent implements OnInit &#123;</span><br><span class="line">    // 定义一个变量, 获取服务方法取得的数据</span><br><span class="line">    info:Number;</span><br><span class="line">    data:Array&lt;Object&gt;;</span><br><span class="line">    // 初始化变量, 这里必须加修饰词 public private, 初始化服务, 然后使用服务方法,调取数据</span><br><span class="line">    constructor(public infos:AppServer) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 方法中操作id, 通过id查询信息等等</span><br><span class="line">    ngOnInit()&#123;</span><br><span class="line">        var url = &quot;http://localhost:3000/login&quot;;</span><br><span class="line">        var params = new URLSearchParams();</span><br><span class="line">        params.set(&quot;id&quot;, &quot;1&quot;);</span><br><span class="line">        // 传递过来的不是promise 所以要subscribe执行</span><br><span class="line">        this.infos.getHttp(url, params).subscribe(res=&gt; &#123;</span><br><span class="line">            console.log(res); </span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.服务的全局加载</strong></p><blockquote><p>上面组件中局部加载了这个服务， 如果需要全局导入服务 app.module.ts文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [AppService]</span><br></pre></td></tr></table></figure><h5 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h5><blockquote><p>以下实例是一个简单的日志服务，用于把日志记录到浏览器的控制台：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export class Logger &#123;</span><br><span class="line">  log(msg: any)   &#123; console.log(msg); &#125;</span><br><span class="line">  error(msg: any) &#123; console.error(msg); &#125;</span><br><span class="line">  warn(msg: any)  &#123; console.warn(msg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><strong>1.生成服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ng g service service/data</span><br></pre></td></tr></table></figure><p><strong>2.基本模板</strong></p><blockquote><p>建议每一个服务都加上@Injectable()装饰器。 注意： 当 TypeScript 看到@Injectable()装饰器时，就会记下本服务的元数据。 如果 Angular 需要往这个服务中注入其它依赖，就会使用这些元数据。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class DataService &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>定义一个提供数据的服务</p></blockquote><p><strong>1. 定义本地json—-数据模拟</strong></p><blockquote><p>data.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  &quot;data&quot;: [   </span><br><span class="line">    &#123;   </span><br><span class="line">      &quot;name&quot;: &quot;HTML&quot;   </span><br><span class="line">    &#125;,      </span><br><span class="line">    &#123;   </span><br><span class="line">      &quot;name&quot;: &quot;Javascript&quot;   </span><br><span class="line">    &#125;,   </span><br><span class="line">   &#123;   </span><br><span class="line">     &quot;name&quot;: &quot;Angular&quot;   </span><br><span class="line">   &#125;   </span><br><span class="line">  ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.定义服务功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; Http &#125; from &apos;@angular/http&apos;;</span><br><span class="line">import &apos;rxjs/add/operator/toPromise&apos;;  </span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class DataService &#123;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        public $http: Http</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    getData() &#123;</span><br><span class="line"></span><br><span class="line">        console.log(1)</span><br><span class="line"></span><br><span class="line">        const url = &apos;./assets/data.json&apos;;</span><br><span class="line">        return this.$http.get(url)</span><br><span class="line">            .toPromise()</span><br><span class="line">            .then(res =&gt; res.json())</span><br><span class="line">            .catch(this.handleError); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private handleError(error: any): Promise&lt;any&gt; &#123;   </span><br><span class="line">        console.error(&apos;An error occurred&apos;, error); // for demo purposes only   </span><br><span class="line">            return Promise.reject(error.message || error);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.使用服务</strong></p><blockquote><p>在这里是在当前组件使用</p><blockquote><p>在这里必须使用异步的方式获取数据</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123;DataService&#125; from &apos;../../service/data.service&apos;;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-service-test&apos;,</span><br><span class="line">  templateUrl: &apos;./service-test.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./service-test.component.css&apos;],</span><br><span class="line">  providers: [DataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class ServiceTestComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">      public dataService:DataService</span><br><span class="line">  ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">      </span><br><span class="line">      this.dataService.getData().then((res)=&gt;&#123;</span><br><span class="line">          console.log(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用服务"><a href="#常用服务" class="headerlink" title="常用服务"></a>常用服务</h4><p><strong>1.get</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">get() &#123;   </span><br><span class="line">  return this.http.get(url)   </span><br><span class="line">         .toPromise()   </span><br><span class="line">         .then(response =&gt; response.json() )   </span><br><span class="line">         .catch(this.handleError);  </span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line">private handleError(error: any): Promise&lt;any&gt; &#123;   </span><br><span class="line">  console.error(&apos;An error occurred&apos;, error); // for demo purposes only   </span><br><span class="line">  return Promise.reject(error.message || error);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.post</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private headers = new Headers(&#123;&apos;Content-type&apos;: &apos;application/json&apos;&#125;);   </span><br><span class="line"></span><br><span class="line">create() &#123;   </span><br><span class="line">  return this.http   </span><br><span class="line">         .post(url, JSON.stringify(hero), &#123;headers: this.headers&#125;)   </span><br><span class="line">         .toPromise()   </span><br><span class="line">         .then(response =&gt; response.json())   </span><br><span class="line">         .catch(this.handleError);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.update</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private headers = new Headers(&#123;&apos;Content-type&apos;: &apos;application/json&apos;&#125;);   </span><br><span class="line"></span><br><span class="line">update() &#123;   </span><br><span class="line">  return this.http   </span><br><span class="line">         .put(url, JSON.stringify(hero), &#123;headers: this.headers&#125;)   </span><br><span class="line">         .toPromise()   </span><br><span class="line">         .then(response =&gt; response.json())   </span><br><span class="line">         .catch(this.handleError);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.delete</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private headers = new Headers(&#123;&apos;Content-type&apos;: &apos;application/json&apos;&#125;);   </span><br><span class="line"></span><br><span class="line">delete() &#123;   </span><br><span class="line">  return this.http</span><br><span class="line">        .delete(url, &#123;headers: this.headers&#125;)   </span><br><span class="line">        .toPromise()   </span><br><span class="line">        .then(() =&gt; null)   </span><br><span class="line">        .catch(this.handleError);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;封装了一项功能,并且可以通过注入的方式供其他使用的独立模块&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务可以分为很
      
    
    </summary>
    
      <category term="angular2" scheme="http://yoursite.com/categories/angular2/"/>
    
    
  </entry>
  
</feed>
