<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaoHui</title>
  
  <subtitle>Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-08T00:49:49.165Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GaoHui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基本开发环境</title>
    <link href="http://yoursite.com/2018/05/08/react/555-1-react%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/05/08/react/555-1-react基本开发环境搭建/</id>
    <published>2018-05-08T00:22:58.136Z</published>
    <updated>2018-05-08T00:49:49.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本开发环境"><a href="#基本开发环境" class="headerlink" title="基本开发环境"></a>基本开发环境</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote><p>在页面中使用引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--react的核心库--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><blockquote><p>使用 create-react-app 快速构建 React 开发环境</p></blockquote><h3 id="安装项目模板"><a href="#安装项目模板" class="headerlink" title="安装项目模板"></a>安装项目模板</h3><blockquote><p>基于webpack快速搭建开发环境</p></blockquote><p><strong>1.全局安装开发环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p><strong>2.创建react项目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure><p><strong>3.切换目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line">辅助cmd命令: </span><br><span class="line">        mkdir</span><br><span class="line">        del</span><br><span class="line">        rmdir</span><br><span class="line">        tree</span><br></pre></td></tr></table></figure><p><strong>4.启动应用程序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="目录结构解析"><a href="#目录结构解析" class="headerlink" title="目录结构解析"></a>目录结构解析</h3><blockquote><p>使用 tree /f &gt; tree.txt 命令生成项目目录结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─ .gitignore</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  </span><br><span class="line">├─public</span><br><span class="line">│      favicon.ico</span><br><span class="line">│      index.html</span><br><span class="line">│      manifest.json</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">        App.css</span><br><span class="line">        App.js</span><br><span class="line">        App.test.js</span><br><span class="line">        index.css</span><br><span class="line">        index.js</span><br><span class="line">        logo.svg</span><br><span class="line">        registerServiceWorker.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本开发环境&quot;&gt;&lt;a href=&quot;#基本开发环境&quot; class=&quot;headerlink&quot; title=&quot;基本开发环境&quot;&gt;&lt;/a&gt;基本开发环境&lt;/h1&gt;&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react编程思想</title>
    <link href="http://yoursite.com/2018/05/08/react/23-react%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/2018/05/08/react/23-react编程思想/</id>
    <published>2018-05-08T00:22:58.120Z</published>
    <updated>2018-05-08T00:49:55.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react编程思想"><a href="#react编程思想" class="headerlink" title="react编程思想"></a>react编程思想</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react编程思想&quot;&gt;&lt;a href=&quot;#react编程思想&quot; class=&quot;headerlink&quot; title=&quot;react编程思想&quot;&gt;&lt;/a&gt;react编程思想&lt;/h1&gt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>组合和继承</title>
    <link href="http://yoursite.com/2018/05/08/react/22-%E7%BB%84%E5%90%88%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/05/08/react/22-组合和继承/</id>
    <published>2018-05-08T00:22:58.120Z</published>
    <updated>2018-05-08T00:50:15.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合和继承"><a href="#组合和继承" class="headerlink" title="组合和继承"></a>组合和继承</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合和继承&quot;&gt;&lt;a href=&quot;#组合和继承&quot; class=&quot;headerlink&quot; title=&quot;组合和继承&quot;&gt;&lt;/a&gt;组合和继承&lt;/h2&gt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>状态提升</title>
    <link href="http://yoursite.com/2018/05/08/react/21-%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/"/>
    <id>http://yoursite.com/2018/05/08/react/21-状态提升/</id>
    <published>2018-05-08T00:22:58.105Z</published>
    <updated>2018-05-08T00:41:29.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;状态提升&quot;&gt;&lt;a href=&quot;#状态提升&quot; class=&quot;headerlink&quot; title=&quot;状态提升&quot;&gt;&lt;/a&gt;状态提升&lt;/h1&gt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://yoursite.com/2018/05/08/react/16-redux/"/>
    <id>http://yoursite.com/2018/05/08/react/16-redux/</id>
    <published>2018-05-08T00:22:58.105Z</published>
    <updated>2018-05-08T00:41:14.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><blockquote><p>状态管理</p></blockquote><p><code>redux</code>是将整个应用程序的状态存储到一个地方, 称为<code>store</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redux&quot;&gt;&lt;a href=&quot;#redux&quot; class=&quot;headerlink&quot; title=&quot;redux&quot;&gt;&lt;/a&gt;redux&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;状态管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;redux&lt;/code&gt;是
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react-router</title>
    <link href="http://yoursite.com/2018/05/08/react/12-router/"/>
    <id>http://yoursite.com/2018/05/08/react/12-router/</id>
    <published>2018-05-08T00:22:58.089Z</published>
    <updated>2018-05-08T00:41:02.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h1><h2 id="路由的基本实现"><a href="#路由的基本实现" class="headerlink" title="路由的基本实现"></a>路由的基本实现</h2><p><strong>注意事项</strong></p><ul><li>Router或者说是 BrowserRouter 的内部 只能有一个根元素</li></ul><p>1.引入相关的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">    BrowserRouter as Router,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; from &apos;react-router-dom&apos;</span><br></pre></td></tr></table></figure><p>2.创建组件并导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 创建home组件</span><br><span class="line">import React , &#123;Component&#125; from &quot;react&quot;</span><br><span class="line">export class Home extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;首页&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建About组件</span><br><span class="line">import React , &#123;Component&#125; from &quot;react&quot;</span><br><span class="line">export class About extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;关于&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建topic组件</span><br><span class="line">import React , &#123;Component&#125; from &quot;react&quot;</span><br><span class="line">export class Topic extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;主题&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123;Home&#125; from &apos;./home/home&apos;</span><br><span class="line">import &#123;About&#125; from &apos;./about/about&apos;</span><br><span class="line">import &#123;Topic&#125; from &apos;./topic/topic&apos;</span><br></pre></td></tr></table></figure><p>3-4.完善路由跳转链接和路由信息配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;/*3. 定义路由跳转的链接*/&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;Link to=&apos;/&apos;&gt;首页&lt;/Link&gt; </span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;Link to=&apos;/about&apos;&gt;关于&lt;/Link&gt; </span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;Link to=&apos;/topic&apos;&gt;主题&lt;/Link&gt; </span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        </span><br><span class="line">        &#123;/*4. 配置路由信息*/&#125;</span><br><span class="line">        &#123;/*exact : 确切的   精确的*/&#125;</span><br><span class="line"></span><br><span class="line">        &lt;Route exact path=&apos;/&apos; component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path=&apos;/about&apos; component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path=&apos;/topic&apos; component=&#123;Topic&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><h2 id="二级路由"><a href="#二级路由" class="headerlink" title="二级路由"></a>二级路由</h2><blockquote><p>在上述代码的基础上修改 <code>Topic</code> 组件 ,可以实现二级路由</p></blockquote><ul><li><p><strong>注意事项</strong></p><ul><li><p>获取一级路由信息, 类组件使用 <code>this.props</code>   , 函数式组件使用 <code>props</code> 参数</p></li><li><p>在路由跳转的时候进行拼接url  </p><ul><li><code>&lt;Link to={${props.url}/topic2}&gt;topic2&lt;/Link&gt;</code></li><li><code>&lt;Route path={${props.url}/topic1} component={Topic1}&gt;&lt;/Route&gt;</code></li></ul></li><li><p>路由参数的获取 使用  <code>console.log(props.match.params.id)</code></p></li></ul></li></ul><p><strong>具体内容参考以下代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React , &#123;Component&#125; from &quot;react&quot;</span><br><span class="line"></span><br><span class="line">import &#123;BrowserRouter as Router,Route, Link&#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 主题组件1</span><br><span class="line">function Topic1 () &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主题组件2</span><br><span class="line">function Topic2 () &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 主题组件3</span><br><span class="line">function Topic3 (props) &#123;</span><br><span class="line"></span><br><span class="line">    // 获取传递的id参数</span><br><span class="line">    console.log(props.match.params.id)</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 函数式组件 ---- 路由创建2</span><br><span class="line"></span><br><span class="line">function BasicExample2 (props) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(props.url)</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=&#123;`$&#123;props.url&#125;/topic1`&#125;&gt;topic1&lt;/Link&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=&#123;`$&#123;props.url&#125;/topic2`&#125;&gt;topic2&lt;/Link&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=&#123;`$&#123;props.url&#125;/topic3`&#125;&gt;topic3&lt;/Link&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Route path=&#123;`$&#123;props.url&#125;/topic1`&#125; component=&#123;Topic1&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&#123;`$&#123;props.url&#125;/topic2`&#125; component=&#123;Topic2&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&#123;`$&#123;props.url&#125;/topic3`&#125; component=&#123;Topic3&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export class Topic extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        console.log(this.props.match.path)</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;主题&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &lt;BasicExample2 url=&#123;this.props.match.path&#125;&gt;&lt;/BasicExample2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="api文档"><a href="#api文档" class="headerlink" title="api文档"></a>api文档</h2><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react-router&quot;&gt;&lt;a href=&quot;#react-router&quot; class=&quot;headerlink&quot; title=&quot;react-router&quot;&gt;&lt;/a&gt;react-router&lt;/h1&gt;&lt;h2 id=&quot;路由的基本实现&quot;&gt;&lt;a href=&quot;#路由的基本实
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>forms</title>
    <link href="http://yoursite.com/2018/05/08/react/10-forms/"/>
    <id>http://yoursite.com/2018/05/08/react/10-forms/</id>
    <published>2018-05-08T00:22:58.073Z</published>
    <updated>2018-05-08T00:40:47.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="forms"><a href="#forms" class="headerlink" title="forms"></a>forms</h1><h2 id="表单概述"><a href="#表单概述" class="headerlink" title="表单概述"></a>表单概述</h2><blockquote><p>HTML 表单元素与 React 中的其他 DOM 元素有所不同，因为表单元素自然地保留了一些内部状态。例如，这个纯 HTML 表单接受一个单独的 name：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    Name:</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>该表单和 HTML 表单的默认行为一致，当用户提交此表单时浏览器会打开一个新页面。如果你希望 React 中保持这个行为，也可以工作。但是多数情况下，用一个处理表单提交并访问用户输入到表单中的数据的 JavaScript 函数也很方便。实现这一点的标准方法是使用一种称为“受控组件(controlled components)”的技术。</p></blockquote><h2 id="受控组件Controll"><a href="#受控组件Controll" class="headerlink" title="受控组件Controll"></a>受控组件Controll</h2><blockquote><p>在 HTML 中，表单元素如 <code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>表单元素通常保持自己的状态，并根据用户输入进行更新。而在 React 中，可变状态一般保存在组件的 state(状态) 属性中，并且只能通过 <code>setState()</code>更新。</p></blockquote><blockquote><blockquote><p>我们可以通过使 React 的 state 成为 <code>“单一数据源原则”</code>来结合这两个形式。然后渲染表单的 React 组件也可以控制在用户输入之后的行为。这种形式，其值由 React 控制的输入表单元素称为“受控组件”。</p></blockquote></blockquote><ul><li><strong>数据/状态的定义: 使用  this.state = {}</strong></li><li><strong>状态的修改: this.state.setState({})</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    // 定义类组件</span><br><span class="line">class NameForms extends React.Component&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        </span><br><span class="line">        // 定义状态</span><br><span class="line">        this.state = &#123;value:&apos;&apos;&#125;</span><br><span class="line">        // 函数可以产生独立作用域  ,在这里修改函数内部的指针指向 当前组件(类)</span><br><span class="line">        this.handleChange = this.handleChange.bind(this)</span><br><span class="line">        this.handleSubmit = this.handleSubmit.bind(this)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleChange(e)&#123;</span><br><span class="line">        this.setState(&#123;value:e.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleSubmit(e)&#123;</span><br><span class="line">        alert(&quot;A name was submitted : &quot; + this.state.value)</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">                &lt;label for=&quot;&quot;&gt;</span><br><span class="line">                    name : &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;forms&quot;&gt;&lt;a href=&quot;#forms&quot; class=&quot;headerlink&quot; title=&quot;forms&quot;&gt;&lt;/a&gt;forms&lt;/h1&gt;&lt;h2 id=&quot;表单概述&quot;&gt;&lt;a href=&quot;#表单概述&quot; class=&quot;headerlink&quot; title=&quot;表单概述&quot;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react数据请求</title>
    <link href="http://yoursite.com/2018/05/08/react/08-fetchApi-%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/05/08/react/08-fetchApi-数据请求/</id>
    <published>2018-05-08T00:22:58.042Z</published>
    <updated>2018-05-08T00:40:36.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react数据请求"><a href="#react数据请求" class="headerlink" title="react数据请求"></a>react数据请求</h1><p>参考文档  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="cdn链接"><a href="#cdn链接" class="headerlink" title="cdn链接"></a>cdn链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><h4 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h4><blockquote><p>最初的时候, 渲染页面 , 数据都是写在本页面</p></blockquote><blockquote><blockquote><p>这样操作的问题是修改页面内容不方便, 只能通过操作本页面完成</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据请求--&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fetch_get extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props)</span><br><span class="line">this.state = &#123;</span><br><span class="line">arr:[</span><br><span class="line">&#123;&quot;id&quot;:&quot;123001&quot;,&quot;name&quot;:&quot;xiaoming&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;123002&quot;,&quot;name&quot;:&quot;xiaobing&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;123003&quot;,&quot;name&quot;:&quot;xiaona&quot;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">        this.state.arr.map((ele,index,arr)=&gt;&#123;</span><br><span class="line">        return &lt;li key=&#123;index&#125;&gt;&#123;ele.name&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Fetch_get&gt;&lt;/Fetch_get&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h4><blockquote><p>实现页面结构和数据的分离, 修改页面内容的时候, 操作文件即可</p></blockquote><blockquote><blockquote><p>以json文件为例, 修改json文件之后, 我们页面的内容也会发生变化</p></blockquote></blockquote><ul><li>json文件定义—-数据定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&quot;id&quot;:&quot;123001&quot;,&quot;name&quot;:&quot;xiaoming&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;123002&quot;,&quot;name&quot;:&quot;xiaobing&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;123003&quot;,&quot;name&quot;:&quot;xiaona&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>请求json文件,完成页面的渲染</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据请求--&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fetch_get extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props)</span><br><span class="line">this.state = &#123;</span><br><span class="line">arr:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">        this.state.arr.map((ele,index,arr)=&gt;&#123;</span><br><span class="line">        return &lt;li key=&#123;index&#125;&gt;&#123;ele.name&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">var url = &quot;data.json&quot;</span><br><span class="line"></span><br><span class="line">var option = &#123;</span><br><span class="line">methods:&quot;get&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url,option).then((res)=&gt;&#123;</span><br><span class="line">return res.json()</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">// 请求到的数据</span><br><span class="line">console.log(res)</span><br><span class="line"></span><br><span class="line">// 修改state</span><br><span class="line">this.setState(&#123;</span><br><span class="line">arr:res</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 打印输出 </span><br><span class="line">console.log(this.state.arr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Fetch_get&gt;&lt;/Fetch_get&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><blockquote><p>为了便于数据的操作, 我们平时看到的页面上的数据一般都是存在数据库的, 通过后台管理系统, 能够很方便的实现数据的修改</p></blockquote><p>– 此例 不多做演示</p><h4 id="在线接口"><a href="#在线接口" class="headerlink" title="在线接口"></a>在线接口</h4><blockquote><p>书写数据接口, 通过后台操作, 读取数据库数据, 并做成接口的形式, 我们需要对数据进行操作的时候,直接操作接口即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据请求--&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">[&#123;&quot;id&quot;:&quot;123001&quot;,&quot;name&quot;:&quot;xiaoming&quot;&#125;,&#123;&quot;id&quot;:&quot;123002&quot;,&quot;name&quot;:&quot;xiaobing&quot;&#125;,&#123;&quot;id&quot;:&quot;123003&quot;,&quot;name&quot;:&quot;xiaona&quot;&#125;]</span><br><span class="line"></span><br><span class="line">class Fetch_get extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props)</span><br><span class="line">this.state = &#123;</span><br><span class="line">arr:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">        this.state.arr.map((ele,index,arr)=&gt;&#123;</span><br><span class="line">        return &lt;li key=&#123;index&#125;&gt;&#123;ele.name&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">var url = &quot;http://www.taoquan.store/robot/getUsers.php&quot;</span><br><span class="line"></span><br><span class="line">var option = &#123;</span><br><span class="line">methods:&quot;get&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url,option).then((res)=&gt;&#123;</span><br><span class="line">return res.json()</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">// 请求到的数据</span><br><span class="line">console.log(res.users)</span><br><span class="line"></span><br><span class="line">// 修改state</span><br><span class="line">this.setState(&#123;</span><br><span class="line">arr:res.users</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 打印输出 </span><br><span class="line">console.log(this.state.arr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Fetch_get&gt;&lt;/Fetch_get&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><blockquote><p>将数据提交到数据库</p></blockquote><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><blockquote><p>在真正操作的时候只需要将要提交的数据换成表单数据即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据请求--&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Com extends React.Component&#123;</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props)</span><br><span class="line">this.state = &#123;</span><br><span class="line"></span><br><span class="line">num:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">        </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">var url = &apos;http://127.0.0.1:8899/api/insertData&apos;</span><br><span class="line">var options = &#123;</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: &apos;name=1&amp;sex=2&amp;email=3&amp;phone=4&amp;address=5&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url,options)</span><br><span class="line">.then((res)=&gt;&#123;</span><br><span class="line">return res.json()</span><br><span class="line">&#125;)</span><br><span class="line">.then((res)=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Com&gt;&lt;/Com&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var url = &apos;http://127.0.0.1:8899/api/insertData&apos;</span><br><span class="line">var options = &#123;</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: &apos;name=1&amp;sex=2&amp;email=3&amp;phone=4&amp;address=5&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url,options)</span><br><span class="line">.then((res)=&gt;&#123;</span><br><span class="line">return res.json()</span><br><span class="line">&#125;)</span><br><span class="line">.then((res)=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">var data = &#123;</span><br><span class="line">name:&quot;1&quot;,</span><br><span class="line">sex:&quot;2&quot;,</span><br><span class="line">email:&quot;3&quot;,</span><br><span class="line">phone:&quot;4&quot;,</span><br><span class="line">address:&quot;5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(&apos;http://127.0.0.1:8899/api/insertData&apos;,&#123;</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">    body: `data=$&#123;JSON.stringify(data)&#125;`,</span><br><span class="line">    headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then((res)=&gt;&#123;</span><br><span class="line">console.log(res.json())</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li>Content-Type：上传文件的时候，一定要设置为application/x-www-form-urlencoded</li></ul><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h4 id="fetch跨域概述"><a href="#fetch跨域概述" class="headerlink" title="fetch跨域概述"></a>fetch跨域概述</h4><blockquote><p>在fetch的配置中有  mode选项  , 提供了跨域的能力</p></blockquote><ul><li>mode: ‘cors’, // no-cors, cors, *same-origin</li></ul><ul><li><p>mode:’cors’</p><ul><li>这个选项提供了跨域的能力, 但是服务端必须支持 cors  ,也就是设置  res.header(“Access-Control-Allow-Origin”, “*”);</li></ul></li><li><p>mode:’no-cors’</p><ul><li>可以跨域进行数据请求 , 不需要设置跨域 header</li><li>在该模式下  得到的返回数据中  type为opaque。, 能够在控制台看到返回的数据, 但是没有权限使用这些数据</li></ul></li><li><p>mode:”same-origin”</p><ul><li>同源, 不允许跨域</li></ul></li></ul><p><strong>并不能成功跨域进行数据的访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据请求--&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/fetch/2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fetch_get extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props)</span><br><span class="line">this.state = &#123;</span><br><span class="line">arr:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">        this.state.arr.map((ele,index,arr)=&gt;&#123;</span><br><span class="line">        return &lt;li key=&#123;index&#125;&gt;&#123;ele.name&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line"> var url = &quot;https://api.douban.com/v2/movie/top250&quot;</span><br><span class="line">// var url = &apos;http://127.0.0.1:8899/api/selectData&apos;</span><br><span class="line">var option = &#123;</span><br><span class="line">methods:&quot;get&quot;,</span><br><span class="line">mode:&apos;no-cors&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(url,option).then((res)=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Fetch_get&gt;&lt;/Fetch_get&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用jsonp调取数据"><a href="#使用jsonp调取数据" class="headerlink" title="使用jsonp调取数据"></a>使用jsonp调取数据</h4><blockquote><p>在原生js中, 利用script标签的支持跨域的特性进行</p></blockquote><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><blockquote><p>利用script标签的跨域访问特性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;JSONP实现跨域2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--代码的先后顺序 不能变--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function fn(response)&#123;</span><br><span class="line">            console.log(response);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://api.douban.com/v2/movie/top250?callback=fn&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="第二种方式-1"><a href="#第二种方式-1" class="headerlink" title="第二种方式"></a>第二种方式</h5><blockquote><p>动态创建script标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;JSONP实现跨域2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--代码的先后顺序 不能变--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function fn(response)&#123;</span><br><span class="line">            console.log(response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var script = document.createElement(&apos;script&apos;)</span><br><span class="line">    </span><br><span class="line">    script.src = &apos;https://api.douban.com/v2/movie/top250?callback=fn&apos;</span><br><span class="line">    </span><br><span class="line">    document.body.insertBefore(script, document.body.firstChild);   </span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><blockquote><p>使用jquery</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:&apos;get&apos;,</span><br><span class="line">    url:&quot;https://api.douban.com/v2/movie/top250?callback=?&quot;,</span><br><span class="line">    success(res)&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    dataType:&quot;jsonp&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="项目中使用-create-react-app"><a href="#项目中使用-create-react-app" class="headerlink" title="项目中使用 create-react-app"></a>项目中使用 create-react-app</h2><blockquote><p>fetchApi的使用</p></blockquote><p>npm 地址  <a href="https://www.npmjs.com/package/whatwg-fetch" target="_blank" rel="noopener">https://www.npmjs.com/package/whatwg-fetch</a></p><blockquote><p>详细的使用说明可以参考这个文档</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 安装  npm install whatwg-fetch --save</span><br><span class="line"></span><br><span class="line">2. 配置  在使用webpack的时候,需要完成这一步的配置</span><br><span class="line">    entry: [&apos;whatwg-fetch&apos;, ...]</span><br><span class="line"></span><br><span class="line">3. 使用</span><br><span class="line">    直接导入这个包即可   import &apos;whatwg-fetch&apos;</span><br></pre></td></tr></table></figure><h3 id="请求html文件"><a href="#请求html文件" class="headerlink" title="请求html文件"></a>请求html文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTML</span><br><span class="line">fetch(&apos;/users.html&apos;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">    return response.text()</span><br><span class="line">  &#125;).then(function(body) &#123;</span><br><span class="line">    document.body.innerHTML = body</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="get-请求获取数据"><a href="#get-请求获取数据" class="headerlink" title="get  请求获取数据"></a>get  请求获取数据</h3><blockquote><p>  在componentDidMount(){}生命周期钩子中进行数据的初始化操作</p></blockquote><p>1.在构造函数中初始化状态(数据)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">        arr:[],</span><br><span class="line">        name:&quot;test&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 componentDidMount 中发送请求,获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">    fetch(&apos;http://gaohuimusic.nat123.cc:11444/personalized&apos;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">            return response.json()</span><br><span class="line">        &#125;).then((json) =&gt; &#123;</span><br><span class="line">            console.log(&apos;parsed json&apos;, json)</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                arr:json.result</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(this.state.arr)</span><br><span class="line">        &#125;).catch(function(ex) &#123;</span><br><span class="line">            console.log(&apos;parsing failed&apos;, ex)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在render()函数中完成页面渲染—-将请求到的数据渲染到页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是tab1&lt;/p&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;this.state.arr.map(function(ele,index,arr)&#123;</span><br><span class="line">                    return &lt;li key=&#123;index&#125;&gt;&#123;ele.name&#125;&lt;/li&gt;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react数据请求&quot;&gt;&lt;a href=&quot;#react数据请求&quot; class=&quot;headerlink&quot; title=&quot;react数据请求&quot;&gt;&lt;/a&gt;react数据请求&lt;/h1&gt;&lt;p&gt;参考文档  &lt;a href=&quot;https://developer.mozilla.o
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>组件补充</title>
    <link href="http://yoursite.com/2018/05/08/react/07-%E7%BB%84%E4%BB%B6%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2018/05/08/react/07-组件补充/</id>
    <published>2018-05-08T00:22:57.995Z</published>
    <updated>2018-05-08T00:40:22.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件补充"><a href="#组件补充" class="headerlink" title="组件补充"></a>组件补充</h1><h2 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    组件：组成的部件,可以接受任何props输入,并返回元素</span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">    // 1.1 创建一个基本的组件</span><br><span class="line">    function Welcome(props)&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&#123;props.name&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // 1.2 创建一个app组件,并使用Welcome组件</span><br><span class="line">    function App(props)&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Welcome name=&quot;1&quot;&gt;&lt;/Welcome&gt;</span><br><span class="line">                &lt;Welcome name=&quot;2&quot;&gt;&lt;/Welcome&gt;</span><br><span class="line">                &lt;Welcome name=&quot;3&quot;&gt;&lt;/Welcome&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var element = &lt;App&gt;&lt;/App&gt;</span><br><span class="line">    // 2. 组件的使用</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        element, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="公共组件的提取"><a href="#公共组件的提取" class="headerlink" title="公共组件的提取"></a>公共组件的提取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="props总结"><a href="#props总结" class="headerlink" title="props总结"></a>props总结</h2><p><strong>props是只读的</strong></p><blockquote><p>所有 React 组件都必须是纯函数，并禁止修改其自身 props 。</p></blockquote><h2 id="知识点扩充"><a href="#知识点扩充" class="headerlink" title="知识点扩充"></a>知识点扩充</h2><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><blockquote><p>不会试图改变它们的输入，并且对于同样的输入,始终可以得到相同的结果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非纯函数"><a href="#非纯函数" class="headerlink" title="非纯函数"></a>非纯函数</h3><blockquote><p>改变了自身的输入值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(account, amount) &#123;</span><br><span class="line">  account.total -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件补充&quot;&gt;&lt;a href=&quot;#组件补充&quot; class=&quot;headerlink&quot; title=&quot;组件补充&quot;&gt;&lt;/a&gt;组件补充&lt;/h1&gt;&lt;h2 id=&quot;组件的嵌套&quot;&gt;&lt;a href=&quot;#组件的嵌套&quot; class=&quot;headerlink&quot; title=&quot;组件的嵌套&quot;&gt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>组件传值</title>
    <link href="http://yoursite.com/2018/05/08/react/06-%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2018/05/08/react/06-组件传值/</id>
    <published>2018-05-08T00:22:57.964Z</published>
    <updated>2018-05-08T00:52:18.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h1><blockquote><p>每个组件 的作用域都是独立的, 有时候需要在组件之间完成数据的传递,需要通过组件传值的方式来实现</p></blockquote><p><strong>组件传值可以分为以下三类</strong></p><ul><li>父组件向子组件传递数据</li><li>子组件向父组件传递数据</li><li>非父子组件之间的数据传递</li></ul><h2 id="父传子-–-简化版"><a href="#父传子-–-简化版" class="headerlink" title="父传子 – 简化版"></a>父传子 – 简化版</h2><h3 id="函数式组件传值"><a href="#函数式组件传值" class="headerlink" title="函数式组件传值"></a>函数式组件传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot; class=&quot;parent&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 创建一个函数组件  ---- 使用props完成值得接收</span><br><span class="line">function Child(props)&#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">    // 渲染组件  并通过name属性完成传值</span><br><span class="line">        &lt;Child name=&quot;3&quot;&gt;&lt;/Child&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="类组件传值"><a href="#类组件传值" class="headerlink" title="类组件传值"></a>类组件传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 创建一个类组件</span><br><span class="line">class Child extends React.Component&#123;</span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Child name=&quot;1&quot;&gt;&lt;/Child&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传值详解"><a href="#组件传值详解" class="headerlink" title="组件传值详解"></a>组件传值详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们调用了 ReactDOM.render() 方法并向其中传入了 &lt;Child name=&quot;1&quot; /&gt; 元素。</span><br><span class="line"></span><br><span class="line">React 调用 Child 组件，并向其中传入了 &#123;name: &apos;1&apos;&#125; 作为 props 对象。</span><br><span class="line"></span><br><span class="line">Child 组件返回 &lt;li&gt;1&lt;/li&gt;。</span><br><span class="line"></span><br><span class="line">React DOM 迅速更新 DOM ，使其显示为 &lt;li&gt;1&lt;/li&gt;。</span><br></pre></td></tr></table></figure><h2 id="父传子-–-完整版"><a href="#父传子-–-完整版" class="headerlink" title="父传子 – 完整版"></a>父传子 – 完整版</h2><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    组件：组成的部件,可以接受任何props输入,并返回元素</span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">    // 创建一个父组件 </span><br><span class="line">    function Parent()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">                &#123;/*在父组件中嵌套子组件*/&#125;</span><br><span class="line">                &lt;Child name=&quot;1&quot;&gt;&lt;/Child&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 创建一个子组件 列表</span><br><span class="line">    function Child(props)&#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;这是子组件&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 2. 组件的使用</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Parent&gt;&lt;/Parent&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 创建一个类组件  -- 父</span><br><span class="line">class Parent extends React.Component&#123;</span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">                &#123;/*在父组件中嵌套子组件*/&#125;</span><br><span class="line">                &lt;Child name=&quot;1&quot;&gt;&lt;/Child&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建一个类组件  -- 子</span><br><span class="line">class Child extends React.Component&#123;</span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;这是子组件&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Parent&gt;&lt;/Parent&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><h3 id="函数式组件-1"><a href="#函数式组件-1" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line">function Child(props)&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &#123;/*当文本框内容发生变化的时候.会执行父组件里面的事件*/&#125;</span><br><span class="line">                子组件：&lt;input onChange=&#123;props.handleEmail&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">       )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件</span><br><span class="line">function Parent() &#123;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div id=&apos;div&apos;&gt;父组件：&#123;1&#125;&lt;/div&gt;</span><br><span class="line">            &lt;Child name=&quot;email&quot; handleEmail=&#123;</span><br><span class="line">            function (event)&#123;</span><br><span class="line">            /*获取子组件的数据*/</span><br><span class="line">        console.log(event.target.value)</span><br><span class="line">        </span><br><span class="line">        document.getElementById(&apos;div&apos;) = event.target.value</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">            &#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Parent /&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="类组件-1"><a href="#类组件-1" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line">class Child extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &#123;/*当文本框内容发生变化的时候.会执行父组件里面的事件*/&#125;</span><br><span class="line">                子组件：&lt;input onChange=&#123;this.props.handleEmail&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件</span><br><span class="line">class Parent extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">        email:&apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleEmail(event)&#123;</span><br><span class="line">        this.setState(&#123;email: event.target.value&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;父组件：&#123;this.state.email&#125;&lt;/div&gt;</span><br><span class="line">                &lt;Child name=&quot;email&quot; handleEmail=&#123;this.handleEmail.bind(this)&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Parent /&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="非父子"><a href="#非父子" class="headerlink" title="非父子"></a>非父子</h2><h3 id="非父子组件传值之兄弟组件传值"><a href="#非父子组件传值之兄弟组件传值" class="headerlink" title="非父子组件传值之兄弟组件传值"></a>非父子组件传值之兄弟组件传值</h3><blockquote><p>使用中间人模式 , 定义一个公共的父组件来实现兄弟组件之间的数据传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Brother1 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.refresh&#125;&gt;</span><br><span class="line">            更新兄弟组件</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Brother2 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &#123;this.props.text || &quot;兄弟组件未更新&quot;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Parent extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  refresh()&#123;</span><br><span class="line">    return (e)=&gt;&#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        text: &quot;兄弟组件沟通成功&quot;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;兄弟组件沟通&lt;/h2&gt;</span><br><span class="line">        &lt;Brother1 refresh=&#123;this.refresh()&#125;/&gt;</span><br><span class="line">        &lt;Brother2 text=&#123;this.state.text&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Parent /&gt;, document.getElementById(&apos;root&apos;));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用jquery自定义事件完成传值"><a href="#使用jquery自定义事件完成传值" class="headerlink" title="使用jquery自定义事件完成传值"></a>使用jquery自定义事件完成传值</h3><blockquote><p>根据上面理解的思路, 使用jquery的事件机制作为中间人, 实现数据的传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Com1 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">  $(&apos;#root&apos;).on(&apos;bus&apos;,function(e,a,b)&#123;</span><br><span class="line">console.log(a,b)</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Com2 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">  $(&apos;#root&apos;).trigger(&apos;bus&apos;,[11,22])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;Com1&gt;&lt;/Com1&gt;</span><br><span class="line">        &lt;Com2&gt;&lt;/Com2&gt;</span><br><span class="line">        &lt;/div&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用原生js的方式实现组件之间的数据的传递"><a href="#使用原生js的方式实现组件之间的数据的传递" class="headerlink" title="使用原生js的方式实现组件之间的数据的传递"></a>使用原生js的方式实现组件之间的数据的传递</h3><blockquote><p>上述使用jquery能够实现数据的传递,但是这样操作的话, 并不是最佳的方式</p><blockquote><p>如果我们只是为了实现组件之间的数据传递而引入jquery框架, 会使项目变得臃肿</p></blockquote></blockquote><ul><li><p>为了更好的体验, 我们可以使用原生js的自定义事件的方式完成组件之间的数据的传递</p></li><li><p>注意事项: 在这里,只是关注与功能的实现, 不考虑兼容性的问题</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 给dom元素绑定事件 ---- 作为中间人</span><br><span class="line">var elem = document.getElementById(&apos;root&apos;)</span><br><span class="line">var events = new Event(&apos;build&apos;);</span><br><span class="line"></span><br><span class="line">class Com1 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">  // 给dom元素添加事件监听, 通过函数参数完成数据的接收</span><br><span class="line">  elem.addEventListener(&apos;build&apos;, function (event) &#123;</span><br><span class="line">console.log(event.name)</span><br><span class="line">&#125;, false);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Com2 extends React.Component&#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">    name:&apos;我是小高&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">  events.name = this.state.name</span><br><span class="line">  elem.dispatchEvent(events)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;Com1&gt;&lt;/Com1&gt;</span><br><span class="line">        &lt;Com2&gt;&lt;/Com2&gt;</span><br><span class="line">        &lt;/div&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件传值&quot;&gt;&lt;a href=&quot;#组件传值&quot; class=&quot;headerlink&quot; title=&quot;组件传值&quot;&gt;&lt;/a&gt;组件传值&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;每个组件 的作用域都是独立的, 有时候需要在组件之间完成数据的传递,需要通过组件传值的方式来实现&lt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>state和生命周期</title>
    <link href="http://yoursite.com/2018/05/08/react/05-state%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/05/08/react/05-state和生命周期/</id>
    <published>2018-05-08T00:22:57.933Z</published>
    <updated>2018-05-08T00:40:00.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="state和生命周期"><a href="#state和生命周期" class="headerlink" title="state和生命周期"></a>state和生命周期</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><blockquote><p>state 允许 React 组件在不违反props规则的情况下, 根据用户操作, 网络响应, 或者其他随便什么东西, 来动态地改变其输出。<br>类似于vue中的data</p></blockquote><h3 id="state的定义"><a href="#state的定义" class="headerlink" title="state的定义"></a>state的定义</h3><blockquote><p>在类组件的constructor中定义state</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      posts: [],</span><br><span class="line">      comments: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="状态的修改"><a href="#状态的修改" class="headerlink" title="状态的修改"></a>状态的修改</h3><h4 id="不能直接修改state"><a href="#不能直接修改state" class="headerlink" title="不能直接修改state"></a>不能直接修改state</h4><blockquote><p>需要调用<strong>this.setState()</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 错误  这样将不会重新渲染一个组件：</span><br><span class="line">this.state.comment = &apos;Hello&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 正确    用 setState() 代替：</span><br><span class="line">this.setState(&#123;comment: &apos;Hello&apos;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">唯一可以分配 this.state 的地方是构造函数。</span><br></pre></td></tr></table></figure><h4 id="state-状态-更新可能是异步的"><a href="#state-状态-更新可能是异步的" class="headerlink" title="state(状态) 更新可能是异步的"></a>state(状态) 更新可能是异步的</h4><p><strong>使用回调函数的形式实现异步操作</strong></p><blockquote><p>需要将对象参数转变为回调函数的形式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 错误</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  counter: this.state.counter + this.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line">this.setState((prevState, props) =&gt; (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">使用另一种 setState() 的形式，它接受一个函数而不是一个对象。</span><br><span class="line"></span><br><span class="line">这个函数将接收前一个状态作为第一个参数，应用更新时的 props 作为第二个参数：</span><br></pre></td></tr></table></figure><h4 id="state-状态-更新会被合并"><a href="#state-状态-更新会被合并" class="headerlink" title="state(状态)更新会被合并"></a>state(状态)更新会被合并</h4><p><strong>你的状态可能包含几个独立的变量：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    posts: [],</span><br><span class="line">    comments: []</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用this.setState()修改单个的状态不会影响其他的状态,只会合并当前修改的这一个状态</strong></p><h2 id="react-hook函数"><a href="#react-hook函数" class="headerlink" title="react-hook函数"></a>react-hook函数</h2><h3 id="hook函数的基本概念"><a href="#hook函数的基本概念" class="headerlink" title="hook函数的基本概念"></a>hook函数的基本概念</h3><p>hook函数参考链接 <a href="https://baike.baidu.com/item/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0?fr=aladdin</a></p><blockquote><p>钩子函数是window消息处理机制的一部分,通过设置”钩子”,应用程序可以在系统级对所有消息,事件进行过滤,访问在正常情况下无法访问的消息</p><blockquote><p>钩子函数的本质是一段用以处理系统消息的程序,通过系统调用,把它挂入系统</p></blockquote></blockquote><h3 id="react组件的三个状态"><a href="#react组件的三个状态" class="headerlink" title="react组件的三个状态"></a>react组件的三个状态</h3><p>1.mount<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react Components被render解析生成对应的dom节点被插入浏览器的dom结构的一个过程</span><br><span class="line"></span><br><span class="line">在浏览器上看到组件元素从无到有的过程</span><br></pre></td></tr></table></figure></p><p>2.update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一个mounte的react Component被重新render的过程,但是在这个过程中,dom结构并不一定会发生改变</span><br><span class="line"></span><br><span class="line">在react中,状态的改变会触发update的hook函数</span><br></pre></td></tr></table></figure><p>3.unmount</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个mount的react Component对应的dom节点被从dm中移除的一个过程</span><br></pre></td></tr></table></figure><p><strong>react针对以上三种状态都封装了hook函数</strong></p><p><img src="img/hook1.png" alt=""></p><h3 id="生命周期钩子详解"><a href="#生命周期钩子详解" class="headerlink" title="生命周期钩子详解"></a>生命周期钩子详解</h3><h4 id="mounting"><a href="#mounting" class="headerlink" title="mounting"></a>mounting</h4><blockquote><p>如下这些方法在组件实例被创建和被插入到dom中时被调用。</p></blockquote><ul><li><p>1.constructor()</p><ul><li><p>constructor初始化state的好地方。如果我们不需要初始化state，也不需要bind任何方法，那么在我们的组件中不需要实现constructor函constructor在组件被mounted之前调用，我们的组件继承自React.Component,constructor函数中我们在其他操作前应该先调用super(props)，否则this.props将会是undefined。</p></li><li><p>constructor初始化state的好地方。如果我们不需要初始化state，也不需要bind任何方法，那么在我们的组件中不需要实现constructor函数。</p></li><li><p>注意下面这种情况，很容易产生bug，我们通常的做法是提升state到父组件，而不是使劲的同步state和props。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    color: props.initialColor</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>componentWillMount()  </p><ul><li>此方法在mounting之前被立即调用，它在render()之前调用，因此在此方法中setState不会触发重新渲染。此方法是服务器渲染中调用的唯一的生命周期钩子，通常我们建议使用constructor()。</li></ul></li><li><p>render()</p><ul><li><p>render()方法是react组件必须的，它检查this.props和this.state并且返回一个React元素，我们也可以返回null或false，代表我们不想有任何的渲染。</p></li><li><p>render()方法应该是一个纯方法，即它不会修改组件的state，在每一次调用时返回同样的结果。它不直接和浏览器交互，如果我们想要交互，应该在componentDidMount()或者其他的生命周期函数里面。</p></li></ul></li><li><p>componentDidMount()</p><ul><li>此方法在组件被mounted之后立即被调用，初始化dom节点应该在此方法中，如果需要从远端健在数据，这里是实例化网络请求的好地方，此方法中setState会触发组件重新渲染。</li></ul></li></ul><h4 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h4><blockquote><p>props和state的改变产生更新。在重新渲染组建时，如下的方法被调用</p></blockquote><ul><li><p>componentWillReceiveProps()</p><ul><li><p>一个已经mounted的组件接收一个新的props之前componentWillReceiveProps()被调用，如果我们需要更新state来响应prop的更改，我们可以在此方法中比较this.props和nextProps并使用this.setState来更改state。</p></li><li><p>注意，即使props没有改变，React也可以调用这个方法，因此如果你只想处理改变，请确保比较当前值和下一个值。当父组件导致你的组件重新渲染时，可能会发生这种情况。</p></li><li><p>React在组件mounting期间不会调用此方法，只有在一些组件的props可能被更新的时候才会调用。调用this.setState通常不会触发componentWillReceiveProps。</p></li></ul></li><li><p>shouldComponentUpdate()</p><ul><li><p>使用此方法让React知道组件的输出是否不受当前state或props更改的影响。默认行为是在每次state更改时重新渲染组件，在大多数情况下，我们应该默认改行为。</p></li><li><p>当接收到新的props或state时，shouldComponentUpdate()在渲染之前被调用。默认返回true，对于初始渲染或使用forceUpdate()时，不调用此方法。返回false不会阻止子组件的state更改时，该子组件重新渲染。</p></li><li><p>如果shouldComponentUpdate()返回false，那么componentWillUpdate()，render()和componentDidUpdate()将不会被调用。在将来，React可能将shouldComponentUpdate()作为提示而不是strict指令，返回仍然可能导致组件重新渲染。</p></li></ul></li><li><p>componentWillUpdate()</p><ul><li><p>当接收新的props或state时，componentWillUpdate()在组件渲染之前被立即调用。使用此函数作为在更新发生之前执行准备的机会。初始渲染不会调用此方法。</p></li><li><p>注意：这里不能调用this.setState()(如果调用会怎么样？好奇心很重呀，试了一下，会产生死循环，一直更新。</p></li><li><p>如果我们需要更新state以响应props的更改，我们应该使用componentWillReceiveProps()</p></li></ul></li><li><p>render()</p><ul><li><p>render()方法是react组件必须的，它检查this.props和this.state并且返回一个React元素，我们也可以返回null或false，代表我们不想有任何的渲染。</p></li><li><p>render()方法应该是一个纯方法，即它不会修改组件的state，在每一次调用时返回同样的结果。它不直接和浏览器交互，如果我们想要交互，应该在componentDidMount()或者其他的生命周期函数里面。</p></li></ul></li><li><p>componentDidUpdate()</p><ul><li><p>此函数在更新后立即被调用。初始渲染不调用此方法。</p></li><li><p>当组件已经更新时，使用此操作作为DOM操作的机会。这也是一个好的地方做网络请求，只要你比较当前的props和以前的props(例如：如果props没有改变，可能不需要网络请求)。</p></li></ul></li></ul><h4 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h4><blockquote><p>当从dom中移除组件时，这个方法会被调用</p></blockquote><ul><li><p>componentWillUnmount()</p><ul><li>此函数在组件被卸载和销毁之前被立即调用。在此方法中执行一些必要的清理。例如清除计时器，取消网络请求或者清理在componentDidMount中创建的任何DOM元素。</li></ul></li></ul><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!--react的核心库--&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script crossorigin src="https:/</span><span class="regexp">/unpkg.com/</span>react@<span class="number">16</span>/umd/react.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;!--react的与dom相关的一些功能--&gt;</span></span><br><span class="line"><span class="string">        &lt;script crossorigin src="</span>https:<span class="comment">//unpkg.com/react-dom@16/umd/react-dom.development.js"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=<span class="string">"https://unpkg.com/babel-standalone@6.15.0/babel.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="root"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个类组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LifeCycle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. mount阶段</span></span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;<span class="attr">name</span>: <span class="string">'wlt'</span>&#125;;</span><br><span class="line">            <span class="keyword">this</span>.changeState = <span class="keyword">this</span>.changeState.bind(<span class="keyword">this</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'constructor'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        componentWillMount() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentWillMount'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div className=<span class="string">"life-cycle-bg"</span>&gt;</span><br><span class="line">                    &lt;p&gt;Hello &#123;<span class="keyword">this</span>.props.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;Hello &#123;this.state.name&#125;&lt;/</span>p&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.changeState&#125;&gt;改变lifeCycle的state&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentDidMount'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. update阶段</span></span><br><span class="line">        componentWillReceiveProps(nextProps) &#123; <span class="comment">// 只作用于属性的变化,不作用于状态的变化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentWillReceiveProps'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ---- render会重新执行</span></span><br><span class="line">    </span><br><span class="line">        componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Unmount阶段</span></span><br><span class="line">        componentWillUnmount(prevProps, prevState) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentWillUnmount'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        changeState() &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>: <span class="string">'sxm'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ParentLifeCycle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                value: <span class="string">'World'</span>,</span><br><span class="line">                destroyed: <span class="literal">false</span>,</span><br><span class="line">                rerender: <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.destroyComponent = <span class="keyword">this</span>.destroyComponent.bind(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.handleRerender = <span class="keyword">this</span>.handleRerender.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        handleChange() &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">                value: prevState.value + <span class="string">' wlt'</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        handleRerender() &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">rerender</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        destroyComponent() &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">destroyed</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.state.destroyed) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div className=<span class="string">"parent-life-cycle-bg"</span>&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &lt;button onClick=&#123;<span class="keyword">this</span>.handleChange&#125;&gt;改变LifeCyle的props&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;button onClick=&#123;this.handleRerender&#125;&gt;父组件重新渲染，子组件re-render&lt;/</span>button&gt;</span><br><span class="line">                        &lt;button onClick=&#123;<span class="keyword">this</span>.destroyComponent&#125;&gt;删除组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>p&gt;</span><br><span class="line">                    &lt;LifeCycle value=&#123;<span class="keyword">this</span>.state.value&#125;/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    ReactDOM.render(</span></span><br><span class="line"><span class="regexp">        &lt;ParentLifeCycle /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">    );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="state-和-生命周期"><a href="#state-和-生命周期" class="headerlink" title="state 和 生命周期"></a>state 和 生命周期</h2><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><blockquote><p>实现一个基本的定时器功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 创建一个组件 -- 使用函数式组件</span><br><span class="line">    function Clock()&#123;</span><br><span class="line">        // 创建元素</span><br><span class="line">        const element = (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">                &lt;h2&gt;It is &#123;new Date().toLocaleTimeString()&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        // 使用render函数渲染已经创建的元素</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">            element, </span><br><span class="line">            document.getElementById(&apos;root&apos;) </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setInterval(Clock,1000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>存在的问题</strong></p><blockquote><p>完成定时器的功能,使用组件化的形式进行封装的时候,在进行组件调用的时候应该能够直接通过  <clock> 就能完成一个定时器,而不用再配合外部的js操作</clock></p></blockquote><blockquote><blockquote><p>这样做的话能够实现相关的功能,但是不利于复用</p></blockquote></blockquote><h3 id="改写"><a href="#改写" class="headerlink" title="改写"></a>改写</h3><blockquote><p>使用组件的形式封装一个计时器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    在组件挂载和卸载的时候,会执行对应的生命周期钩子函数</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    // 使用类的形式对组件进行改写之后,我们可以向类中添加一些内容</span><br><span class="line">    class Clock extends React.Component&#123; </span><br><span class="line">        </span><br><span class="line">        constructor(props)&#123;</span><br><span class="line">            // 类组件应始终使用 props 调用基础构造函数。</span><br><span class="line">            super(props)</span><br><span class="line">            // 使用状态进行改写</span><br><span class="line">            this.state = &#123;</span><br><span class="line">                date:new Date()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        // 组件挂载的生命周期钩子函数</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            console.log(&quot;组件挂载了&quot;)</span><br><span class="line">            </span><br><span class="line">            this.timer = setInterval(()=&gt;&#123;</span><br><span class="line">                // 使用this.setState() 更新本地的状态</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    date:new Date()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,1000)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 组件卸载时会执行的生命周期钩子函数</span><br><span class="line">        componentWillUnmount()&#123;</span><br><span class="line">            console.log(&quot;组件卸载了&quot;)</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        render()&#123; </span><br><span class="line">            return (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">                    &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;&lt;/h2&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            ) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        // 使用render函数渲染已经创建的组件 -----  三个组件互补影响</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;Clock&gt;&lt;/Clock&gt;</span><br><span class="line">        &lt;Clock&gt;&lt;/Clock&gt;</span><br><span class="line">        &lt;Clock&gt;&lt;/Clock&gt;</span><br><span class="line">        &lt;/div&gt;,</span><br><span class="line">            document.getElementById(&apos;root&apos;) </span><br><span class="line">        );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;state和生命周期&quot;&gt;&lt;a href=&quot;#state和生命周期&quot; class=&quot;headerlink&quot; title=&quot;state和生命周期&quot;&gt;&lt;/a&gt;state和生命周期&lt;/h1&gt;&lt;h2 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; class=&quot;he
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>组件</title>
    <link href="http://yoursite.com/2018/05/08/react/04-%E7%BB%84%E4%BB%B6%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/05/08/react/04-组件基本使用/</id>
    <published>2018-05-08T00:22:57.901Z</published>
    <updated>2018-05-08T00:39:42.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h2><blockquote><p>组成的部件</p></blockquote><p><strong>组件使你可以将 UI 划分为一个一个独立，可复用的小部件，并可以对每个部件进行单独的设计。</strong></p><ul><li>从定义上来说， 组件就像JavaScript的函数。封装内容, 达到重用的目的. </li><li>组件可以接收任意输入(称为”props”)， 并返回 React 元素，用以描述屏幕显示内容</li></ul><h2 id="为什么使用组件"><a href="#为什么使用组件" class="headerlink" title="为什么使用组件"></a>为什么使用组件</h2><ul><li><p>封装</p></li><li><p>重用</p></li></ul><h2 id="如何使用组件"><a href="#如何使用组件" class="headerlink" title="如何使用组件"></a>如何使用组件</h2><blockquote><p>在使用组件的时候, <strong>推荐使用类组件的形式</strong></p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>组件的名称  首字母必须大写</p></li><li><p>一个组件只能有一个根元素</p></li></ol><h3 id="两种组件创建的方式"><a href="#两种组件创建的方式" class="headerlink" title="两种组件创建的方式"></a>两种组件创建的方式</h3><h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    组件：组成的部件,可以接受任何props输入,并返回元素</span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">    // 1. 创建一个基本的组件</span><br><span class="line">    function Welcome()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;哈哈&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 2. 组件的使用</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Welcome&gt;&lt;/Welcome&gt;, </span><br><span class="line">        document.getElementById(&apos;root&apos;) </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">            &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">            &lt;!--react的核心库--&gt;</span><br><span class="line">            &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">            &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">            &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">            &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">            &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        </span><br><span class="line">        组件：组成的部件,可以接受任何props输入,并返回元素</span><br><span class="line">        </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        // 1. 创建一个基本的组件</span><br><span class="line">        class Welcome extends React.Component&#123;</span><br><span class="line">            render ()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;p&gt;哈哈&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        // 2. 组件的使用</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">            &lt;Welcome&gt;&lt;/Welcome&gt;, </span><br><span class="line">            document.getElementById(&apos;root&apos;) </span><br><span class="line">        );</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="类组件的事件绑定"><a href="#类组件的事件绑定" class="headerlink" title="类组件的事件绑定"></a>类组件的事件绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    class Toggle extends React.Component &#123;</span><br><span class="line">        constructor(props) &#123;</span><br><span class="line">            super(props);</span><br><span class="line">        </span><br><span class="line">            // 设置状态</span><br><span class="line">            this.state = &#123;isToggleOn: true&#125;;</span><br><span class="line">    </span><br><span class="line">            // 这个绑定是必要的，使`this`在回调中起作用</span><br><span class="line">            this.handleClick = this.handleClick.bind(this);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            this.setState(prevState =&gt; (&#123;</span><br><span class="line">                isToggleOn: !prevState.isToggleOn</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">                    &#123;this.state.isToggleOn ? &apos;ON&apos; : &apos;OFF&apos;&#125;</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ReactDOM.render(</span><br><span class="line">      &lt;Toggle /&gt;,</span><br><span class="line">      document.getElementById(&apos;root&apos;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;h2 id=&quot;什么是组件&quot;&gt;&lt;a href=&quot;#什么是组件&quot; class=&quot;headerlink&quot; title=&quot;什么是组件&quot;&gt;&lt;/a&gt;什么是组
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>jsx语法</title>
    <link href="http://yoursite.com/2018/05/08/react/02-jsx%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/08/react/02-jsx语法/</id>
    <published>2018-05-08T00:22:57.870Z</published>
    <updated>2018-05-08T00:39:25.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsx语法"><a href="#jsx语法" class="headerlink" title="jsx语法"></a>jsx语法</h1><h2 id="什么是jsx语法"><a href="#什么是jsx语法" class="headerlink" title="什么是jsx语法"></a>什么是jsx语法</h2><h3 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h3><blockquote><p>react使用jsx代替常规的javascript</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    1. 一个很像是XML的js语法扩展</span><br><span class="line">    </span><br><span class="line">    2. 编写模板更加快速-简单</span><br><span class="line">    </span><br><span class="line">    3. 它是类型安全的,在编译的过程中就能发现错误</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 使用规则</span><br><span class="line"></span><br><span class="line">&gt; react jsx的使用</span><br></pre></td></tr></table></figure><pre><code>1. 可以创建一个独立的js文件来使用,通过script标签来引入2. 使用多个标签,使用div包裹3. 支持表达式, js表达式可以直接被解析4. 不支持if else 可以使用三元表达式代替              相当于是vue中 的 v-if5. 直接解析数组                             相当于是vue中的v-for6. 标签中注释使用花括号包裹,区别于原先的js注释 , 否则的话 , 注释会 直接解析成文本7. 推荐使用内联样式   直接进行样式的绑定        相当于是vue中的  v-bind</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 为什么使用jsx语法</span><br><span class="line"></span><br><span class="line">&gt; jsx语法允许html和js的混写, 使页面数据和样式的操作变得钢架简单</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**核心**</span><br><span class="line"></span><br><span class="line">- 遇到 `HTML` 标签（以 `&lt;` 开头），就用  `HTML` 规则解析；</span><br><span class="line">- 遇到 以 `&#123;` 开头的结构，就用 `js` 规则解析；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 如何使用jsx语法</span><br><span class="line"></span><br><span class="line">### 标签渲染</span><br><span class="line"></span><br><span class="line">**遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；**</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><br><br>    <head><br>        <meta charset="UTF-8"><br>        <title>Hello World</title><br>        <!--react的核心库--><br>        <script src="https://unpkg.com/react@16/umd/react.development.js"></script><br>        <!--react的与dom相关的一些功能--><br>        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script><br>        <!--将浏览器不支持的jsx语法转化为js语法--><br>        <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script><br>    </head><br><br>    <body><br>        <div id="root"></div><br>        <!--                <script> 标签的 type 属性为 text/babel 。                                     这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。                                     凡是使用 JSX 的地方，都要加上 type="text/babel" 。        --><br>        <script type="text/babel"><br><br>            // ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br>            ReactDOM.render(<br>            <h1>Hello, world!</h1>,<br><br>            document.getElementById(‘root’) );<br><br>        </script><br>    </body><br><br></html><br><!---><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### js渲染  &#123;&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">**遇到代码块（以 &#123; 开头），就用 JavaScript 规则解析。上面代码的运行结果如下。**</span><br><span class="line"></span><br><span class="line">&gt; 简单示例</span><br><span class="line"></span><br><span class="line">&gt;&gt; 如果&#123;&#125; 渲染的变量是一个数组,jsx语法会解析里面的所有成员并添加到模板</span><br></pre></td></tr></table></figure><br><br>&lt;!DOCTYPE html&gt;<br><html><br><br>    <head><br>        <meta charset="UTF-8" /><br>        <title>Hello World</title><br>        <!--react的核心库--><br>        <script src="https://unpkg.com/react@16/umd/react.development.js"></script><br>        <!--提供react的dom操作的相关功能--><br>        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script><br>        <!--将浏览器不支持的jsx语法转化为js语法--><br>        <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script><br>    <br><br>    <body><br>        <div id="example"></div><br><br>        <!--jsx语法   支持标签和js的混写--><br>        <script type="text/babel"><br><br>            // 如果{} 渲染的变量是一个数组,jsx语法会解析里面的所有成员并添加到模板<br>            var arr = [<br>                <h1>Hello world!</h1>,<br>                <h2>React is awesome</h2> ];<br><br>            ReactDOM.render(<br>                <div>{arr}</div>,<br>                document.getElementById(‘example’)<br>            )<br><br>        </script><br>    </body><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 代码注释</span><br><span class="line"></span><br><span class="line">&gt; 在jsx语法中, 标签中写代码注释需要放到&#123;&#125; 中</span><br></pre></td></tr></table></figure><br><br>&lt;!DOCTYPE html&gt;<br><html><br><br>    <head><br>        <meta charset="UTF-8"><br>        <title>Hello World</title><br>        <!--react的核心库--><br>        <script src="https://unpkg.com/react@16/umd/react.development.js"></script><br>        <!--react的与dom相关的一些功能--><br>        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script><br>        <!--将浏览器不支持的jsx语法转化为js语法--><br>        <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script><br>    </head><br><br>    <body><br>        <div id="root"></div><br>        <script type="text/babel"><br><br>            // ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br>            ReactDOM.render(<br><br>                /<em>注释</em>/<br>                <div><br>                    Hello, world!<br>                    {/<em>注释要加上{}  要不然直接解析成文本</em>/}<br>                </div>,<br>                document.getElementById(‘root’) );<br><br>        </script><br>    </body><br><br></html><br><!---><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 样式操作  v-bind :</span><br><span class="line"></span><br><span class="line">&gt; 推荐使用内联样式 , 进行样式操作做的话 , 将样式操作转化成简单 的数据操作</span><br></pre></td></tr></table></figure><br><br>&lt;!DOCTYPE html&gt;<br><html><br><br>    <head><br>        <meta charset="UTF-8" /><br>        <title>Hello World</title><br>        <script src="https://unpkg.com/react@16/umd/react.development.js"></script><br>        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script><br>        <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script><br>    </head><br><br>    <body><br>        <div id="root"></div><br>        <script type="text/babel">{<br><br>            var myStyle = {<br>                fontSize : 20,<br>                color:”red”<br>            }<br><br>            ReactDOM.render(<br>                /<em>注释</em>/<br>                <h1 style={myStyle}>Hello, world!</h1>,<br>                document.getElementById(‘root’)<br>            );<br><br>        }</script><br>    </body><br><br></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### js表达式</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><br><br>    <head><br>        <meta charset="UTF-8" /><br>        <title>Hello React!</title><br>        <!--react的核心库--><br>        <script src="https://cdn.bootcss.com/react/15.4.2/react.min.js"></script><br>        <!--提供dom相关的操作--><br>        <script src="https://cdn.bootcss.com/react/15.4.2/react-dom.min.js"></script><br>        <!--babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码--><br>        <script src="https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js"></script><br>    <br><br>    <body><br>        <div id="example"></div><br><br>    </body><br><br><script type="text/babel">    var i=1;    ReactDOM.render(    <div>        {/*如果是多个标签,推荐使用div包裹*/}        <h1>react jsx的使用</h1>         {/*支持使用js表达式*/}        <h1>{1+1}</h1>         {/*不能使用if else 语句,可以使用三元表达式代替*/}        <h1>{i == 1 ? 'True!' : 'False'}</h1>    </div>    , document.getElementById('example') );</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 属性值的绑定  v-bind :</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Hello World&lt;/title&gt;    &lt;!--react的核心库--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></html><p></p><script type="text/babel">    var obj = {        id:1    }    // 属性值的绑定    ReactDOM.render(        <p id={obj.id}>test</p>,        document.getElementById("root")    )</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 注意事项</span><br><span class="line"></span><br><span class="line">**模板部分不能有多个根节点**</span><br></pre></td></tr></table></figure><!DOCTYPE html><html>    <head>        <meta charset="UTF-8">        <title>Hello World</title>        <!--react的核心库-->        <script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script><pre><code>    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></head></html><p></p><script type="text/babel">    var obj = {        id:1,        img:"./img/01.jpg"    }    // 属性值的绑定    ReactDOM.render(        <div>            <img src={obj.img}></img>            <img src={obj.img}></img>        </div>,        document.getElementById("root")    )</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 事件处理  v-on @</span><br><span class="line"></span><br><span class="line">&gt; 在react中的事件处理和dom操作类似,但是有一点细微的区别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意事项:**</span><br></pre></td></tr></table></figure>    1. React 事件使用驼峰命名，而不是全部小写    2. 通过 JSX , 你传递一个函数作为事件处理程序，而不是一个字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### dom事件绑定</span><br></pre></td></tr></table></figure>    <!DOCTYPE html>    <html>        <head>            <meta charset="UTF-8">            <title></title>        </head>        <body>            <button onclick="fn()">click me</button>        </body>    </html>    <script type="text/javascript">        function fn(){        alert(1)    }    </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### react事件绑定</span><br></pre></td></tr></table></figure>    <!DOCTYPE html>    <html>        <head>            <meta charset="UTF-8">            <title>Hello World</title>            <!--react的核心库-->            <script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script><pre><code>        &lt;!--react的与dom相关的一些功能--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;&lt;script type=&quot;text/babel&quot;&gt;    // 创建元素    var element = (        &lt;button onClick={fn}&gt;click me&lt;/button&gt;    )    function fn(){        alert(1)    }    // 使用render渲染已创建的元素    ReactDOM.render(        element,         document.getElementById(&apos;root&apos;)     );&lt;/script&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### react的html和js混写</span><br></pre></td></tr></table></figure><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot; /&gt;        &lt;title&gt;Hello World&lt;/title&gt;        &lt;!--react的核心库--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;        &lt;!--react的与dom相关的一些功能--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;&lt;script type=&quot;text/babel&quot;&gt;    // 创建元素    var element = (        &lt;button onClick={fn}&gt;click me&lt;/button&gt;    )    function fn(){        alert(1)    }    // 使用render渲染已创建的元素    ReactDOM.render(        element,         document.getElementById(&apos;root&apos;) );&lt;/script&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 事件参数传递</span><br></pre></td></tr></table></figure><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot; /&gt;        &lt;title&gt;Hello World&lt;/title&gt;        &lt;!--react的核心库--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;        &lt;!--react的与dom相关的一些功能--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;        &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;&lt;script type=&quot;text/babel&quot;&gt;    // 创建元素 绑定事件, 添加事件处理函数    var element = (        &lt;button onClick={            function(e){                console.log(e.target)            }        }&gt;click me&lt;/button&gt;    )    // 使用render渲染已创建的元素    ReactDOM.render(        element,         document.getElementById(&apos;root&apos;)     );&lt;/script&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 条件渲染  v-if</span><br><span class="line"></span><br><span class="line">&gt; 在jsx语法中,使用三元表达式可以实现这一项功能</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Hello World&lt;/title&gt;    &lt;!--react的核心库--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></html><p></p><script type="text/babel">    ReactDOM.render(        <div>            {                Math.random()*10>5?<p>这是内容1</p>:<p>这是内容2</p>            }        </div>,        document.getElementById('root')     );</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 列表渲染  v-for</span><br><span class="line"></span><br><span class="line">&gt; 在jsx语法中, 使用map函数完成这一项功能</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Hello World&lt;/title&gt;    &lt;!--react的核心库--&gt;    &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!--提供react的dom操作的相关功能--&gt;    &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;    &lt;!--jsx语法   支持标签和js的混写--&gt;    &lt;script type=&quot;text/babel&quot;&gt;        var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];         ReactDOM.render(            &lt;div&gt;                {                    names.map(function(ele,index,arr){                        /*Each child in an array or iterator should have a unique &quot;key&quot; prop.*/                        return &lt;h1&gt;{ele}&lt;/h1&gt;                    })                }            &lt;/div&gt;, document.getElementById(&apos;example&apos;)         )    &lt;/script&gt;&lt;/body&gt;</code></pre><p></p></html><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## jsx深入理解</span><br><span class="line"></span><br><span class="line">### jsx语法的基本实现</span><br></pre></td></tr></table></figure><p></p><p>&lt;!DOCTYPE html&gt;</p><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Hello World&lt;/title&gt;    &lt;!--react的核心库--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></html><p></p><script type="text/babel">    //内联样式    var myStyle = {        color:"red"    }    // 使用jsx语法创建模板    const element1 = (        <h1 className="greeting" style={myStyle}>            Hello, world!        </h1>    );    ReactDOM.render(        element1,         document.getElementById('root')     );</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### React.createElement()</span><br><span class="line"></span><br><span class="line">**从本质上讲，JSX 只是为 React.createElement(component, props, ...children) 函数提供的语法糖**</span><br></pre></td></tr></table></figure><!DOCTYPE html><html>    <head>        <meta charset="UTF-8">        <title>Hello World</title>        <!--react的核心库-->        <script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script><pre><code>    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></head></html><p></p><script type="text/babel">    // 使用对象表示 法    // 从本质上讲，JSX 只是为 React.createElement(component, props, ...children) 函数提供的语法糖    const element2 = React.createElement(        'div',        {className:"greeting"},        '哈哈'    )    // 类似于这样一种简化的结构    const element = {        type: 'h1',        props: {            className: 'greeting',            children: 'Hello, world'        }    };    ReactDOM.render(        element2,         document.getElementById('root')     );</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## react数据变化检测--元素渲染</span><br><span class="line"></span><br><span class="line">&gt; 元素(Elements)是 React 应用中最小的构建部件（或者说构建块，building blocks）。</span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; 元素用于描述你在页面上看到的内容</span><br><span class="line"></span><br><span class="line">### 页面的基本渲染</span><br></pre></td></tr></table></figure><!DOCTYPE html><html>    <head>        <meta charset="UTF-8">        <title>Hello World</title>        <!--react的核心库-->        <script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script><pre><code>    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></head></html><p></p><script type="text/babel">    // 创建元素    var element = <h1>Hello, world!</h1>    //使用render 渲染函数渲染已创建的元素到指定的位置    ReactDOM.render(        element,         document.getElementById('root')     );</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 元素的更新</span><br><span class="line"></span><br><span class="line">**在React中,元素是不能发生突变的,要进行元素的,一旦创建了元素,就不能修改其子元素或者是相关的属性**</span><br><span class="line"></span><br><span class="line">**元素更新的措施是: 创建一个新的元素并使用render函数重新渲染**</span><br></pre></td></tr></table></figure><!DOCTYPE html><html>    <head>        <meta charset="UTF-8">        <title>Hello World</title>        <!--react的核心库-->        <script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script><pre><code>    &lt;!--react的与dom相关的一些功能--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;    &lt;script crossorigin src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p></p></head></html><p></p><script type="text/babel">function tick() {  // 创建元素    const element = (    <div>      <h1>Hello, world!</h1>      <h2>It is {new Date().toLocaleTimeString()}.</h2>    </div>  );  //使用render函数进行页面的渲染  ReactDOM.render(    element,    document.getElementById('root')  );}setInterval(tick, 1000);</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 页面变化检测与更新的实现原理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- react维护两个状态——现在的页面DOM、即将要渲染的页面DOM（数据) 两部分进行对比：自动渲染不同部分。</span><br><span class="line"></span><br><span class="line">- 每次发生事件、动画，都会和之前的状态进行对比。</span><br><span class="line">- 相同：不再次进行渲染。</span><br><span class="line">- 不同：进行渲染界面。</span><br><span class="line">- 适合大量数据操作的框架——react。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参考链接          https://zhuanlan.zhihu.com/purerender/2034637</span><br></pre></td></tr></table></figure><pre><code>在react中,当元素发生变化的时候,并不会进行所有的元素的更新,在react内部,执行了一个diff 算法,只对当前变化的节点进行检测更新,而不是更新所有的节点在react中,使用diff + virtual dom 结合的方式,实现元素的变化检测与更新</code></pre><p><code>`</code></p></head></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jsx语法&quot;&gt;&lt;a href=&quot;#jsx语法&quot; class=&quot;headerlink&quot; title=&quot;jsx语法&quot;&gt;&lt;/a&gt;jsx语法&lt;/h1&gt;&lt;h2 id=&quot;什么是jsx语法&quot;&gt;&lt;a href=&quot;#什么是jsx语法&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react入门</title>
    <link href="http://yoursite.com/2018/05/08/react/01-react%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/05/08/react/01-react入门/</id>
    <published>2018-05-08T00:22:57.839Z</published>
    <updated>2018-05-08T00:42:47.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react入门"><a href="#react入门" class="headerlink" title="react入门"></a>react入门</h1><p>– 案例驱动—示例</p><h2 id="react是什么"><a href="#react是什么" class="headerlink" title="react是什么"></a>react是什么</h2><blockquote><p>React 是一个用于构建用户界面的 JAVASCRIPT 库。</p></blockquote><blockquote><blockquote><p>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p></blockquote></blockquote><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站</p></blockquote><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native </span><br><span class="line">项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。</span><br><span class="line"></span><br><span class="line">如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机</span><br></pre></td></tr></table></figure><h2 id="为什么使用react"><a href="#为什么使用react" class="headerlink" title="为什么使用react"></a>为什么使用react</h2><h3 id="react的特点"><a href="#react的特点" class="headerlink" title="react的特点"></a>react的特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.声明式设计 −React采用声明范式，可以轻松描述应用。</span><br><span class="line">2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</span><br><span class="line">3.灵活 −React可以与已知的库或框架很好地配合。</span><br><span class="line">4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</span><br><span class="line">5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</span><br><span class="line">6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</span><br></pre></td></tr></table></figure><p><strong>以下描述仅仅是个人理解</strong> </p><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在React中，数据的流向是单向的——从父节点传递到子节点，因为组件是简单而且易于把握的，他们只需从父节点获取props渲染即可，如果顶层组件的某个prop改变饿了，React会递归的向下便利整棵组件树，重新渲染所有使用这个属性的组件。</span><br></pre></td></tr></table></figure><h4 id="声明式设计"><a href="#声明式设计" class="headerlink" title="声明式设计"></a>声明式设计</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 声明式</span><br><span class="line">const element1 = React.createElement(</span><br><span class="line">    &apos;div&apos;,</span><br><span class="line">    &#123;className:&quot;greeting&quot;&#125;,</span><br><span class="line">    &apos;哈哈&apos;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 过程式</span><br><span class="line">element2 = document.createElement &apos;div&apos;</span><br><span class="line">element2.className = &apos;greeting&apos;</span><br><span class="line">element2.innerHTML = &apos;哈哈&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 类似于这样一种简化的结构</span><br><span class="line">const element = &#123;</span><br><span class="line">    type: &apos;h1&apos;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        className: &apos;greeting&apos;,</span><br><span class="line">        children: &apos;Hello, world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element1, </span><br><span class="line">    document.getElementById(&apos;root&apos;) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><ul><li>两大特性<ul><li>封装</li><li>重用</li></ul></li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h4><blockquote><p>虚拟dom 用于性能的提升</p></blockquote><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><blockquote><p>组件化 , 实现代码的重用</p></blockquote><h2 id="如何使用react"><a href="#如何使用react" class="headerlink" title="如何使用react"></a>如何使用react</h2><blockquote><p>hello world  示例</p></blockquote><h3 id="hello-world示例"><a href="#hello-world示例" class="headerlink" title="hello world示例"></a>hello world示例</h3><h4 id="js核心库"><a href="#js核心库" class="headerlink" title="js核心库"></a>js核心库</h4><blockquote><p>react的使用离不开三个核心的库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 新版本</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 久版本</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="hello-world示例-1"><a href="#hello-world示例-1" class="headerlink" title="hello world示例"></a>hello world示例</h4><blockquote><p>最小化的 HTML 模板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;!--    </span><br><span class="line">            &lt;script&gt; 标签的 type 属性为 text/babel 。</span><br><span class="line">                                     这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。</span><br><span class="line">                                     凡是使用 JSX 的地方，都要加上 type=&quot;text/babel&quot; 。</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">            // ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</span><br><span class="line">            ReactDOM.render(</span><br><span class="line">            &lt;h1&gt;Hello, world!&lt;/h1&gt;, </span><br><span class="line">            </span><br><span class="line">            document.getElementById(&apos;root&apos;) );</span><br><span class="line"></span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">-&gt;</span><br></pre></td></tr></table></figure><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><strong>React 和 ReactDOM 的UMD版本可通过 CDN 获得。</strong></p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><blockquote><p>相比开发环境进行了压缩和优化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a>crossorigin</h4><p><strong>如果你从 CDN 引用 React，我们建议保留 crossorigin 属性设置：</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react入门&quot;&gt;&lt;a href=&quot;#react入门&quot; class=&quot;headerlink&quot; title=&quot;react入门&quot;&gt;&lt;/a&gt;react入门&lt;/h1&gt;&lt;p&gt;– 案例驱动—示例&lt;/p&gt;
&lt;h2 id=&quot;react是什么&quot;&gt;&lt;a href=&quot;#react是什么
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react优质学习资源</title>
    <link href="http://yoursite.com/2018/05/08/react/00-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%82%E8%80%83/"/>
    <id>http://yoursite.com/2018/05/08/react/00-学习资料参考/</id>
    <published>2018-05-08T00:22:57.823Z</published>
    <updated>2018-05-08T00:38:56.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react优质学习资源"><a href="#react优质学习资源" class="headerlink" title="react优质学习资源"></a>react优质学习资源</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>fetch  CDN    <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</a><br>fetch  CDN    <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</a></p><h3 id="react基本知识点"><a href="#react基本知识点" class="headerlink" title="react基本知识点"></a>react基本知识点</h3><p>react中文文档  <a href="http://www.css88.com/react/docs/portals.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/portals.html</a></p><p>react英文文档  <a href="https://reactjs.org/docs/react-api.html" target="_blank" rel="noopener">https://reactjs.org/docs/react-api.html</a></p><p>react中文网  <a href="http://www.reactchina.cn/" target="_blank" rel="noopener">http://www.reactchina.cn/</a></p><p>react生命周期  <a href="https://facebook.github.io/react/docs/react-component.html" target="_blank" rel="noopener">https://facebook.github.io/react/docs/react-component.html</a></p><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>redux中文文档  <a href="http://www.redux.org.cn/docs/react-redux/api.html" target="_blank" rel="noopener">http://www.redux.org.cn/docs/react-redux/api.html</a></p><h3 id="react路由"><a href="#react路由" class="headerlink" title="react路由"></a>react路由</h3><p>react路由的官方文档  <a href="https://react-guide.github.io/react-router-cn/docs/API.html" target="_blank" rel="noopener">https://react-guide.github.io/react-router-cn/docs/API.html</a></p><p>react web <a href="http://reacttraining.cn" target="_blank" rel="noopener">http://reacttraining.cn</a></p><p>react v4 中文文档  <a href="http://reacttraining.cn/web/guides/quick-start" target="_blank" rel="noopener">http://reacttraining.cn/web/guides/quick-start</a></p><p>react-router <a href="http://reacttraining.cn/web/example/basic" target="_blank" rel="noopener">http://reacttraining.cn/web/example/basic</a></p><h2 id="文档博客书籍类"><a href="#文档博客书籍类" class="headerlink" title="文档博客书籍类"></a>文档博客书籍类</h2><p>阮一峰 也许dom不是答案 <a href="http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html</a></p><p>react入门实例教程 <a href="http://www.ruanyifeng.com/blog/2015/03/react" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/03/react</a></p><h2 id="开源项目类"><a href="#开源项目类" class="headerlink" title="开源项目类"></a>开源项目类</h2><p>基于webpack、react、react-router 4.0、antd-m的App项目 <a href="https://github.com/liwudi/online-educationApp" target="_blank" rel="noopener">https://github.com/liwudi/online-educationApp</a></p><p>react-native  <a href="https://github.com/liwudi/qingqi-auto-owner-app.git" target="_blank" rel="noopener">https://github.com/liwudi/qingqi-auto-owner-app.git</a></p><p>react  <a href="https://github.com/liwudi/online-educationApp.git" target="_blank" rel="noopener">https://github.com/liwudi/online-educationApp.git</a></p><h2 id="视频类"><a href="#视频类" class="headerlink" title="视频类"></a>视频类</h2><p>大众点评项目实战 <a href="https://coding.imooc.com/class/package/99.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/package/99.html#Anchor</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react优质学习资源&quot;&gt;&lt;a href=&quot;#react优质学习资源&quot; class=&quot;headerlink&quot; title=&quot;react优质学习资源&quot;&gt;&lt;/a&gt;react优质学习资源&lt;/h1&gt;&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/08/hello-world/"/>
    <id>http://yoursite.com/2018/05/08/hello-world/</id>
    <published>2018-05-07T22:30:03.040Z</published>
    <updated>2018-05-07T22:30:03.042Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
