<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-04T09:00:29.813Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/08/test1/hello-world/"/>
    <id>http://yoursite.com/2018/05/08/test1/hello-world/</id>
    <published>2018-05-07T22:42:55.186Z</published>
    <updated>2018-05-04T09:00:29.813Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
    
  </entry>
  
  <entry>
    <title>react入门2</title>
    <link href="http://yoursite.com/2018/05/08/test1/02-react%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/05/08/test1/02-react开发环境搭建/</id>
    <published>2018-05-07T22:42:55.179Z</published>
    <updated>2018-05-04T11:10:50.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="react开发环境搭建"><a href="#react开发环境搭建" class="headerlink" title="react开发环境搭建"></a>react开发环境搭建</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>在页面中使用引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--react的核心库--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="基本开发环境搭建"><a href="#基本开发环境搭建" class="headerlink" title="基本开发环境搭建"></a>基本开发环境搭建</h3><blockquote><p>使用 create-react-app 快速构建 React 开发环境</p></blockquote><h4 id="安装项目模板"><a href="#安装项目模板" class="headerlink" title="安装项目模板"></a>安装项目模板</h4><blockquote><p>基于webpack快速搭建开发环境</p></blockquote><p><strong>1.全局安装开发环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p><strong>2.创建react项目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure><p><strong>3.切换目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line">辅助cmd命令: </span><br><span class="line">        mkdir</span><br><span class="line">        del</span><br><span class="line">        rmdir</span><br><span class="line">        tree</span><br></pre></td></tr></table></figure><p><strong>4.启动应用程序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="目录结构解析"><a href="#目录结构解析" class="headerlink" title="目录结构解析"></a>目录结构解析</h4><blockquote><p>使用 tree /f &gt; tree.txt 命令生成项目目录结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─ .gitignore</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  </span><br><span class="line">├─public</span><br><span class="line">│      favicon.ico</span><br><span class="line">│      index.html</span><br><span class="line">│      manifest.json</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">        App.css</span><br><span class="line">        App.js</span><br><span class="line">        App.test.js</span><br><span class="line">        index.css</span><br><span class="line">        index.js</span><br><span class="line">        logo.svg</span><br><span class="line">        registerServiceWorker.js</span><br></pre></td></tr></table></figure><h3 id="搭建-webpack-React-开发环境"><a href="#搭建-webpack-React-开发环境" class="headerlink" title="搭建 webpack + React 开发环境"></a>搭建 webpack + React 开发环境</h3><p>在这里,使用webpack搭建开发环境,官网参考  <a href="https://webpack.github.io/" target="_blank" rel="noopener">https://webpack.github.io/</a></p><h4 id="初始化-npm-环境并安装插件"><a href="#初始化-npm-环境并安装插件" class="headerlink" title="初始化 npm 环境并安装插件"></a>初始化 npm 环境并安装插件</h4><p>当前的 web 前端开发，基本使用 npm 管理第三方依赖（插件）</p><h5 id="初始化-npm-环境"><a href="#初始化-npm-环境" class="headerlink" title="初始化 npm 环境"></a>初始化 npm 环境</h5><ul><li><code>使用npm init 或者是 npm init -y命令初始化创建package.json文件</code></li></ul><p>首先保证有 node 和 npm 环境，运行<code>node -v</code>和<code>npm -v</code>查看</p><p>进入项目目录，运行<code>npm init</code>按照步骤填写最终生成<code>package.json</code>文件，所有使用 npm 做依赖管理的项目，根目录下都会有一个这个文件，该文件描述了项目的基本信息以及一些第三方依赖项（插件）。详细的使用说明可查阅<a href="https://docs.npmjs.com/" target="_blank" rel="noopener">官网文档</a>，不过是英文的。</p><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><ul><li><p>运行<code>npm install webpack webpack-dev-server --save-dev</code>安装webpack环境</p></li><li><p>运行<code>npm i react react-dom --save</code>安装项目核心依赖</p></li></ul><p>已知我们将使用 webpack 作为构建工具，那么就需要安装相应插件，运行 <code>npm install webpack webpack-dev-server --save-dev</code> 来安装两个插件。</p><p>又已知我们将使用 React ，也需要安装相应插件，运行 <code>npm i react react-dom --save</code>来安装两个插件。其中<code>i</code>是<code>install</code>的简写形式。</p><p>安装完成之后，查看<code>package.json</code>可看到多了<code>devDependencies</code>和<code>dependencies</code>两项，根目录也多了一个<code>node_modules</code>文件夹。</p><h5 id="save-和-save-dev-的区别"><a href="#save-和-save-dev-的区别" class="headerlink" title="--save 和 --save-dev 的区别"></a><code>--save</code> 和 <code>--save-dev</code> 的区别</h5><p><code>npm i</code>时使用<code>--save</code>和<code>--save-dev</code>，可分别将依赖（插件）记录到<code>package.json</code>中的<code>dependencies</code>和<code>devDependencies</code>下面。</p><p><code>dependencies</code>下记录的是项目在运行时必须依赖的插件，常见的例如<code>react</code> <code>jquery</code>等，即及时项目打包好了、上线了，这些也是需要用的，否则程序无法正常执行。</p><p><code>devDependencies</code>下记录的是项目在开发过程中使用的插件，例如这里我们开发过程中需要使用<code>webpack</code>打包，而我在工作中使用<code>fis3</code>打包，但是一旦项目打包发布、上线了之后，<code>webpack</code>和<code>fis3</code>就都没有用了，可卸磨杀驴。</p><p>延伸一下，我们的项目有<code>package.json</code>，其他我们用的项目如<code>webpack</code>也有<code>package.json</code>，见<code>./node_modules/webpack/package.json</code>，其中也有<code>devDependencies</code>和<code>dependencies</code>。当我们使用<code>npm i webpack</code>时，<code>./node_modules/webpack/package.json</code>中的<code>dependencies</code>会被 npm 安装上，而<code>devDependencies</code>也没必要安装。</p><h4 id="配置-webpack-config-js"><a href="#配置-webpack-config-js" class="headerlink" title="配置 webpack.config.js"></a>配置 webpack.config.js</h4><p>为了提高学习效率，webpack 最最基础的用法，就不再挨个演示了（推荐一个非常好的<a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="noopener">入门文章</a>，以及<a href="https://github.com/frontendmap/frontendmap/blob/master/source-env/build/pack.md" target="_blank" rel="noopener">更多资料</a>）这里我们把项目中的<code>webpack.config.js</code>这个配置文件详细的讲解一下，过程中也会照顾 0 基础的同学。</p><h5 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h5><p>webpack.config.js 就是一个普通的 js 文件，符合 commonJS 规范。最后输出一个对象，即<code>module.exports = {...}</code></p><h5 id="输入-amp-输出"><a href="#输入-amp-输出" class="headerlink" title="输入 &amp; 输出"></a>输入 &amp; 输出</h5><p>这个比较基础，不过需要新建<code>./app/index.jsx</code>作为入口文件，目前项目中只有这一个入口文件。不过 webpack 支持多个入口文件，可查阅文档。</p><p>输出就是一个<code>bundle.js</code>，js 和 css 都在里面，不过只有在开发环境下才用，发布代码的时候，肯定不能只有这么一个文件，接下来会讲到。</p><h5 id="module"><a href="#module" class="headerlink" title="module"></a>module</h5><p>针对不同类型的文件，使用不同的<code>loader</code>，当然使用之前要安装，例如<code>npm i style-loader css-loader --save-dev</code>。该项目代码中，我们用到的文件格式有：js/jsx 代码、css/less 代码、图片、字体文件。</p><p>less 是 css 的语法糖，可以更高效低冗余的写 css，不熟悉的朋友可去<a href="http://lesscss.cn/" target="_blank" rel="noopener">官网</a>看看，非常简单。</p><p>在加载 css/less 时用到了<code>postcss</code>，主要使用<code>autoprefixer</code>功能，帮助自动加 css3 的浏览器前缀，非常好用。</p><p>编译 es6 和 jsx 语法时，用到家喻户晓的<code>babel</code>，另外还需增加一个<code>.babelrc</code>的配置文件。</p><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h5><p>使用 html 模板（需要<code>npm i html-webpack-plugin --save-dev</code>），这样可以将输出的文件名（如<code>./bundle.js</code>）自动注入到 html 中，不用我们自己手写。手写的话，一旦修改就需要改两个地方。</p><p>使用热加载和自动打开浏览器插件</p><h5 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h5><p>对 webpack-dev-server 的配置</p><h5 id="npm-start"><a href="#npm-start" class="headerlink" title="npm start"></a>npm start</h5><p>在 package.json 中，输入以下代码，将这一串命令封装为<code>npm start</code>，这样就可以运行项目代码了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "NODE_ENV=dev webpack-dev-server --progress --colors"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中<code>NODE_ENV=dev</code>代表当前是开发环境下，这里的<code>&quot;dev&quot;</code>可被 js 代码中的<code>process.env.NODE_ENV</code>得到并做一些其他处理。</p><h5 id="定义环境全局变量"><a href="#定义环境全局变量" class="headerlink" title="定义环境全局变量"></a>定义环境全局变量</h5><p>以下定义，可使得代码通过<code>__DEV__</code>得到当前是不是开发模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  __DEV__: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse((process.env.NODE_ENV == <span class="string">'dev'</span>) || <span class="string">'false'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开<code>./app/util/localStore.js</code>可以看到<code>if (__DEV__) { console.error(&#39;localStorage.getItem报错, &#39;, ex.message) }</code>，即只有开发环境下才提示error，发布之后就不会提示了。（因为发布的命令中用到<code>NODE_ENV=production</code>）</p><h4 id="配置-webpack-production-config-js"><a href="#配置-webpack-production-config-js" class="headerlink" title="配置 webpack.production.config.js"></a>配置 webpack.production.config.js</h4><p>开发环境下，可以不用考虑系统的性能，更多考虑的是如何增加开发效率。而发布系统时，就需要考虑发布之后的系统的性能，包括加载速度、缓存等。下面介绍发布用配置代码和开发用的不一样的地方。</p><h5 id="发布到-build-文件夹中"><a href="#发布到-build-文件夹中" class="headerlink" title="发布到 ./build 文件夹中"></a>发布到 <code>./build</code> 文件夹中</h5><p><code>path: __dirname + &quot;/build&quot;,</code></p><h5 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h5><p>将第三方依赖单独打包。即将 node_modules 文件夹中的代码打包为 vendor.js 将我们自己写的业务代码打包为 app.js。这样有助于缓存，因为在项目维护过程中，第三方依赖不经常变化，而业务代码会经常变化。</p><h5 id="md5后缀"><a href="#md5后缀" class="headerlink" title="md5后缀"></a>md5后缀</h5><p>为每个打包出来的文件都加md5后缀，例如<code>&quot;/js/[name].[chunkhash:8].js&quot;</code>，可使文件强缓存。</p><h5 id="分目录"><a href="#分目录" class="headerlink" title="分目录"></a>分目录</h5><p>打包出来的不同类型的文件，放在不同目录下，例如图片文件将放在<code>img/</code>目录下</p><h5 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h5><p>自动为打包出来的代码增加 copyright 内容</p><h5 id="分模块"><a href="#分模块" class="headerlink" title="分模块"></a>分模块</h5><p><code>new webpack.optimize.OccurenceOrderPlugin(),</code></p><h5 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h5><p>使用 Uglify 压缩代码，其中<code>warnings: false</code>是去掉代码中的 warning</p><h5 id="分离-css-和-js-文件"><a href="#分离-css-和-js-文件" class="headerlink" title="分离 css 和 js 文件"></a>分离 css 和 js 文件</h5><p>开发环境下，css 代码是放在整个打包出来的那个 bundle.js 文件中的，发布环境下当然不能混淆在一起，使用<code>new ExtractTextPlugin(&#39;/css/[name].[chunkhash:8].css&#39;),</code>将 css 代码分离出来。</p><h5 id="npm-run-build"><a href="#npm-run-build" class="headerlink" title="npm run build"></a>npm run build</h5><p>打开<code>package.json</code>，查看以下代码。<code>npm start</code>和<code>npm run build</code>分别是运行代码和打包项目。另外，<code>&quot;start&quot;、&quot;test&quot;</code>可以不用<code>run</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "NODE_ENV=dev webpack-dev-server --progress --colors",</span><br><span class="line">  "build": "rm -rf ./build &amp;&amp; NODE_ENV=production webpack --config ./webpack.production.config.js --progress --colors"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这两个命令主要有以下区别：</p><ul><li>前者中默认使用 webpack.config.js 作为配置文件，而后者中强制使用 webpack.production.config.js 作为配置文件</li><li>前者<code>NODE_ENV=dev</code>而后者<code>NODE_ENV=production</code>，标识不同的环境。而这个<code>&quot;dev&quot; &quot;production&quot;</code>可以在代码中通过<code>process.env.NODE_ENV</code>获取。</li></ul><h5 id="最小化压缩-React"><a href="#最小化压缩-React" class="headerlink" title="最小化压缩 React"></a>最小化压缩 React</h5><p>以下配置可以告诉 React 当前是生产环境，请最小化压缩 js ，即把开发环境中的一些提示、警告、判断通通去掉，直流以下发布之后可用的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  <span class="string">'process.env'</span>:&#123;</span><br><span class="line">    <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h1&gt;&lt;h2 id=&quot;react开发环境搭建&quot;&gt;&lt;a href=&quot;#react开发环境搭建&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
    
  </entry>
  
  <entry>
    <title>react入门</title>
    <link href="http://yoursite.com/2018/05/08/test1/01-react%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/05/08/test1/01-react入门/</id>
    <published>2018-05-07T22:42:55.170Z</published>
    <updated>2018-05-04T11:10:26.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react基础教程"><a href="#react基础教程" class="headerlink" title="react基础教程"></a>react基础教程</h1><h2 id="react入门"><a href="#react入门" class="headerlink" title="react入门"></a>react入门</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>React 是一个用于构建用户界面的 JAVASCRIPT 库。</p></blockquote><blockquote><blockquote><p>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p></blockquote></blockquote><h4 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h4><blockquote><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站</p></blockquote><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native </span><br><span class="line">项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。</span><br><span class="line"></span><br><span class="line">如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机</span><br></pre></td></tr></table></figure><h4 id="react的特点"><a href="#react的特点" class="headerlink" title="react的特点"></a>react的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.声明式设计 −React采用声明范式，可以轻松描述应用。</span><br><span class="line">2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</span><br><span class="line">3.灵活 −React可以与已知的库或框架很好地配合。</span><br><span class="line">4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</span><br><span class="line">5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</span><br><span class="line">6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</span><br></pre></td></tr></table></figure><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p><strong>最小化的 HTML 模板</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;!--react的核心库--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!--react的与dom相关的一些功能--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!--将浏览器不支持的jsx语法转化为js语法--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;!--    </span><br><span class="line">            &lt;script&gt; 标签的 type 属性为 text/babel 。</span><br><span class="line">                                     这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。</span><br><span class="line">                                     凡是使用 JSX 的地方，都要加上 type=&quot;text/babel&quot; 。</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">            // ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</span><br><span class="line">            ReactDOM.render(</span><br><span class="line">            &lt;h1&gt;Hello, world!&lt;/h1&gt;, </span><br><span class="line">            </span><br><span class="line">            document.getElementById(&apos;root&apos;) );</span><br><span class="line"></span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">-&gt;</span><br></pre></td></tr></table></figure><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><strong>React 和 ReactDOM 的UMD版本可通过 CDN 获得。</strong></p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><blockquote><p>相比开发环境进行了压缩和优化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a>crossorigin</h4><p><strong>如果你从 CDN 引用 React，我们建议保留 crossorigin 属性设置：</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react基础教程&quot;&gt;&lt;a href=&quot;#react基础教程&quot; class=&quot;headerlink&quot; title=&quot;react基础教程&quot;&gt;&lt;/a&gt;react基础教程&lt;/h1&gt;&lt;h2 id=&quot;react入门&quot;&gt;&lt;a href=&quot;#react入门&quot; class=&quot;he
      
    
    </summary>
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/08/hello-world/"/>
    <id>http://yoursite.com/2018/05/08/hello-world/</id>
    <published>2018-05-07T22:30:03.040Z</published>
    <updated>2018-05-07T22:30:03.042Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
