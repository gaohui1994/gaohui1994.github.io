<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaoHui</title>
  
  <subtitle>Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-10T01:37:40.628Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GaoHui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>203-render</title>
    <link href="http://yoursite.com/2018/05/10/vue/203-render/203-render/"/>
    <id>http://yoursite.com/2018/05/10/vue/203-render/203-render/</id>
    <published>2018-05-10T02:06:33.578Z</published>
    <updated>2018-05-10T01:37:40.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><blockquote><p>VUE一般使用template来创建HTML，然后在有的时候，我们需要使用javascript来创建html，这时候我们需要使用render函数。</p></blockquote><h2 id="render函数基础"><a href="#render函数基础" class="headerlink" title="render函数基础"></a>render函数基础</h2><h3 id="dom渲染"><a href="#dom渲染" class="headerlink" title="dom渲染"></a>dom渲染</h3><blockquote><p>比如渲染一下dom元素</p><blockquote><p>可以直接进行元素的添加,document.getElementById(“container”).innerHTML = “”</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Hello world!&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="vue的dom渲染"><a href="#vue的dom渲染" class="headerlink" title="vue的dom渲染"></a>vue的dom渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">                </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.component(&apos;tb-heading&apos;, &#123;</span><br><span class="line">        template: </span><br><span class="line">        `</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;Hello world!&lt;/a&gt;</span><br><span class="line">        `</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#container&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="slot分发"><a href="#slot分发" class="headerlink" title="slot分发"></a>slot分发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">                &lt;tb-heading :level=&quot;2&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot;&gt;Hello world!&lt;/a&gt;</span><br><span class="line">                &lt;/tb-heading&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.component(&apos;tb-heading&apos;, &#123;</span><br><span class="line">        template: </span><br><span class="line">        `</span><br><span class="line">        &lt;h1 v-if=&quot;level === 1&quot;&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;h2 v-else-if=&quot;level === 2&quot;&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        </span><br><span class="line">        `,</span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line">                type: Number,</span><br><span class="line">                required: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#container&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="render改写"><a href="#render改写" class="headerlink" title="render改写"></a>render改写</h3><blockquote><p>createElement返回的是包含的信息会告诉VUE页面上需要渲染什么样的节点及其子节点。我们称这样的节点为虚拟DOM，可以简写为VNode，</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">                &lt;tb-heading :level=&quot;1&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot;&gt;Hello world!&lt;/a&gt;</span><br><span class="line">                &lt;/tb-heading&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.component(&apos;tb-heading&apos;, &#123;</span><br><span class="line">        render: function(createElement) &#123;</span><br><span class="line">            </span><br><span class="line">            console.log(this.$slots.default)</span><br><span class="line">            </span><br><span class="line">            return createElement(</span><br><span class="line">                &apos;h&apos; + this.level, // tag name 标签名称</span><br><span class="line">                this.$slots.default // 组件的子元素</span><br><span class="line">            )</span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line">                type: Number,</span><br><span class="line">                required: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#container&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>createElement参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// @return &#123;VNode&#125;</span><br><span class="line">createElement(</span><br><span class="line">  // &#123;String | Object | Function&#125;</span><br><span class="line">  // 一个HTML标签字符串，组件选项对象，或者一个返回值类型为String/Object的函数。该参数是必须的</span><br><span class="line">  &apos;div&apos;,</span><br><span class="line"></span><br><span class="line">  // &#123;Object&#125;</span><br><span class="line">  // 一个包含模板相关属性的数据对象，这样我们可以在template中使用这些属性，该参数是可选的。</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // &#123;String | Array&#125;</span><br><span class="line">  // 子节点（VNodes）由 createElement() 构建而成。可选参数</span><br><span class="line">  // 或简单的使用字符串来生成的 &quot;文本节点&quot;。</span><br><span class="line">  [</span><br><span class="line">    &apos;xxxx&apos;,</span><br><span class="line">    createElement(&apos;h1&apos;, &apos;一则头条&apos;),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: &apos;xxx&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="深入理解createElement的数据对象"><a href="#深入理解createElement的数据对象" class="headerlink" title="深入理解createElement的数据对象"></a>深入理解createElement的数据对象</h3><blockquote><p>在模板语法中，我们可以使用 v-bind:class 和 v-bind:style 来绑定属性，在VNode数据对象中，下面的属性名的字段级别是最高的。<br>该对象允许我们绑定普通的html特性，就像DOM属性一样。如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      // 和`v-bind:class`一样的 API</span><br><span class="line">      &apos;class&apos;: &#123;</span><br><span class="line">        foo: true,</span><br><span class="line">        bar: false</span><br><span class="line">      &#125;,</span><br><span class="line">      // 和`v-bind:style`一样的 API</span><br><span class="line">      style: &#123;</span><br><span class="line">        color: &apos;red&apos;,</span><br><span class="line">        fontSize: &apos;14px&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 正常的 HTML 特性</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: &apos;foo&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 组件 props</span><br><span class="line">      props: &#123;</span><br><span class="line">        myProp: &apos;bar&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // DOM 属性</span><br><span class="line">      domProps: &#123;</span><br><span class="line">        innerHTML: &apos;baz&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 事件监听器基于 `on`</span><br><span class="line">      // 所以不再支持如 `v-on:keyup.enter` 修饰器</span><br><span class="line">      // 需要手动匹配 keyCode。</span><br><span class="line">      on: &#123;</span><br><span class="line">        click: this.clickHandler</span><br><span class="line">      &#125;,</span><br><span class="line">      // 仅对于组件，用于监听原生事件，而不是组件内部使用 `vm.$emit` 触发的事件。</span><br><span class="line">      nativeOn: &#123;</span><br><span class="line">        click: this.nativeClickHandler</span><br><span class="line">      &#125;,</span><br><span class="line">      // 自定义指令。注意事项：不能对绑定的旧值设值</span><br><span class="line">      // Vue 会为您持续追踪</span><br><span class="line">      directives: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;my-custom-directive&apos;,</span><br><span class="line">          value: &apos;2&apos;,</span><br><span class="line">          expression: &apos;1 + 1&apos;,</span><br><span class="line">          arg: &apos;foo&apos;,</span><br><span class="line">          modifiers: &#123;</span><br><span class="line">            bar: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      // Scoped slots in the form of</span><br><span class="line">      // &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        default: props =&gt; createElement(&apos;span&apos;, props.text)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 如果组件是其他组件的子组件，需为插槽指定名称</span><br><span class="line">      slot: &apos;name-of-slot&apos;,</span><br><span class="line">      // 其他特殊顶层属性</span><br><span class="line">      key: &apos;myKey&apos;,</span><br><span class="line">      ref: &apos;myRef&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="render扩展"><a href="#render扩展" class="headerlink" title="render扩展"></a>render扩展</h2><h3 id="循环渲染"><a href="#循环渲染" class="headerlink" title="循环渲染"></a>循环渲染</h3><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><blockquote><p>函数式组件我们标记组件为 functional, 意味着它无状态(没有data), 无实列(没有this上下文)。<br>一个函数式组件像下面这样的：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">  functional: true,</span><br><span class="line">  // 为了弥补缺少的实列</span><br><span class="line">  // 提供第二个参数作为上下文</span><br><span class="line">  render: function(createElement, context) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  // Props 可选</span><br><span class="line">  props: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">组件需要的一切通过上下文传递，包括如下：</span><br><span class="line">props: 提供props对象</span><br><span class="line">children: VNode子节点的数组</span><br><span class="line">slots: slots对象</span><br><span class="line">data: 传递给组件的data对象</span><br><span class="line">parent： 对父组件的引用</span><br><span class="line">listeners: (2.3.0+) 一个包含了组件上所注册的 v-on 侦听器的对象。这只是一个指向 data.on 的别名。</span><br><span class="line">injections: (2.3.0+) 如果使用了 inject 选项，则该对象包含了应当被注入的属性。</span><br><span class="line"></span><br><span class="line">在添加 functional: true 之后，组件的 render 函数之间简单更新增加 context 参数，this.$slots.default 更新为    context.children，之后this.level 更新为 context.props.level。</span><br></pre></td></tr></table></figure><p><strong>代码演示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;演示Vue&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">      &#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;choice&gt;</span><br><span class="line">        &lt;item value=&quot;1&quot;&gt;test&lt;/item&gt;</span><br><span class="line">      &lt;/choice&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&apos;choice&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div&gt;&lt;ul&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/ul&gt;&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;item&apos;, &#123;</span><br><span class="line">      functional: true,</span><br><span class="line">      render: function(h, context) &#123;</span><br><span class="line">        return h(&apos;li&apos;, &#123;</span><br><span class="line">          on: &#123;</span><br><span class="line">            click: function() &#123;</span><br><span class="line">              console.log(context);</span><br><span class="line">              console.log(context.parent);</span><br><span class="line">              console.log(context.props)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, context.children)</span><br><span class="line">      &#125;,</span><br><span class="line">      props: [&apos;value&apos;]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">      el: &apos;#container&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &apos;hello&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;VUE一般使用template来创建HTML，然后在有的时候，我们需要使用java
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="203-render" scheme="http://yoursite.com/categories/vue/203-render/"/>
    
    
  </entry>
  
  <entry>
    <title>201-axios补充</title>
    <link href="http://yoursite.com/2018/05/10/vue/202-axios%E6%89%A9%E5%B1%95/202-axios%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2018/05/10/vue/202-axios扩展/202-axios补充/</id>
    <published>2018-05-10T02:06:33.557Z</published>
    <updated>2018-05-10T01:37:31.607Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="202-axios扩展" scheme="http://yoursite.com/categories/vue/202-axios%E6%89%A9%E5%B1%95/"/>
    
    
  </entry>
  
  <entry>
    <title>16-虚拟dom</title>
    <link href="http://yoursite.com/2018/05/10/vue/201-%E8%99%9A%E6%8B%9F%E5%8A%A8%E6%BC%AB/201-%E8%99%9A%E6%8B%9Fdom%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/10/vue/201-虚拟动漫/201-虚拟dom原理/</id>
    <published>2018-05-10T02:06:33.522Z</published>
    <updated>2018-05-10T01:37:08.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h1><p><strong>虚拟dom技术用于提高页面更新的速度</strong></p><h2 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h2><blockquote><p>之前所学习的dom操作是比较浪费时间和性能的</p></blockquote><blockquote><blockquote><p> 更新DOM是非常昂贵的操作</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当我们使用Javascript来修改我们的页面，浏览器已经做了一些工作，以找到DOM节点进行更改，例如：</span><br><span class="line"></span><br><span class="line">document.getElementById(&apos;myId&apos;).appendChild(myNewNode);</span><br><span class="line"></span><br><span class="line">在现代的应用中，会有成千上万数量个DOM节点。所以因更新的时候产生的计算非常昂贵。</span><br><span class="line">琐碎且频繁的更新会使页面缓慢，同时这也是不可避免的。</span><br></pre></td></tr></table></figure><h2 id="虚拟dom技术"><a href="#虚拟dom技术" class="headerlink" title="虚拟dom技术"></a>虚拟dom技术</h2><blockquote><p>使用js对象来替代dom节点</p></blockquote><p><strong>DOM节点在HTML文档中的表现通常是这样的：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;myId&apos;&gt;</span><br><span class="line">  &lt;li&gt;Item 1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Item 2&lt;/li&gt;</span><br><span class="line">&lt;ul&gt;</span><br></pre></td></tr></table></figure><p><strong>DOM节点也可以表示为一个JavaScript对象，就像这样：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//用Javascript代码表示DOM节点的伪代码</span><br><span class="line">Let domNode = &#123;</span><br><span class="line">  tag: &apos;ul&apos;</span><br><span class="line">  attributes: &#123; id: &apos;myId&apos; &#125;</span><br><span class="line">  children: [</span><br><span class="line">//这里是 li</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>更新虚拟节点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//更新虚拟DOM的代码</span><br><span class="line">domNode.children.push(&apos;&lt;ul&gt;Item 3&lt;/ul&gt;&apos;);</span><br><span class="line">如果我们用一个虚拟DOM，而不是直接调用像.getElementById的方法，这样只操作JavaScript对象，这样是相当便宜的。</span><br><span class="line"></span><br><span class="line">然后，再把更改的部分更新到真正的DOM，方法如下：</span><br><span class="line"></span><br><span class="line">//这个方法是调用DOM API来更改真正DOM的</span><br><span class="line">//它会分批执行从而获取更高的效率</span><br><span class="line">sync(originalDomNode, domNode);</span><br></pre></td></tr></table></figure><h2 id="dom和虚拟dom的分析"><a href="#dom和虚拟dom的分析" class="headerlink" title="dom和虚拟dom的分析"></a>dom和虚拟dom的分析</h2><p><strong>引入虚拟DOM实际上有优点也缺点。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">尺寸</span><br><span class="line">    更多的功能意味着更多的代码。幸运的是Vue.js 2.0仍然是相当小的（21.4kb当前版本）。</span><br><span class="line">    </span><br><span class="line">内存</span><br><span class="line">    虚拟DOM需要在内存中的维护一份DOM的副本。在DOM更新速度和使用内存空间之间取得平衡。</span><br><span class="line"></span><br><span class="line">不是适合所有情况</span><br><span class="line">    如果虚拟DOM大量更改，这是合适的。但是单一的，频繁的更新的话，虚拟DOM将会花费更多的时间处理计算的工作。</span><br><span class="line">    所以，如果你有一个DOM节点相对较少页面，用虚拟DOM，它实际上有可能会更慢。</span><br><span class="line">    但对于大多数单页面应用，这应该都会更快。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟dom&quot;&gt;&lt;a href=&quot;#虚拟dom&quot; class=&quot;headerlink&quot; title=&quot;虚拟dom&quot;&gt;&lt;/a&gt;虚拟dom&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;虚拟dom技术用于提高页面更新的速度&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;dom操作&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="201-虚拟动漫" scheme="http://yoursite.com/categories/vue/201-%E8%99%9A%E6%8B%9F%E5%8A%A8%E6%BC%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>15-ui</title>
    <link href="http://yoursite.com/2018/05/10/vue/15-UI%E5%BA%93/15-Muse%20UI/"/>
    <id>http://yoursite.com/2018/05/10/vue/15-UI库/15-Muse UI/</id>
    <published>2018-05-10T02:06:33.483Z</published>
    <updated>2018-05-10T01:36:53.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十五部分-UI-框架"><a href="#第十五部分-UI-框架" class="headerlink" title="第十五部分  UI 框架"></a>第十五部分  UI 框架</h1><blockquote><p>在这一单元给大家介绍三种基于vue的UI框架</p></blockquote><p><strong>1.Muse UI</strong></p><p><a href="http://www.muse-ui.org/#/usage" target="_blank" rel="noopener">Muse UI</a>参考链接</p><p><strong>2.Mint UI</strong></p><p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint UI</a>参考链接</p><p><strong>3.Element UI</strong></p><p><a href="http://element.eleme.io/#/zh-CN/component/i18n" target="_blank" rel="noopener">Element UI</a>参考链接</p><h2 id="三种框架使用的简单对比"><a href="#三种框架使用的简单对比" class="headerlink" title="三种框架使用的简单对比"></a>三种框架使用的简单对比</h2><p><img src="img/UI.png" alt=""></p><h2 id="Muse-UI"><a href="#Muse-UI" class="headerlink" title="Muse UI"></a>Muse UI</h2><blockquote><p>上已述及,三种框架在基本使用上没有太大差异,在这里,我们就围绕Muse UI做一个简单讲解</p></blockquote><p><img src="img/15-MuseUI知识点概述.png" alt=""></p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><h3 id="Muse-UI概述"><a href="#Muse-UI概述" class="headerlink" title="Muse UI概述"></a>Muse UI概述</h3><p><strong>[Muse UI官网]</strong>(<a href="http://www.muse-ui.org" target="_blank" rel="noopener">http://www.muse-ui.org</a>)</p><h4 id="什么是Muse-UI"><a href="#什么是Muse-UI" class="headerlink" title="什么是Muse UI"></a>什么是Muse UI</h4><blockquote><p>是一个基于vue2.0和material design的ui组件库</p></blockquote><blockquote><blockquote><p><a href="http://design.1sters.com/material_design/material-design/introduction.html" target="_blank" rel="noopener">material design</a>: Google推出的一种全新的设计语言</p></blockquote></blockquote><h4 id="为什么使用Muse-UI"><a href="#为什么使用Muse-UI" class="headerlink" title="为什么使用Muse UI"></a>为什么使用Muse UI</h4><p><strong>1.组件丰富</strong></p><blockquote><p>多功能组件，使用无忧</p><blockquote><p>Muse UI 基本实现了 Material Design 设计规范类的所有组件，另外还开发许多的功能性的组件</p></blockquote></blockquote><p><strong>2.可定制</strong></p><blockquote><p>自定义主题文件，更易扩展</p><blockquote><p>Muse UI 使用less文件，所有的颜色都有一个变量维护，通过编写 less 文件完成自定义主题，另外组件内部也提供一些修改效果的参数</p></blockquote></blockquote><p><strong>3.基于vue2.0</strong></p><blockquote><p>基于 Vue 2.0，开发更加快速</p></blockquote><blockquote><blockquote><p>Muse UI 基于 Vue2.0 开发，Vue2.0是当下最快的前端框架之一，小巧，api友好，可用于开发的复杂单页应用</p></blockquote></blockquote><h3 id="Muse-UI的基本使用"><a href="#Muse-UI的基本使用" class="headerlink" title="Muse UI的基本使用"></a>Muse UI的基本使用</h3><h4 id="Muse-UI在正常页面中的使用-以引入的方式"><a href="#Muse-UI在正常页面中的使用-以引入的方式" class="headerlink" title="Muse UI在正常页面中的使用(以引入的方式)"></a>Muse UI在正常页面中的使用(以引入的方式)</h4><p><strong>1.引入图标和字体</strong></p><blockquote><p>Muse-UI 使用了 material design 的字体和图标，需要在网页中引入。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>2.使用 script 标签</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/muse-ui.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;__dirname/muse-ui.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Muse-UI在vue-cli中的安装与使用"><a href="#Muse-UI在vue-cli中的安装与使用" class="headerlink" title="Muse UI在vue-cli中的安装与使用"></a>Muse UI在vue-cli中的安装与使用</h4><blockquote><p>在配合我们的vue-cli使用的时候,需要先安装,然后在main.js中导入我们安装的模块才能够使用</p></blockquote><blockquote><ol><li>在项目目录下打开git或cmd进行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save muse-ui</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>安装完成后,在main.js中导入模块(模块的加载)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使用Muse UI</span><br><span class="line">import MuseUI from &apos;muse-ui&apos;</span><br><span class="line">import &apos;muse-ui/dist/muse-ui.css&apos;</span><br><span class="line">Vue.use(MuseUI)</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>图示:</strong></p><p><img src="img/Muse UI.png" alt="Muse UI"></p><h3 id="Muse-UI的主题与颜色的设置"><a href="#Muse-UI的主题与颜色的设置" class="headerlink" title="Muse UI的主题与颜色的设置"></a>Muse UI的主题与颜色的设置</h3><blockquote><p>由于接下来的课程中我们主要是配合vue-cli来做项目,Muse UI的使用也是主要学习这方面的相关知识</p></blockquote><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>我们可以通过Muse UI来自定义自己喜欢的主题与颜色</p></blockquote><blockquote><blockquote><p>详情请参考: </p></blockquote></blockquote><blockquote><p>主题设置: <a href="http://www.muse-ui.org/#/theme" target="_blank" rel="noopener">Muse UI Theme</a></p></blockquote><blockquote><p>颜色设置: <a href="http://www.muse-ui.org/#/colors" target="_blank" rel="noopener">Muse UI Color</a></p></blockquote><h4 id="配置好需要的环境"><a href="#配置好需要的环境" class="headerlink" title="配置好需要的环境"></a>配置好需要的环境</h4><p>1.安装:</p><blockquote><p>在webpack-simple这个版本下面需要自己配置less和css环境</p></blockquote><p>npm i –save-dev less less-loader css-loader style-loader</p><p><img src="img/24.png" alt=""></p><p>2.配置文件 webpack.config.js,对我们使用到的less和css进行配置</p><p><img src="img/25.png" alt=""></p><h4 id="配置自己的主题"><a href="#配置自己的主题" class="headerlink" title="配置自己的主题"></a>配置自己的主题</h4><p>1.创建自己的主题文件(less文件)</p><blockquote><p>参考: <a href="http://www.muse-ui.org/#/theme" target="_blank" rel="noopener">Muse UI Theme</a></p></blockquote><p><img src="img/theme.png" alt=""></p><p>2.在我们需要的样式下引入这个less文件就可以达到修改主题和颜色的目的</p><p><img src="img/add_MuseUI.png" alt=""></p><h3 id="基础组件的使用"><a href="#基础组件的使用" class="headerlink" title="基础组件的使用"></a>基础组件的使用</h3><blockquote><p>类似于我们之前学过的bootstrap,Muse UI帮我们预定义好了一些组件,需要的时候直接拿来用就可以了,使用的方式也较为简单</p></blockquote><p><a href="http://www.muse-ui.org/#/appbar" target="_blank" rel="noopener">组件参考链接</a></p><p><strong>1.查找组件</strong></p><blockquote><p>找到我们需要的组件,查看那个组件和我们需要的页面结构相似</p></blockquote><p><img src="img/Muse UI的使用.png" alt=""></p><p><strong>2.拷贝代码</strong></p><p><img src="img/MuseUI-use.png" alt=""></p><p><strong>3.修改样式</strong></p><p><img src="img/MuseUI_use222.png" alt=""></p><p><strong>4.需要的话再补充js代码</strong></p><blockquote><p>部分Muse UI组件的样式是通过js来控制的</p></blockquote><h2 id="今日知识点总结"><a href="#今日知识点总结" class="headerlink" title="今日知识点总结"></a>今日知识点总结</h2><p><img src="img/MuseUIXmind.png" alt=""></p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十五部分-UI-框架&quot;&gt;&lt;a href=&quot;#第十五部分-UI-框架&quot; class=&quot;headerlink&quot; title=&quot;第十五部分  UI 框架&quot;&gt;&lt;/a&gt;第十五部分  UI 框架&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在这一单元给大家介绍三种基于vue的U
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="15-UI库" scheme="http://yoursite.com/categories/vue/15-UI%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>14-模板</title>
    <link href="http://yoursite.com/2018/05/10/vue/14-vue-cli/14-vue-cli/"/>
    <id>http://yoursite.com/2018/05/10/vue/14-vue-cli/14-vue-cli/</id>
    <published>2018-05-10T02:06:33.360Z</published>
    <updated>2018-05-10T01:36:45.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十四部分-vue项目模板"><a href="#第十四部分-vue项目模板" class="headerlink" title="第十四部分  vue项目模板"></a>第十四部分  vue项目模板</h1><h2 id="项目模板概述"><a href="#项目模板概述" class="headerlink" title="项目模板概述"></a>项目模板概述</h2><p>Vue.js官方提供了两种类型的模板项目：</p><ol><li>基于vue cli和browserify的项目模板</li><li>基于vue cli和webpack的项目模板</li></ol><p>vue cli是Vue.js官方提供的命令行创建Vue.js项目脚手架的工具。这两种类型的项目模板分别提供了<strong>简单模式</strong>和<strong>完全模式</strong><br>简单模式仅包含基于vue.js开发必要的一些资源和包，使用该模式可以快速地投入到开发。<br>完全模式则还包括ESLink、单元测试等功能。</p><h2 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h2><blockquote><p>Browserify是一个CommonJS风格的模块及依赖管理工具，它不仅是一个打包工具，更关键的是其JavaScript的模块及依赖管理能力。</p></blockquote><blockquote><blockquote><p>Browserify参照了Node中的模块系统，约定用require()来引入其他模块，用module.exports来引出模块</p></blockquote></blockquote><h3 id="生成项目模板-browserify-simple"><a href="#生成项目模板-browserify-simple" class="headerlink" title="生成项目模板 browserify-simple"></a>生成项目模板 browserify-simple</h3><p>1.安装node和npm环境</p><p>2.使用npm安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>3.使用vue-browserify-simple模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//执行以下命令</span><br><span class="line">vue init browserify-simple my-browserify-simple-demo</span><br></pre></td></tr></table></figure><p>4.生成的项目的文件目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─.babelrc// babel配置文件</span><br><span class="line">├─.gitignore</span><br><span class="line">├─index.html// 主页</span><br><span class="line">├─package.json// 项目配置文件</span><br><span class="line">├─README.md  </span><br><span class="line">├─dist// 发布目录</span><br><span class="line">│   ├─.gitkeep       </span><br><span class="line">├─src// 开发目录</span><br><span class="line">│   ├─App.vue// App.vue组件</span><br><span class="line">│   ├─main.js// 预编译入口</span><br></pre></td></tr></table></figure><p>5.package.json文件是项目配置文件，除了项目的一些基本信息外，有3个重要的节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies：项目发布时的依赖</span><br><span class="line">devDependencies：项目开发时的依赖</span><br><span class="line">scripts：编译项目的一些命令</span><br></pre></td></tr></table></figure></p><p>6..babelrc文件</p><blockquote><p>.babelrc文件定义了ES6的转码规则，基于ES6编写的js代码在编译时都会被babel转码器转换为ES5代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>7.查看目录-安装依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-browserify-simple-demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>8.运行示例</p><blockquote><p>　在执行该命令后，dist目录下会生成一个build.js文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="编译过程说明"><a href="#编译过程说明" class="headerlink" title="编译过程说明"></a>编译过程说明</h4><p>build.js文件是怎么产生的呢？我们把它分为两种情况：</p><p>开发时生成build.js<br>发布时生成build.js</p><p><strong>开发时成成build.js</strong></p><blockquote><p>在package.json文件的scripts节点下，有3行配置：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;watchify&quot;: &quot;watchify -vd -p browserify-hmr -e src/main.js -o dist/build.js&quot;,</span><br><span class="line">  &quot;serve&quot;: &quot;http-server -c 1 -a localhost&quot;,</span><br><span class="line">  &quot;dev&quot;: &quot;npm-run-all --parallel watchify serve&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>npm run dev命令执行的是dev节点对应的命令npm-run-all –parallel watchify serve ，这行命令是依赖于watchify的，也就是下面这行命令：</p></blockquote><blockquote><blockquote><p>watchify -vd -p browserify-hmr -e src/main.js -o dist/build.js<br>你不用纠结这行命令的每个参数是什么意思，只需要理解src/main.js –o dist/build.js的含义：</p></blockquote></blockquote><blockquote><blockquote><p>　编译src/main.js文件，然后输出到dist/build.js<br>serve节点的命令http-server -c 1 -a localhost用于开启http-server，http-server是一个简易的web服务器。</p></blockquote></blockquote><p><strong>发布时生成build.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;cross-env NODE_ENV=production browserify src/main.js | uglifyjs -c warnings=false -m &gt; dist/build.js&quot;</span><br></pre></td></tr></table></figure><blockquote><p>执行npm run build命令可以生成发布时的build.js。</p></blockquote><h3 id="vue-browserify模板-区别于simple版本"><a href="#vue-browserify模板-区别于simple版本" class="headerlink" title="vue-browserify模板-区别于simple版本"></a>vue-browserify模板-区别于simple版本</h3><blockquote><p>simple-browserify模板用于构筑基于browserify和vueify的开发环境，browserify模板则提供了更多内容：</p></blockquote><ul><li>提供了ESLint：用于格式化JavaScript和检查JavaScript代码风格。</li><li>提供了单元测试：使用PhantomJS with Karma + karma-jasmine + karma-browserify的单元测试, 支持ES2015和mock。</li></ul><p>1.生成项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue init browserify my-browserify-demo</span><br><span class="line">//browserify是项目模板，my-browserify-demo是项目名称。</span><br></pre></td></tr></table></figure><p>2.目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─.babelrc// babel配置文件</span><br><span class="line">├─.eslintrc// eslint配置文件</span><br><span class="line">├─.gitignore</span><br><span class="line">├─index.html// 主页</span><br><span class="line">├─karma.conf.js// karma配置文件</span><br><span class="line">├─package.json// 项目配置文件</span><br><span class="line">├─README.md  </span><br><span class="line">├─dist// 发布目录</span><br><span class="line">│   ├─.gitkeep       </span><br><span class="line">├─src// 开发目录</span><br><span class="line">│   ├─App.vue// App.vue组件</span><br><span class="line">│   ├─main.js// 预编译入口</span><br><span class="line">│   ├─components// 组件目录</span><br><span class="line">│   ├──Hello.vue// Hello.vue组件</span><br><span class="line">├─test// 单元测试目录</span><br><span class="line">│   ├─unit </span><br><span class="line">│   ├──Hello.spec.js// Hello.vue单元测试</span><br></pre></td></tr></table></figure><p>3.安装项目依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-browserify-demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>4.运行示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="简单模式-webpack-simple"><a href="#简单模式-webpack-simple" class="headerlink" title="简单模式 - webpack-simple"></a>简单模式 - webpack-simple</h3><blockquote><p>vue-cli 的 基本安装步骤</p></blockquote><p>1.Node.js安装</p><p>2.安装vue-cli</p><blockquote><p>安装的时间有点长,稍作等待</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>3.使用vue-cli初始化项目-简单版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple my-webpack-simple-dem</span><br><span class="line">//        版本           项目名称</span><br></pre></td></tr></table></figure><p>4、进到目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd my-webpack-simple-demo</span><br></pre></td></tr></table></figure></p><p>5、安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>6、开始运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>7.打包上线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="完全模式"><a href="#完全模式" class="headerlink" title="完全模式"></a>完全模式</h3><p><strong>安装以及下载步骤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全局安装 vue-cli     npm install --global vue-cli</span><br><span class="line"></span><br><span class="line">创建一个基于 webpack 模板的新项目: vue init webpack my-project</span><br><span class="line"></span><br><span class="line">安装依赖: cd my-project npm install</span><br><span class="line"></span><br><span class="line">运行: npm run dev</span><br><span class="line"></span><br><span class="line">打包上线: npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十四部分-vue项目模板&quot;&gt;&lt;a href=&quot;#第十四部分-vue项目模板&quot; class=&quot;headerlink&quot; title=&quot;第十四部分  vue项目模板&quot;&gt;&lt;/a&gt;第十四部分  vue项目模板&lt;/h1&gt;&lt;h2 id=&quot;项目模板概述&quot;&gt;&lt;a href=&quot;#项
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="14-vue-cli" scheme="http://yoursite.com/categories/vue/14-vue-cli/"/>
    
    
  </entry>
  
  <entry>
    <title>502-笔记</title>
    <link href="http://yoursite.com/2018/05/10/vue/502-%E5%85%B6%E4%BB%96/502-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/10/vue/502-其他/502-笔记/</id>
    <published>2018-05-10T01:32:35.079Z</published>
    <updated>2018-05-10T01:38:56.220Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>复习<br> 1&gt; 框架的代码</p><pre><code>1) 核心模块    工具方法( 静态, 实例 )    框架核心结构( 原型 )        实现方式不止一种        使得工厂函数 Itcast 函数, 与 构造函数 init 函数共享一个原型对象    核心方法        toArray        isArrayLike        map        each        eq        first        last        pushStack        end2) DOM 操作模块    parseHTML    appendTo, append    prependTo, prepend    insertAfter, after    insertBefore, before    parent    next, nextAll    prev, prevAll    siblings3) 事件操作模块    on, off    快捷方法( click, mouseover, ... )4) 样式操作模块    css    addClass, removeClass, hasClass    toggleClass5) 属性操作    attr, prop    html, text, val6) 插件机制    插件就是用来给 jq 对象或构造函数提供新的实例方法或静态方法的 库    Itcast.fn.extend    Itcast.extend</code></pre><p> 2&gt; node 的基本概念</p><pre><code>1) node 平台是将 js 脱离浏览器, 允许它在其他环节中原型2) CommondJS 规范3) node 的安装( nodejs.org )与包的安装    包是库, js 的库    如何安装:         npm install -g 包名        npm install 包名        npm uninstall 包名    另外: 在国内可以使用 淘宝提供的 NPM 镜像模块与组件的概念( 了解 )    模块就是按照一定的逻辑组合到一起的代码( 抽象的, 模糊的, 范化的概念 )    组件是一个独立的具有单独逻辑的功能模块.    但是反过来, 组件又是模块.</code></pre></li></ol><ol start="2"><li><p>反馈<br> 问题1:</p><pre><code>text, html, val 方法jq 方法的具体含义    $( ... ).text( &apos;...&apos; );     // 给每一个 DOM 元素, 提供一个子节点( 文本节点 ), 相当于 innerText 属性    $( ... ).html( &apos;...&apos; );     // 给每一个 DOM 元素, 提供一个子节点( 元素或文本等 ), 相当于 innerHTML 属性    $( ... ).val( &apos;...&apos; );      // 给每一个 DOM 元素, 设置其 value, 就是 value 属性.// text//  给每一个 DOM 元素 设置 innerText 属性...this.each( function () {    this.innerText = value;});// html//  给每一个 DOM 元素 设置 innerHTML 属性...this.each( function () {    this.innerHTML = value;});// val//  给每一个 DOM 元素 设置 value 属性...this.each( function () {    this.value = value;});</code></pre><p> 问题2:</p><pre><code>统计图借助于 echarts 来实现该功能$( &apos;div&apos; ).charts( options )// echartsecharts.init( dom ).setOption( options );// 让 jq 提供 一个 charts 方法, 就是在调用 该方法 的时候 为每一个 dom 元素 提供一个图表jQuery.fn.charts = function ( options ) {    this.each(function () {        echarts.init(this).setOption( options );    });}</code></pre></li></ol><ol start="2"><li><p>gulp 的使用</p><p> 淘宝的 NPM 镜像:     –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p> -&gt; 为什么学习 gulp  </p><pre><code>1) 为了处理代码( 合并, 压缩 )2) 了解构建工具的使用方式( 前端工具都是使用 node 平台 )3) 了解一下 node 代码的编写</code></pre><p> -&gt; 安装</p><pre><code>1) 全局安装 gulp    打开命令行, 键入命令        npm install -g gulp2) 本地安装    建一个文件夹( 工作目录 )    进入该目录, 键入命令         npm install gulp --save3) 使用 gulp 基本步骤    -&gt; 在 工作目录下创建一个文件 gulpfile.js    -&gt; 使用 js 编码文件, 创建 task 任务4) 执行 gulp 定义的任务    在 工作目录下执行命令: gulp 任务名</code></pre></li><li><p>gulp 的哲学就是拿来主义<br> 要执行什么事情就拿已经做好的工具即可<br> 所以要合并文件就只需要找到可以合并文件的 gulp 包即可<br> 如何去找: </p><pre><code>http://npmjs.org/plugins        所有的 node 工具包http://gulpjs.com/plugins       只含有 gulp 的工具包</code></pre><p> dependencies        依赖. 描述的含义是该项目中需要使用的包<br> devDependencies     开发依赖. 项目在开发阶段需要使用的包.</p></li></ol><ol start="4"><li><p>问题<br> -&gt; 包: 就是 js 库. </p><pre><code>回顾 js 中使用库的方式    &lt;script src=&quot;????&quot;&gt;&lt;/script&gt;    路径( url )可以使用 相对路径, 或 直接使用网络上的路径( CDN )    如果相对路径写错了, 就无法使用这个库.    一般将 库 写在项目所在的目录下( scripts 这样类似的文件夹中 )    也就是说, 每一个项目都会有一个该目录, 存储该项目需要使用的 js 文件    这就是 局部路径下的 js 文件( 局部文件中的 库 )node 平台:    npm 局部安装: 就是在本地文件夹中会创建一个 node_modules 这样类似的文件夹    并在网络上下载 需要 的 js 库( 不单是一个 js 文件, 是一个 node 项目, 称为 包 )    放到该文件夹中.我们在写 node 代码的时候, node 平台会自动的在 node_modules 文件夹中去查找对象的 数据.    var gulp = require( &apos;gulp&apos; )</code></pre><p> -&gt; 安装</p><pre><code>1&gt; 全局安装( 好比是在安装运行时的核心文件, 就是在安装这个命令 )    npm install -g gulp2&gt; 本地( 局部 )安装( 相当于是在装插件, 这里的插件是由 gulp 所使用的 )    npm install gulp3&gt; 安装 插件, 安装需要具体实现功能的 代码    npm install gulp-concat gulp-uglify</code></pre><p> -&gt; 目录的规则</p><pre><code>/   正斜线, 斜线;  \   反斜线, 在不冲突的情况下简称为斜线unix 操作系统, 其中用于描述路径的 就是 斜线 /    / 称为根目录linux 操作系统( 可以认为: 免费的 unix )    / 根目录苹果操作系统( MacOS 是 Unix 的衍生版本 )    / 根目录DOS 一开始就是别人模拟 unix 写的一个系统    采用了新的标注方式, 分了盘符( C:\, D:\ 等 )    采用反斜线来描述目录的路径( 在 win 中如果不冲突, 使用正斜线可以使用 )在目录规则中使用 . 表示当前目录, 使用 .. 表示父级目录因此在描述本地资源的时候可以看到    &lt;script src=&quot;./123.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;123.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;../src/123.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;/src/123.js&quot;&gt;&lt;/script&gt;</code></pre></li></ol><ol start="6"><li><p>gulp 的补充<br> 1&gt; 有时需要在加载文件的时候按照指定的顺序进行加载</p><pre><code>就不能使用 gulp.src( &apos;./src/*&apos; )可以使用数组, 将文件的名字一一列出即:     gulp.src( [ &apos;Itcast.core.js&apos;, &apos;Itcast.dom.js&apos;, &apos;Itcast.event.js&apos;, &apos;Itcast.style.js&apos;, &apos;Itcast.attr.js&apos; ] )如此就可以按照数组的顺序来加载代码了</code></pre><p> 2&gt; 希望按照一定的顺序依次执行 gulp 中的 任务</p><pre><code>需要配置任务依赖    例如: 有三个任务: task1, task2, task3          要求依次执行 task2, task1, task3要求 先执行 task2, 在 task2 执行完以后再执行 task1, 在 task1 执行完以后再执行 task3换句话说, 就是最终要执行的是 task3, 但是在执行 task3 之前应该先执行 task1, 而在执行 task1 之前要先执行 task2.注: gulp 具有下面的语法    gulp.task( &apos;命令名&apos;, [ &apos;task名字&apos;, &apos;task名字&apos;, ... ] , function () {    });控制多个 task 的执行顺序.</code></pre><p> 3&gt; node 是异步的</p><pre><code>与 js 中的 setTimeout 一样. 在 浏览器的 js 中有一个称为函数( 事件 )队列node 是 &apos;单线程&apos; 的异步编程</code></pre><p> 4&gt; gulp 有一个默认的命令, 就是 default</p></li></ol><ol start="7"><li><p>angularjs</p><p> 三大流行框架:</p><pre><code>angular( * ) // angularjs, angularvuereact</code></pre></li></ol><ol start="8"><li><p>网站的发展流程与运行过程( *** )<br> 计算机的物理结构与拓扑结构( 逻辑结构 )<br> 计算机可能放在别的地方, 但是使用网络, 可以使得计算机放在别的地方与放在我们身边一样的使用<br> 互联网: 就是将全世界的很多的局域网连接起来构成了互联网</p><p> 网站模型<br> 客户机, 服务器</p><p> -&gt; 早期的网站, 单纯的文字页面内容( 没有动画, 修饰等内容 )</p><p> -&gt; url 的基本格式</p><pre><code>协议://主机地址(名):端口号/路径?参数http://       地址( ip )                  :80使用 &quot;协议://主机地址(名):端口号/&quot; 可以定位到 一台计算机的一个网站中. 就是一台计算机的一个文件夹中.路径的含义就是在寻找 网站根目录中的 文件或文件夹( 一般 服务器都会配置默认文件 )    http://www.123.456.com/index.html    http://www.123.456.com/</code></pre><p> -&gt; http 服务器</p><pre><code>npm install -g http-server</code></pre><p> -&gt; 静态网站</p><p> -&gt; 为什么需要动态网站</p><pre><code>百度的搜索功能? 每一个人要搜索的东西可能不一样, 自然就表明生成的 html 就不一样?静态网站能做么? 缺点: 前后台代码混编</code></pre></li></ol><pre><code>    artTemplate: datas = [ { name: , age:, gender:  } ]    &lt;table border=&quot;1&quot; width=&quot;400&quot;&gt;        &lt;thead&gt;             &lt;% for ( var k in datas[ 0 ] ) {%&gt;                &lt;th&gt;&lt;%= k%&gt;&lt;/th&gt;            &lt;% } %&gt;        &lt;/thead&gt;        ...        ...    &lt;/table&gt;    提出: webApi -&gt; 前端后端分离: webApi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;复习&lt;br&gt; 1&amp;gt; 框架的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1) 核心模块
    工具方法( 静态, 实例 )
    框架核心结构( 原型 )
        实现方式不止一种
        使得工厂函数 Itcast 函数, 与 构造函数 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="502-其他" scheme="http://yoursite.com/categories/vue/502-%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>501-几种框架 的简单介绍</title>
    <link href="http://yoursite.com/2018/05/10/vue/501-%E6%A1%86%E6%9E%B6%E6%8F%8F%E8%BF%B0/501-%E5%87%A0%E7%A7%8D%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/05/10/vue/501-框架描述/501-几种框架的简单描述/</id>
    <published>2018-05-10T01:32:35.078Z</published>
    <updated>2018-05-10T01:38:42.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular-简介"><a href="#angular-简介" class="headerlink" title="angular 简介"></a>angular 简介</h1><p>angular1</p><blockquote><p>最初的agular版本,称为angularjs,专注于前端开发,在代码的书写方面有着严格的规定,</p></blockquote><blockquote><blockquote><p>也就是条条框框较多,但是掌握的话,学起来相对简单,因为学会一个就能够掌握多个</p></blockquote></blockquote><blockquote><blockquote><p>在一些小型的项目中,angularjs过于臃肿,对于一些现有的开发,只是要使用angularjs的双向数据绑定</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>在完整的引入angularjs的情况下,就不太合适了,所以就有了angular2</p></blockquote></blockquote></blockquote><p>angular2</p><blockquote><p>引入了模块化开发思想的概念,与angularjs并没有多大的关联</p></blockquote><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><blockquote><p>相比于angular而言,较为轻量,在代码的书写方面也并不是太严格</p></blockquote><p>在新一代的版本vue2.0中,在大部分的内容上都和vue1中相似</p><h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><blockquote><p>现在的发展还不是太成熟</p></blockquote><h1 id="cordova-phonegap"><a href="#cordova-phonegap" class="headerlink" title="cordova    phonegap"></a>cordova    phonegap</h1><blockquote><p>简单来说,就是使用js做手机移动端的开发</p></blockquote><h1 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h1><blockquote><p>专注于移动端的开发</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angular-简介&quot;&gt;&lt;a href=&quot;#angular-简介&quot; class=&quot;headerlink&quot; title=&quot;angular 简介&quot;&gt;&lt;/a&gt;angular 简介&lt;/h1&gt;&lt;p&gt;angular1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初的agular
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="501-框架描述" scheme="http://yoursite.com/categories/vue/501-%E6%A1%86%E6%9E%B6%E6%8F%8F%E8%BF%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>301-补充</title>
    <link href="http://yoursite.com/2018/05/10/vue/301-%E8%A1%A5%E5%85%85/301-%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2018/05/10/vue/301-补充/301-补充/</id>
    <published>2018-05-10T01:32:35.074Z</published>
    <updated>2018-05-10T01:38:14.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目的开始"><a href="#移动端项目的开始" class="headerlink" title="移动端项目的开始"></a>移动端项目的开始</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">1. babel-polyfill    es6的补丁</span><br><span class="line">    </span><br><span class="line">    npm install babel-polyfill --save-dev   </span><br><span class="line"></span><br><span class="line">    import &quot;babel-polyfil&quot; 需要在main文件的开头引入</span><br><span class="line"></span><br><span class="line">2. fastclick  解决移动端300ms的延迟</span><br><span class="line"></span><br><span class="line">    npm install fastclick --save</span><br><span class="line"></span><br><span class="line">    import fastclick from &apos;fastclick&apos;</span><br><span class="line"></span><br><span class="line">    fastclick.attach(document.body)</span><br><span class="line"></span><br><span class="line">3. jsonp  执行跨域数据请求的一个模块</span><br><span class="line">    </span><br><span class="line">    npm install jsonp --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;移动端项目的开始&quot;&gt;&lt;a href=&quot;#移动端项目的开始&quot; class=&quot;headerlink&quot; title=&quot;移动端项目的开始&quot;&gt;&lt;/a&gt;移动端项目的开始&lt;/h1&gt;&lt;h2 id=&quot;依赖包&quot;&gt;&lt;a href=&quot;#依赖包&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="301-补充" scheme="http://yoursite.com/categories/vue/301-%E8%A1%A5%E5%85%85/"/>
    
    
  </entry>
  
  <entry>
    <title>300-插件</title>
    <link href="http://yoursite.com/2018/05/10/vue/300-%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/300-%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/05/10/vue/300-插件系统/300-插件系统/</id>
    <published>2018-05-10T01:32:35.073Z</published>
    <updated>2018-05-10T01:38:04.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue可以使用的插件系统"><a href="#vue可以使用的插件系统" class="headerlink" title="vue可以使用的插件系统"></a>vue可以使用的插件系统</h1><h2 id="iscroll–-gt-better-scroll"><a href="#iscroll–-gt-better-scroll" class="headerlink" title="iscroll–&gt;better-scroll"></a>iscroll–&gt;better-scroll</h2><blockquote><p>实现页面滚动特效</p></blockquote><p><img src="https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scroll 是什么" alt="better-scroll官方文档"></p><h3 id="项目实战-饿了吗"><a href="#项目实战-饿了吗" class="headerlink" title="项目实战-饿了吗"></a>项目实战-饿了吗</h3><p><img src="https://coding.imooc.com/class/74.html" alt="Vue.js 高仿外卖饿了么实战课程"></p><p><img src="http://ustbhuangyi.com/sell/#/goods" alt="项目演示地址"></p><h3 id="项目实战-炸鸡音乐"><a href="#项目实战-炸鸡音乐" class="headerlink" title="项目实战-炸鸡音乐"></a>项目实战-炸鸡音乐</h3><p><img src="http://coding.imooc.com/class/107.html" alt="Vue.js 音乐 App 高级实战课程"></p><p><img src="http://ustbhuangyi.com/music/#/recommend" alt="项目演示地址"></p><h2 id="vue-lazyload"><a href="#vue-lazyload" class="headerlink" title="vue-lazyload"></a>vue-lazyload</h2><blockquote><p>实现页面数据的懒加载效果</p></blockquote><p><img src="https://www.npmjs.com/package/vue-lazyload#demo" alt="vue懒加载插件"></p><p><img src="https://hilongjw.github.io/vue-lazyload/" alt="demo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue可以使用的插件系统&quot;&gt;&lt;a href=&quot;#vue可以使用的插件系统&quot; class=&quot;headerlink&quot; title=&quot;vue可以使用的插件系统&quot;&gt;&lt;/a&gt;vue可以使用的插件系统&lt;/h1&gt;&lt;h2 id=&quot;iscroll–-gt-better-scroll
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="300-插件系统" scheme="http://yoursite.com/categories/vue/300-%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>20-总结</title>
    <link href="http://yoursite.com/2018/05/10/vue/502-%E5%85%B6%E4%BB%96/20-conclude/"/>
    <id>http://yoursite.com/2018/05/10/vue/502-其他/20-conclude/</id>
    <published>2018-05-10T01:32:35.036Z</published>
    <updated>2018-05-10T01:37:52.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十单元-知识点总结"><a href="#第二十单元-知识点总结" class="headerlink" title="第二十单元 知识点总结"></a>第二十单元 知识点总结</h1><p><img src="img/vueFace.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二十单元-知识点总结&quot;&gt;&lt;a href=&quot;#第二十单元-知识点总结&quot; class=&quot;headerlink&quot; title=&quot;第二十单元 知识点总结&quot;&gt;&lt;/a&gt;第二十单元 知识点总结&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;img/vueFace.jpg&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="502-其他" scheme="http://yoursite.com/categories/vue/502-%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>13-es6</title>
    <link href="http://yoursite.com/2018/05/10/vue/13-singlePage-es6/13-singleFile-es6/"/>
    <id>http://yoursite.com/2018/05/10/vue/13-singlePage-es6/13-singleFile-es6/</id>
    <published>2018-05-10T01:32:35.017Z</published>
    <updated>2018-05-10T01:36:35.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十三部分-ES6简单扩展和单文件组件"><a href="#第十三部分-ES6简单扩展和单文件组件" class="headerlink" title="第十三部分  ES6简单扩展和单文件组件"></a>第十三部分  ES6简单扩展和单文件组件</h1><blockquote><p>来自网络收集, 如有雷同,请见谅</p></blockquote><h2 id="es6简介"><a href="#es6简介" class="headerlink" title="es6简介"></a>es6简介</h2><blockquote><p>ECMAScript是JavaScript语言的国际标准，JavaScript是ECMAScript的实现</p></blockquote><blockquote><p>还记得数组的 forEach  map  filter  every  some方法吗?</p></blockquote><blockquote><blockquote><p>ECMAScript5 ES5</p></blockquote></blockquote><p><strong>ECMAScript6   ES6  ES2015:</strong>是什么?</p><blockquote><p><strong>ECMAScript6/简称ES6是JavaScript语言的下一代标准，已经在2015年6月正式发布</strong></p></blockquote><blockquote><p>es6在之前版本的基础上增加了一些新的特性</p></blockquote><blockquote><blockquote><p><strong>ES6新特性</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">多样化的声明方式</span><br><span class="line"></span><br><span class="line">1. var</span><br><span class="line">2. let</span><br><span class="line">3. const</span><br><span class="line">4. function</span><br><span class="line">5. import</span><br><span class="line">6. class</span><br><span class="line"></span><br><span class="line">template string, default, promise, extends......</span><br></pre></td></tr></table></figure><p><strong>兼容性问题:</strong></p><blockquote><p>ES6作为新一代标准，各大浏览器支持是需要一段时间的</p><blockquote><p>查看各大浏览器对于ES6的支持情况 (<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a>)</p></blockquote></blockquote><blockquote><blockquote><p>即使不支持,我们也有解决的方案,之后会进行详细的讲解</p></blockquote></blockquote><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>学习资料: <a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ES6</a></strong></p><p><strong>不理解的部分可以查看下附源码,也可查找上述链接文档</strong></p><blockquote><p>浏览器不支持es6,需要进行转化才能够正常执行</p></blockquote><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p><strong><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a></strong> 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。<br>这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 转码前</span><br><span class="line">input.map(item =&gt; item + 1);</span><br><span class="line"></span><br><span class="line">// 转码后</span><br><span class="line">input.map(function (item) &#123;</span><br><span class="line">  return item + 1;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><blockquote><p>首先创建一个package.json文件  :  npm init -y</p></blockquote><p>1.安装webpack</p><pre><code>npm install webpack --save-dev</code></pre><p>2.安装babel  实现 ES6 到 ES5</p><pre><code>npm install --save-dev babel-core babel-preset-es2015</code></pre><p>3.安装 babel-loader</p><pre><code>npm install --save-dev babel-loader</code></pre><p>4.webpack.config.js完整配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./index.js&apos;,</span><br><span class="line">output: &#123;</span><br><span class="line">path: __dirname,</span><br><span class="line">filename: &apos;bundle.js&apos;</span><br><span class="line">&#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: /\.js$/,</span><br><span class="line">            exclude: /node_modules/,</span><br><span class="line">            loader: &apos;babel-loader&apos;,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>5.创建一个用于babel调用的文件，名为.babelrc</p><pre><code>{ &quot;presets&quot;: [ &quot;es2015&quot; ] }</code></pre><p>6.打开cmd,运行命令 webpack –watch</p><h2 id="详细知识点-掌握es6的基本使用"><a href="#详细知识点-掌握es6的基本使用" class="headerlink" title="详细知识点(掌握es6的基本使用)"></a>详细知识点(掌握es6的基本使用)</h2><blockquote><p>ES6语法知识点太多,课堂上不可能全部详细讲解,有重点的进行学习:</p></blockquote><blockquote><blockquote><p>1.let声明变量,const声明常量与var声明变量的区别</p></blockquote></blockquote><blockquote><blockquote><p>2.了解解构赋值,掌握其基本应用,最起码见到解构赋值的代码知道这段代码是做什么用的,不要一脸茫然</p><blockquote><p>在这里不作重点考察</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>3.了解字符串新增的一些方法,重点掌握模板字符串</p></blockquote></blockquote><blockquote><blockquote><p>4.函数扩展,箭头函数使重点</p></blockquote></blockquote><blockquote><blockquote><p>5.ES6的模块化语法重点掌握,结合之前的commonjs和AMD规范进行学习</p></blockquote></blockquote><blockquote><blockquote><p>6.之后还有数组,数值,对象……作为简单了解,不作为考察的知识点</p></blockquote></blockquote><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><blockquote><p>ES6新增了let命令，用于声明变量，用let声明的变量，只在let命令所在的代码块内有效。</p><blockquote><p>let其实是为JavaScript<strong>新增了块级作用域</strong>。在之前的js中没有块级作用域,只有函数能够产生作用域!</p></blockquote></blockquote><p><img src="img/let.jpg" alt="let">   </p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><blockquote><p>常量：不变的量</p></blockquote><blockquote><blockquote><p>什么是不变的量,与变(var/let)的区别</p></blockquote></blockquote><p><img src="img/const.jpg" alt="const"></p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><blockquote><p>解构:分解、拆解,即分解其构成或者说是分解其组成</p></blockquote><blockquote><blockquote><p>解构赋值：以分解/拆解的形式进行赋值</p></blockquote></blockquote><p><img src="img/jiegou.jpg" alt="解构"></p><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><blockquote><p>在原先js的基础上增加了一些新的方法,扩展了一些新的功能</p></blockquote><blockquote><blockquote><p>最好用的莫过于模板字符串,大大简化了我们的书写方式</p></blockquote></blockquote><p><img src="img/字符串.png" alt="字符串.png"></p><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><p><img src="img/function.jpg" alt="function"></p><h3 id="module语法"><a href="#module语法" class="headerlink" title="module语法"></a>module语法</h3><blockquote><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。<br>其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，<br>但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p></blockquote><blockquote><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。<br>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p></blockquote><blockquote><blockquote><p>ES6 模块通过export命令显式指定输出的代码，再通过import命令输入。</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</span><br></pre></td></tr></table></figure><h3 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h3><p><img src="img/Array.jpg" alt="Array"></p><h3 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h3><p><img src="img/number.jpg" alt="数值的扩展"></p><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><p><img src="img/object.jpg" alt="object"></p><h3 id="Set-and-Map"><a href="#Set-and-Map" class="headerlink" title="Set and Map"></a>Set and Map</h3><p><img src="img/set.jpg" alt="Set and Map"><br><img src="img/map.jpg" alt="Set and Map"></p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><img src="img/promise.jpg" alt="Promise"></p><h3 id="raceur编译器"><a href="#raceur编译器" class="headerlink" title="raceur编译器"></a>raceur编译器</h3><pre><code>Google公司的Traceur（http://github.com/google/traceur-compiler）编译器，可以将ES6代码编译为ES5代码。使用方法：直接插入网页首先，必须在网页头部加载Traceur库文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src = &quot;http://google.github.io/traceur-compiler/bin/traceur.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://google.github.io/traceur-compiler/src/bootstrap.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">traceur.options.experimental = true;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">//ES6代码</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>type属性的值是module，这是Traceur用来辨识ES6代码的标识，编译器会自动将所有标记了type=module的代码编译为ES5代码，然后交给浏览器执行</code></pre><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote><p>在讲解单文件组件之前,我们先分析一下之前所学的组件</p></blockquote><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在之前的vue.js章节中，我们都是用传统模式引用vue.js以及其他的js文件的，这在开发时会产生一些问题。</span><br><span class="line"></span><br><span class="line">首先，这限定了我们的开发模式是基于页面的，而不是基于组件的，组件的所有代码都直接写在页面中，这对于一些复杂的页面来说，不是好事情，</span><br><span class="line">代码的可读性会较差，也不便于管理。</span><br><span class="line"></span><br><span class="line">其次，定义在HTML页面中的组件，无法被其他页面重用，我们只能通过复制粘贴的方式将组件代码拷贝到其他页面。</span><br></pre></td></tr></table></figure><blockquote><p>在这里暴露出了一系列的问题</p><blockquote><ol><li>全局定义(Global definitions) 强制要求每个 component 中的命名不得重复</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li>字符串模板(String templates) 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 \</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li>不支持CSS(No CSS support) 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li>没有构建步骤(No build step) 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ol></blockquote></blockquote><p><strong>为了解决这一问题,提出了单文件组件的概念</strong></p><h3 id="单文件组件-1"><a href="#单文件组件-1" class="headerlink" title="单文件组件"></a>单文件组件</h3><blockquote><p>单文件组件:就是将我们的组件部分单独抽取到一个<strong>.vue</strong>文件</p><blockquote><p>通过单文件组件的方式,可以完美的解决上述问题</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用我们的单文件组件,需要配合构建工具使用,使用构建工具,构建我们的项目模板</span><br><span class="line"></span><br><span class="line">项目模板的配置在后面一章节会详细介绍,在这里先做一个简单的了解</span><br><span class="line"></span><br><span class="line">课程允许的情况下,可以教学生配置自己的项目模板(安装包,配置config文件......)</span><br><span class="line"></span><br><span class="line">讲师上课前可以先配置好项目模板,分发给每个学生直接使用,让学生体验一个使用模块分离思想进行项目开发的好处</span><br><span class="line"></span><br><span class="line">项目模板可以单独构建(较为复杂),也可以使用官方提供的已经构建好的模板,进行快速配置</span><br></pre></td></tr></table></figure><h4 id="简单的单文件组件示例"><a href="#简单的单文件组件示例" class="headerlink" title="简单的单文件组件示例"></a>简单的单文件组件示例</h4><p><img src="img/单文件组件.bmp" alt="单文件组件.bmp"></p><h4 id="复杂页面的组件化开发"><a href="#复杂页面的组件化开发" class="headerlink" title="复杂页面的组件化开发"></a>复杂页面的组件化开发</h4><blockquote><p>模块分离的思想</p><blockquote><p>将一个个单独的功能模块抽取成一个个单文件组件进行使用</p><blockquote><ol><li>在较大项目中降低文件结构的复杂度</li><li>便于页面内容的修改,也就是更新迭代,在修改文件内容的时候直接查找对应的单文件组件,变得更方便</li><li>最重要的一点,对于一些多次使用的组件,我们可以单独将其抽取,使用的时候直接调用,实现组件的复用</li></ol></blockquote></blockquote></blockquote><p><strong>在这一部分做一个简单的演示</strong></p><blockquote><p>在主页面,将整体的功能结构划分成头部—-主体—-底部三部分,每一部分提取成一个组件,具体实现如下</p></blockquote><p><img src="img/singleCom.png" alt=""></p><blockquote><p>完整功能的实现,完善App.vue和main.js</p></blockquote><p><img src="img/appMain.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十三部分-ES6简单扩展和单文件组件&quot;&gt;&lt;a href=&quot;#第十三部分-ES6简单扩展和单文件组件&quot; class=&quot;headerlink&quot; title=&quot;第十三部分  ES6简单扩展和单文件组件&quot;&gt;&lt;/a&gt;第十三部分  ES6简单扩展和单文件组件&lt;/h1&gt;&lt;bl
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="13-singlePage-es6" scheme="http://yoursite.com/categories/vue/13-singlePage-es6/"/>
    
    
  </entry>
  
  <entry>
    <title>12-webpack</title>
    <link href="http://yoursite.com/2018/05/10/vue/12-webpack/12-webpack/"/>
    <id>http://yoursite.com/2018/05/10/vue/12-webpack/12-webpack/</id>
    <published>2018-05-10T01:32:35.014Z</published>
    <updated>2018-05-10T01:36:09.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十二部分-webpack"><a href="#第十二部分-webpack" class="headerlink" title="第十二部分  webpack"></a>第十二部分  webpack</h1><blockquote><p>来自网络收集, 如有雷同,请见谅</p></blockquote><h2 id="Webpack-简介"><a href="#Webpack-简介" class="headerlink" title="Webpack 简介"></a>Webpack 简介</h2><p><a href="https://gitter.im/zhaoda/webpack-handbook?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="noopener"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/zhaoda/webpack-handbook"></a></p><p><a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">Webpack</a> 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>　介绍前端模块系统的演进历史，以及 Webpack 出现的背景及其特点。 <strong>详细信息可以参考下文</strong></p></blockquote><h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p><p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h4 id="模块系统的演进"><a href="#模块系统的演进" class="headerlink" title="模块系统的演进"></a>模块系统的演进</h4><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。</p><h4 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a>&lt;script&gt;标签</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"module1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"module2.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"libraryA.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"module3.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <a href="http://yuilibrary.com" target="_blank" rel="noopener">YUI</a> 库。</p><p>这种原始的加载方式暴露了一些显而易见的弊端：</p><ul><li>全局作用域下容易造成变量冲突</li><li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载</li><li>开发人员必须主观解决模块和代码库的依赖关系</li><li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li></ul><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><p>CommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，比如在服务器和桌面环境中。</p><p>这个项目最开始是由 Mozilla 的工程师 Kevin Dangoor 在2009年1月创建的，当时的名字是 ServerJS。</p><blockquote><p>我在这里描述的并不是一个技术问题，而是一件重大的事情，让大家走到一起来做决定，迈出第一步，来建立一个更大更酷的东西。 —— Kevin Dangoor’s <a href="http://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/" target="_blank" rel="noopener">What Server Side JavaScript needs</a></p></blockquote><p>2009年8月，这个项目改名为 CommonJS，以显示其 API 的更广泛实用性。CommonJS 是一套规范，它的创建和核准是开放的。这个规范已经有很多版本和具体实现。CommonJS 并不是属于 ECMAScript TC39 小组的工作，但 TC39 中的一些成员参与 CommonJS 的制定。2013年5月，Node.js 的包管理器 NPM 的作者 Isaac Z. Schlueter 说 <a href="https://github.com/nodejs/node-v0.x-archive/issues/5132#issuecomment-15432598" target="_blank" rel="noopener">CommonJS 已经过时，Node.js 的内核开发者已经废弃了该规范</a>。</p><p>CommonJS 规范是为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 <code>module.exports</code> 导出对外的变量或接口，通过 <code>require()</code> 来导入其他模块的输出到当前模块作用域中。</p><p>一个直观的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">var</span> multiplyBy2 = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="keyword">var</span> result = multiplyBy2(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>CommonJS 是同步加载模块，但其实也有浏览器端的实现，其原理是现将所有模块都定义好并通过 <code>id</code> 索引，这样就可以方便的在浏览器环境中解析了，可以参考 <a href="https://github.com/Stuk/require1k" target="_blank" rel="noopener">require1k</a> 和 <a href="https://github.com/ruanyf/tiny-browser-require" target="_blank" rel="noopener">tiny-browser-require</a> 的源码来理解其解析（resolve）的过程。</p><p>更多关于 CommonJS 规范的内容请查看 <a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="noopener">http://wiki.commonjs.org/wiki/CommonJS</a>。</p><h3 id="AMD-规范"><a href="#AMD-规范" class="headerlink" title="AMD 规范"></a>AMD 规范</h3><p>AMD（异步模块定义）是为浏览器环境设计的，因为 CommonJS 模块系统是同步加载的，当前浏览器环境还没有准备好同步加载模块的条件。</p><p>AMD 定义了一套 JavaScript 模块依赖异步加载标准，来解决同步加载的问题。</p><p>模块通过 <code>define</code> 函数定义在闭包中，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?: <span class="built_in">String</span>, dependencies?: <span class="built_in">String</span>[], <span class="attr">factory</span>: <span class="built_in">Function</span>|<span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure><p><code>id</code> 是模块的名字，它是可选的参数。</p><p><code>dependencies</code> 指定了所要依赖的模块列表，它是一个数组，也是可选的参数，每个依赖的模块的输出将作为参数一次传入 <code>factory</code> 中。如果没有指定 <code>dependencies</code>，那么它的默认值是 <code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;&#125;）</span><br></pre></td></tr></table></figure><p><code>factory</code> 是最后一个参数，它包裹了模块的具体实现，它是一个函数或者对象。如果是函数，那么它的返回值就是模块的输出接口或值。</p><p>一些用例：</p><p>定义一个名为 <code>myModule</code> 的模块，它依赖 <code>jQuery</code> 模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'myModule'</span>, [<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// $ 是 jquery 模块的输出</span></span><br><span class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'myModule'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myModule</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>注意：在 webpack 中，模块名只有局部作用域，在 Require.js 中模块名是全局作用域，可以在全局引用。</p><p>定义一个没有 <code>id</code> 值的匿名模块，通常作为应用的启动函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>依赖多个模块的定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>, <span class="string">'./math.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, math</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// $ 和 math 一次传入 factory</span></span><br><span class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模块输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> HelloWorldize = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">        $(selector).text(<span class="string">'hello world'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HelloWorldize 是该模块输出的对外接口</span></span><br><span class="line">    <span class="keyword">return</span> HelloWorldize;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在模块定义内部引用依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="commonjs和AMD的整体分析"><a href="#commonjs和AMD的整体分析" class="headerlink" title="commonjs和AMD的整体分析"></a>commonjs和AMD的整体分析</h3><p>1.服务器端<br>node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。</p><blockquote><p>假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//然后，就可以调用模块提供的方法：</span><br><span class="line">var math = require(&apos;math&apos;);</span><br><span class="line">math.add(2,3); // 5</span><br></pre></td></tr></table></figure></p></blockquote><p>2.服务器端模块系统适用于浏览器端吗?<br>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。<br>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var math = require(&apos;math&apos;);</span><br><span class="line">　　math.add(2, 3);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第二行math.add(2, 3)，在第一行require(&apos;math&apos;)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</span><br><span class="line">这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。</span><br><span class="line"></span><br><span class="line">但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于&quot;假死&quot;状态。</span><br><span class="line">因此，浏览器端的模块，不能采用&quot;同步加载&quot;（synchronous），只能采用&quot;异步加载&quot;（asynchronous）。这就是AMD规范诞生的背景。</span><br></pre></td></tr></table></figure><p>3.浏览器端的模块加载系统  AMD</p><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　require([module], callback);</span><br></pre></td></tr></table></figure></p><blockquote><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；<br>第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　require([&apos;math&apos;], function (math) &#123;</span><br><span class="line">　　　　math.add(2, 3);</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境</p></blockquote><blockquote><blockquote><p>目前，主要有两个Javascript库实现了AMD规范：<strong><a href="http://requirejs.org" target="_blank" rel="noopener">require.js</a></strong>和<strong><a href="https://github.com/cujojs/curl" target="_blank" rel="noopener">curl.js</a></strong></p></blockquote></blockquote><h2 id="什么是-Webpack"><a href="#什么是-Webpack" class="headerlink" title="什么是 Webpack"></a>什么是 Webpack</h2><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p><img src="img/what-is-webpack.png" alt="什么是webpack"></p><h3 id="为什么重复造轮子"><a href="#为什么重复造轮子" class="headerlink" title="为什么重复造轮子"></a>为什么重复造轮子</h3><p>市面上已经存在的模块管理和打包工具并不适合大型的项目，尤其单页面 Web 应用程序。最紧迫的原因是如何在一个大规模的代码库中，维护各种模块资源的分割和存放，维护它们之间的依赖关系，并且无缝的将它们整合到一起生成适合浏览器端请求加载的静态资源。</p><p>这些已有的模块化工具并不能很好的完成如下的目标：</p><ul><li>将依赖树拆分成按需加载的块</li><li>初始化加载的耗时尽量少</li><li>各种静态资源都可以视作模块</li><li>将第三方库整合成模块的能力</li><li>可以自定义打包逻辑的能力</li><li>适合大项目，无论是单页还是多页的 Web 应用</li></ul><h3 id="Webpack-的特点"><a href="#Webpack-的特点" class="headerlink" title="Webpack 的特点"></a>Webpack 的特点</h3><p>Webpack 和其他模块化工具有什么区别呢？</p><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p><h3 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h3><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 <code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code>。</p><h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p><h3 id="快速运行"><a href="#快速运行" class="headerlink" title="快速运行"></a>快速运行</h3><p>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p><h2 id="webpack基本使用-重点"><a href="#webpack基本使用-重点" class="headerlink" title="webpack基本使用(重点)"></a>webpack基本使用(重点)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>创建项目根目录</p></li><li><p>初始化</p><blockquote><p>npm init   或    npm init -y</p></blockquote></li><li><p>全局安装</p><blockquote><p>npm install webpack -g</p></blockquote></li><li><p>局部安装,在项目目录下安装   </p><blockquote><p>npm install webpack –save-dev</p><blockquote><p>–save: 将安装的包的信息保存在package中<br>–dev:开发版本,只是项目构建的时候使用,项目构建完成后并不依赖的文件</p></blockquote></blockquote></li><li><p>如果使用web开发工具,单独安装</p><blockquote><p>npm install webpack-dev-server –save-dev</p></blockquote></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li>首先创建一个静态页面 index.html 和一个 JS 入口文件 entry.js：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建entry.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// entry.js  : 在页面中打印出一句话</span><br><span class="line">document.write(&apos;It works.&apos;)</span><br></pre></td></tr></table></figure></li><li><p>然后编译 entry.js并打包到 bundle.js文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用npm命令  </span><br><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>1.创建模块module.js,在内部导出内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'It works from module.js'</span></span><br></pre></td></tr></table></figure><p>2.在entry.js中使用自定义的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//entry.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">'./module.js'</span>)) <span class="comment">// 添加模块</span></span><br></pre></td></tr></table></figure><h3 id="加载css模块"><a href="#加载css模块" class="headerlink" title="加载css模块"></a>加载css模块</h3><p>1.安装css-loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><p>2.创建css文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//style.css</span><br><span class="line">body &#123; background: yellow; &#125;</span><br></pre></td></tr></table></figure><p>3.修改 entry.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;!style-loader!css-loader!./style.css&quot;) // 载入 style.css</span><br><span class="line">document.write(&apos;It works.&apos;)</span><br><span class="line">document.write(require(&apos;./module.js&apos;))</span><br></pre></td></tr></table></figure><p><strong>补充</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果每次 require CSS 文件的时候都要写 loader 前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的 loader。</span><br><span class="line"></span><br><span class="line">将 entry.js 中的 require(&quot;!style!css!./style.css&quot;) 修改为 require(&quot;./style.css&quot;) ，然后执行：</span><br><span class="line"></span><br><span class="line">$ webpack entry.js bundle.js --module-bind &apos;css=style-loader!css-loader&apos;</span><br><span class="line"></span><br><span class="line">### 有些环境下可能需要使用双引号</span><br><span class="line">$ webpack entry.js bundle.js --module-bind &quot;css=style-loader!css-loader&quot;</span><br></pre></td></tr></table></figure><h3 id="创建配置文件webpack-config-js"><a href="#创建配置文件webpack-config-js" class="headerlink" title="创建配置文件webpack.config.js"></a>创建配置文件webpack.config.js</h3><p>1.创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./entry.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: &apos;bundle.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">    //同时简化 entry.js 中的 style.css 加载方式：require(&apos;./style.css&apos;)</span><br><span class="line">      &#123;test: /\.css$/, loader: &apos;style-loader!css-loader&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改 entry.js 中的 style.css 加载方式：require(‘./style.css’)</p><p>3.运行webpack</p><blockquote><p>在命令行页面直接输入webpack</p></blockquote><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>1.插件安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//添加注释的插件</span><br><span class="line">npm install --save-devbannerplugin</span><br><span class="line"></span><br><span class="line">---- 这个插件已经换成了一个内置的插件,不再需要独立安装了</span><br></pre></td></tr></table></figure><p>2.配置文件的书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">entry: &apos;./entry.js&apos;,</span><br><span class="line">output: &#123;</span><br><span class="line">path: __dirname,</span><br><span class="line">filename: &apos;bundle.js&apos;</span><br><span class="line">&#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">loaders: [</span><br><span class="line">//同时简化 entry.js 中的 style.css 加载方式：require(&apos;./style.css&apos;)</span><br><span class="line">&#123;</span><br><span class="line">test: /\.css$/,</span><br><span class="line">loader: &apos;style-loader!css-loader&apos;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">plugins: [</span><br><span class="line">//添加注释的插件</span><br><span class="line">new webpack.BannerPlugin(&apos;This file is created by zhaoda&apos;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.运行webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 可以在bundle.js的头部看到注释信息</span><br><span class="line">/*! This file is created by zhaoda */</span><br></pre></td></tr></table></figure><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack </span><br><span class="line"></span><br><span class="line">--progress : 显示编译的进度</span><br><span class="line"></span><br><span class="line">--colors ：　带颜色显示，美化输出</span><br><span class="line"></span><br><span class="line">--watch　：　开启监视器，不用每次变化后都手动编译</span><br></pre></td></tr></table></figure><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><blockquote><p>开启服务,以监听模式自动运行</p></blockquote><p>1.安装包 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -g --save-dev</span><br></pre></td></tr></table></figure><p>2.启动服务</p><blockquote><p>实时监控页面并自动刷新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server --progress --colors</span><br></pre></td></tr></table></figure><h3 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h3><p>1.安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>2.在配置文件中导入包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br></pre></td></tr></table></figure><p>3.在配置文件中使用插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">//添加注释的插件</span><br><span class="line">new webpack.BannerPlugin(&apos;This file is created by zhaoda&apos;),</span><br><span class="line">//自动编译</span><br><span class="line">new htmlWebpackPlugin(&#123;</span><br><span class="line">title: &quot;index&quot;,</span><br><span class="line">filename: &apos;index.html&apos;, //在内存中生成的网页的名称</span><br><span class="line">template: &apos;./index.html&apos; //生成网页名称的依据</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4.运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="设置快速启动"><a href="#设置快速启动" class="headerlink" title="设置快速启动"></a>设置快速启动</h3><blockquote><p>在package.json文件中完成配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充的知识点-作为参考的内容-了解"><a href="#补充的知识点-作为参考的内容-了解" class="headerlink" title="补充的知识点-作为参考的内容(了解)"></a>补充的知识点-作为参考的内容(了解)</h2><h4 id="npm使用补充-了解"><a href="#npm使用补充-了解" class="headerlink" title="npm使用补充(了解)"></a>npm使用补充(了解)</h4><blockquote><p>在接下来的课程中涉及到npm的相关知识,在这里给大家作一个简单的补充</p></blockquote><blockquote><p>这一部分知识点在渗透到项目的构建过程</p></blockquote><hr><p>title: npm命令</p><hr><blockquote><p>淘宝镜像:$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm config set registry=<a href="https://registry.npm.taobao.org(修改npm配置换源)" target="_blank" rel="noopener">https://registry.npm.taobao.org(修改npm配置换源)</a></p></blockquote><blockquote><p>nrm安装: nrm ls  nrm test</p></blockquote><h4 id="升级npm"><a href="#升级npm" class="headerlink" title="升级npm"></a>升级npm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install package_name</span><br><span class="line">npm install package_name -g   ---全局安装</span><br></pre></td></tr></table></figure><h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall package -g</span><br></pre></td></tr></table></figure><h4 id="查看安装的全局模块"><a href="#查看安装的全局模块" class="headerlink" title="查看安装的全局模块"></a>查看安装的全局模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g</span><br></pre></td></tr></table></figure><h4 id="初始化-package-json-文件"><a href="#初始化-package-json-文件" class="headerlink" title="初始化 package.json 文件"></a>初始化 package.json 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h4 id="安装指定包到当前项目"><a href="#安装指定包到当前项目" class="headerlink" title="安装指定包到当前项目"></a>安装指定包到当前项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install angular --save </span><br><span class="line"></span><br><span class="line">添加--save,可以在package.json的dependencies中添加依赖项</span><br><span class="line"></span><br><span class="line">--save-dev: 添加开发依赖,开发过程中使用的依赖,项目上线时可以不使用</span><br></pre></td></tr></table></figure><h4 id="卸载当前项目中的指定包"><a href="#卸载当前项目中的指定包" class="headerlink" title="卸载当前项目中的指定包"></a>卸载当前项目中的指定包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm remove --save angular</span><br><span class="line"></span><br><span class="line">npm uninstall --save angular</span><br></pre></td></tr></table></figure><h4 id="根据-package-json-文件中的依赖项安装所有包"><a href="#根据-package-json-文件中的依赖项安装所有包" class="headerlink" title="根据 package.json 文件中的依赖项安装所有包"></a>根据 package.json 文件中的依赖项安装所有包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="安全全局命令行工具"><a href="#安全全局命令行工具" class="headerlink" title="安全全局命令行工具"></a>安全全局命令行工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global http-server</span><br></pre></td></tr></table></figure><h4 id="卸载全局命令行工具"><a href="#卸载全局命令行工具" class="headerlink" title="卸载全局命令行工具"></a>卸载全局命令行工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall --global http-server</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>　介绍前端模块系统的演进历史，以及 Webpack 出现的背景及其特点。</p></blockquote><h4 id="模块系统-暂时是了解-以后是重点"><a href="#模块系统-暂时是了解-以后是重点" class="headerlink" title="模块系统(暂时是了解,以后是重点)"></a>模块系统(暂时是了解,以后是重点)</h4><h5 id="现状-1"><a href="#现状-1" class="headerlink" title="现状"></a>现状</h5><p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p><p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h5 id="模块系统的演进-1"><a href="#模块系统的演进-1" class="headerlink" title="模块系统的演进"></a>模块系统的演进</h5><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。</p><h5 id="lt-script-gt-标签-1"><a href="#lt-script-gt-标签-1" class="headerlink" title="&lt;script&gt;标签"></a>&lt;script&gt;标签</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"module1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"module2.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"libraryA.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"module3.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <a href="http://yuilibrary.com" target="_blank" rel="noopener">YUI</a> 库。</p><p>这种原始的加载方式暴露了一些显而易见的弊端：</p><ul><li>全局作用域下容易造成变量冲突</li><li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载</li><li>开发人员必须主观解决模块和代码库的依赖关系</li><li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li></ul><h5 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h5><p>服务器端的 Node.js 遵循 <a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS规范</a>，该规范的核心思想是允许模块通过 <code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>);</span><br><span class="line">exports.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = someValue;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>服务器端模块便于重用</li><li><a href="https://www.npmjs.com" target="_blank" rel="noopener">NPM</a> 中已经有将近20万个可以使用模块包</li><li>简单并容易使用</li></ul><p>缺点：</p><ul><li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li><li>不能非阻塞的并行加载多个模块</li></ul><p>实现：</p><ul><li>服务器端的 <a href="http://www.nodejs.org" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://browserify.org" target="_blank" rel="noopener">Browserify</a>，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大</li><li><a href="https://github.com/medikoo/modules-webmake" target="_blank" rel="noopener">modules-webmake</a>，类似Browserify，还不如 Browserify 灵活</li><li><a href="https://github.com/substack/wreq" target="_blank" rel="noopener">wreq</a>，Browserify 的前身</li></ul><h5 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h5><p><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="noopener">Asynchronous Module Definition</a> 规范其实只有一个主要接口 <code>define(id?, dependencies?, factory)</code>，它要在声明模块的时候指定所有的依赖 <code>dependencies</code>，并且还要当做形参传到 <code>factory</code> 中，对于依赖的模块提前执行，依赖前置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"module"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someExportedValue;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">"module"</span>, <span class="string">"../file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>适合在浏览器环境中异步加载模块</li><li>可以并行加载多个模块</li></ul><p>缺点：</p><ul><li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li><li>不符合通用的模块化思维方式，是一种妥协的实现</li></ul><p>实现：</p><ul><li><a href="http://requirejs.org" target="_blank" rel="noopener">RequireJS</a></li><li><a href="https://github.com/cujojs/curl" target="_blank" rel="noopener">curl</a></li></ul><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">Common Module Definition</a> 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line">  exports.doSomething = ...</span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>依赖就近，延迟执行</li><li>可以很容易在 Node.js 中运行</li></ul><p>缺点：</p><ul><li>依赖 SPM 打包，模块的加载逻辑偏重</li></ul><p>实现：</p><ul><li><a href="http://seajs.org/" target="_blank" rel="noopener">Sea.js</a></li><li><a href="https://github.com/cloudcome/coolie" target="_blank" rel="noopener">coolie</a></li></ul><h5 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h5><p><a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">Universal Module Definition</a> 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。</p><h5 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h5><p>ECMAScript6 标准增加了 JavaScript 语言层面的模块体系定义。<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6 模块</a>的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"jquery"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">module</span> <span class="string">"localModule"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>容易进行静态分析</li><li>面向未来的 ECMAScript 标准</li></ul><p>缺点：</p><ul><li>原生浏览器端还没有实现该标准</li><li>全新的命令字，新版的 Node.js才支持</li></ul><p>实现：</p><ul><li><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a></li></ul><h5 id="期望的模块系统"><a href="#期望的模块系统" class="headerlink" title="期望的模块系统"></a>期望的模块系统</h5><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。</p><h5 id="前端模块加载"><a href="#前端模块加载" class="headerlink" title="前端模块加载"></a>前端模块加载</h5><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。</p><p>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。</p><p><strong>分块传输</strong>，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。</p><p>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。</p><h5 id="所有资源都是模块"><a href="#所有资源都是模块" class="headerlink" title="所有资源都是模块"></a>所有资源都是模块</h5><p>在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。</p><p>如果他们都可以视作模块，并且都可以通过<code>require</code>的方式来加载，将带来优雅的开发体验，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./style.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./style.less"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./template.jade"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./image.png"</span>);</span><br></pre></td></tr></table></figure><p>那么如何做到让 <code>require</code> 能加载各种资源呢？</p><h5 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h5><p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。Webpack 就是在这样的需求中应运而生。</p><p>同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。</p><p>那么接下来，让我们开始 Webpack 的神奇之旅吧。</p><h4 id="重复的轮子"><a href="#重复的轮子" class="headerlink" title="重复的轮子"></a>重复的轮子</h4><h5 id="什么是-Webpack-1"><a href="#什么是-Webpack-1" class="headerlink" title="什么是 Webpack"></a>什么是 Webpack</h5><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p><img src="img/what-is-webpack.png" alt="什么是webpack"></p><h5 id="为什么重复造轮子-1"><a href="#为什么重复造轮子-1" class="headerlink" title="为什么重复造轮子"></a>为什么重复造轮子</h5><p>市面上已经存在的模块管理和打包工具并不适合大型的项目，尤其单页面 Web 应用程序。最紧迫的原因是如何在一个大规模的代码库中，维护各种模块资源的分割和存放，维护它们之间的依赖关系，并且无缝的将它们整合到一起生成适合浏览器端请求加载的静态资源。</p><p>这些已有的模块化工具并不能很好的完成如下的目标：</p><ul><li>将依赖树拆分成按需加载的块</li><li>初始化加载的耗时尽量少</li><li>各种静态资源都可以视作模块</li><li>将第三方库整合成模块的能力</li><li>可以自定义打包逻辑的能力</li><li>适合大项目，无论是单页还是多页的 Web 应用</li></ul><h5 id="Webpack-的特点-1"><a href="#Webpack-的特点-1" class="headerlink" title="Webpack 的特点"></a>Webpack 的特点</h5><p>Webpack 和其他模块化工具有什么区别呢？</p><h5 id="代码拆分-1"><a href="#代码拆分-1" class="headerlink" title="代码拆分"></a>代码拆分</h5><p>Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p><h5 id="Loader-1"><a href="#Loader-1" class="headerlink" title="Loader"></a>Loader</h5><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p><h5 id="智能解析-1"><a href="#智能解析-1" class="headerlink" title="智能解析"></a>智能解析</h5><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 <code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code>。</p><h5 id="插件系统-1"><a href="#插件系统-1" class="headerlink" title="插件系统"></a>插件系统</h5><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p><h5 id="快速运行-1"><a href="#快速运行-1" class="headerlink" title="快速运行"></a>快速运行</h5><p>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p><h3 id="准备开始-重点"><a href="#准备开始-重点" class="headerlink" title="准备开始(重点)"></a>准备开始(重点)</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>首先要安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。</p><p>用 npm 安装 Webpack：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack -g</span><br></pre></td></tr></table></figure><p>此时 Webpack 已经安装到了全局环境下，可以通过命令行 <code>webpack -h</code> 试试。</p><p>通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 进入项目目录</span></span><br><span class="line"><span class="comment">#### 确定已经有 package.json，没有就通过 npm init 创建</span></span><br><span class="line"><span class="comment">#### 安装 webpack 依赖</span></span><br><span class="line">$ npm install webpack --save-dev</span><br></pre></td></tr></table></figure><p>Webpack 目前有两个主版本，一个是在 master 主干的稳定版，一个是在 webpack-2 分支的测试版，测试版拥有一些实验性功能并且和稳定版不兼容，在正式项目中应该使用稳定版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##### 查看 webpack 版本信息</span></span><br><span class="line">$ npm info webpack</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 安装指定版本的 webpack</span></span><br><span class="line">$ npm install webpack@1.12.x --save-dev</span><br></pre></td></tr></table></figure><p>如果需要使用 Webpack 开发工具，要单独安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>首先创建一个静态页面 index.html 和一个 JS 入口文件 entry.js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</span><br></pre></td></tr></table></figure><p>然后编译 entry.js 并打包到 bundle.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack entry.js bundle.js</span><br></pre></td></tr></table></figure><p>打包过程会显示日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hash: e964f90ec65eb2c29bb9</span><br><span class="line">Version: webpack 1.12.2</span><br><span class="line">Time: 54ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  1.42 kB       0  [emitted]  main</span><br><span class="line">   [0] ./entry.js 27 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><p>用浏览器打开 <code>index.html</code> 将会看到 <code>It works.</code> 。</p><p>接下来添加一个模块 <code>module.js</code> 并修改入口 <code>entry.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'It works from module.js.'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">'./module.js'</span>)) <span class="comment">// 添加模块</span></span><br></pre></td></tr></table></figure><p>重新打包 <code>webpack entry.js bundle.js</code> 后刷新页面看到变化 <code>It works.It works from module.js.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hash: 279c7601d5d08396e751</span><br><span class="line">Version: webpack 1.12.2</span><br><span class="line">Time: 63ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class="line">   [0] ./entry.js 66 bytes &#123;0&#125; [built]</span><br><span class="line">   [1] ./module.js 43 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><p>Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 <code>require</code> 的时候再执行。</p><h4 id="Loader-2"><a href="#Loader-2" class="headerlink" title="Loader"></a>Loader</h4><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p><p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 <code>require</code> 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。</p><p>先来看看 loader 有哪些特性？</p><ul><li>Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。</li><li>Loader 可以同步或异步执行。</li><li>Loader 运行在 node.js 环境中，所以可以做任何可能的事情。</li><li>Loader 可以接受参数，以此来传递配置项给 loader。</li><li>Loader 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li><li>Loader 可以通过 <code>npm</code> 发布和安装。</li><li>除了通过 <code>package.json</code> 的 <code>main</code> 指定，通常的模块也可以导出一个 loader 来使用。</li><li>Loader 可以访问配置。</li><li>插件可以让 loader 拥有更多特性。</li><li>Loader 可以分发出附加的任意文件。</li></ul><p>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。</p><p>按照惯例，而非必须，loader 一般以 <code>xxx-loader</code> 的方式命名，<code>xxx</code> 代表了这个 loader 要做的转换功能，比如 <code>json-loader</code>。</p><p>在引用 loader 的时候可以使用全名 <code>json-loader</code>，或者使用短名 <code>json</code>。这个命名规则和搜索优先级顺序在 webpack 的 <code>resolveLoader.moduleTemplates</code> api 中定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Default: [&quot;*-webpack-loader&quot;, &quot;*-web-loader&quot;, &quot;*-loader&quot;, &quot;*&quot;]</span><br></pre></td></tr></table></figure><p>Loader 可以在 <code>require()</code> 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。</p><p>接上一节的例子，我们要在页面中引入一个 CSS 文件 style.css，首页将 style.css 也看成是一个模块，然后用 <code>css-loader</code> 来读取它，再用 <code>style-loader</code> 把它插入到页面中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: yellow; &#125;</span><br></pre></td></tr></table></figure><p>修改 entry.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"!style-loader!css-loader!./style.css"</span>) <span class="comment">// 载入 style.css</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">'./module.js'</span>))</span><br></pre></td></tr></table></figure><p>安装 loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader</span><br></pre></td></tr></table></figure><p>重新编译打包，刷新页面，就可以看到黄色的页面背景了。</p><p>如果每次 <code>require</code> CSS 文件的时候都要写 loader 前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的 loader。</p><p>将 entry.js 中的 <code>require(&quot;!style!css!./style.css&quot;)</code> 修改为 <code>require(&quot;./style.css&quot;)</code> ，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ webpack entry.js bundle.js --module-bind <span class="string">'css=style-loader!css-loader'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 有些环境下可能需要使用双引号</span></span><br><span class="line">$ webpack entry.js bundle.js --module-bind <span class="string">"css=style-loader!css-loader"</span></span><br></pre></td></tr></table></figure><p>显然，这两种使用 loader 的方式，效果是一样的。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js</code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。</p><p>继续我们的案例，在根目录创建 <code>package.json</code> 来添加 webpack 需要的依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack-example"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A simple webpack example."</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"bundle.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"webpack"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"zhaoda"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.21.0"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.13.0"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.12.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 如果没有写入权限，请尝试如下代码更改权限</span></span><br><span class="line">chflags -R nouchg .</span><br><span class="line">sudo chmod  775 package.json</span><br></pre></td></tr></table></figure><p>别忘了运行 <code>npm install</code>。</p><p>然后创建一个配置文件 <code>webpack.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./entry.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时简化 <code>entry.js</code> 中的 <code>style.css</code> 加载方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./style.css'</span>)</span><br></pre></td></tr></table></figure><p>最后运行 <code>webpack</code>，可以看到 webpack 通过配置文件执行的结果和上一章节通过命令行 <code>webpack entry.js bundle.js --module-bind &#39;css=style-loader!css-loader&#39;</code> 执行的结果是一样的。</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>插件可以完成更多 loader 不能完成的功能。</p><p>插件的使用一般是在 webpack 的配置信息 <code>plugins</code> 选项中指定。</p><p>Webpack 本身内置了一些常用的插件，还可以通过 npm 安装第三方插件。</p><p>接下来，我们利用一个最简单的 <code>BannerPlugin</code> 内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息。</p><p>修改 <code>webpack.config.js</code>，添加 <code>plugins</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./entry.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'This file is created by zhaoda'</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行 <code>webpack</code>，打开 <code>bundle.js</code>，可以看到文件头部出现了我们指定的注释信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! This file is created by zhaoda */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">// 后面代码省略</span></span><br></pre></td></tr></table></figure><h4 id="开发环境-1"><a href="#开发环境-1" class="headerlink" title="开发环境"></a>开发环境</h4><p>当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --progress --colors</span><br></pre></td></tr></table></figure><p>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --progress --colors --watch</span><br></pre></td></tr></table></figure><p>当然，使用 <code>webpack-dev-server</code> 开发服务是一个更好的选择。它将在 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack，在浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 或 <a href="http://localhost:8080/webpack-dev-server/" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/</a> 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 安装</span></span><br><span class="line">$ npm install webpack-dev-server -g</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 运行</span></span><br><span class="line">$ webpack-dev-server --progress --colors</span><br></pre></td></tr></table></figure><h4 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h4><p>Webpack 的配置比较复杂，很容出现错误，下面是一些通常的故障处理手段。</p><p>一般情况下，webpack 如果出问题，会打印一些简单的错误信息，比如模块没有找到。我们还可以通过参数 <code>--display-error-details</code> 来打印错误详情。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --display-error-details</span><br><span class="line"></span><br><span class="line">Hash: a40fbc6d852c51fceadb</span><br><span class="line">Version: webpack 1.12.2</span><br><span class="line">Time: 586ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  12.1 kB       0  [emitted]  main</span><br><span class="line">   [0] ./entry.js 153 bytes &#123;0&#125; [built] [1 error]</span><br><span class="line">   [5] ./module.js 43 bytes &#123;0&#125; [built]</span><br><span class="line">    + 4 hidden modules</span><br><span class="line"></span><br><span class="line">ERROR <span class="keyword">in</span> ./entry.js</span><br><span class="line">Module not found: Error: Cannot resolve <span class="string">'file'</span> or <span class="string">'directory'</span> ./badpathmodule <span class="keyword">in</span> /Users/zhaoda/data/projects/webpack-handbook/examples</span><br><span class="line">resolve file</span><br><span class="line">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn<span class="string">'t exist</span></span><br><span class="line"><span class="string">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js doesn'</span>t exist</span><br><span class="line">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js doesn<span class="string">'t exist</span></span><br><span class="line"><span class="string">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js doesn'</span>t exist</span><br><span class="line">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json doesn<span class="string">'t exist</span></span><br><span class="line"><span class="string">resolve directory</span></span><br><span class="line"><span class="string">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn'</span>t exist (directory default file)</span><br><span class="line">  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule/package.json doesn<span class="string">'t exist (directory description file)</span></span><br><span class="line"><span class="string">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule]</span></span><br><span class="line"><span class="string">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js]</span></span><br><span class="line"><span class="string">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js]</span></span><br><span class="line"><span class="string">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js]</span></span><br><span class="line"><span class="string">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json]</span></span><br><span class="line"><span class="string"> @ ./entry.js 3:0-26</span></span><br></pre></td></tr></table></figure><p>Webpack 的配置提供了 <code>resolve</code> 和 <code>resolveLoader</code> 参数来设置模块解析的处理细节，<code>resolve</code> 用来配置应用层的模块（要被打包的模块）解析，<code>resolveLoader</code> 用来配置 <code>loader</code> 模块的解析。</p><p>当引入通过 npm 安装的 node.js 模块时，可能出现找不到依赖的错误。Node.js 模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的 <code>node_modules</code> 文件夹来查询依赖的。当出现 Node.js 模块依赖查找失败的时候，可以尝试设置 <code>resolve.fallback</code> 和 <code>resolveLoader.fallback</code> 来解决问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123; <span class="attr">fallback</span>: path.join(__dirname, <span class="string">"node_modules"</span>) &#125;,</span><br><span class="line">  resolveLoader: &#123; <span class="attr">fallback</span>: path.join(__dirname, <span class="string">"node_modules"</span>) &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Webpack 中涉及路径配置最好使用绝对路径，建议通过 <code>path.resolve(__dirname, &quot;app/folder&quot;)</code> 或 <code>path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)</code> 的方式来配置，以兼容 Windows 环境。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><h4 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h4><ul><li><a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS 规范</a></li><li><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="noopener">Asynchronous Module Definition</a></li><li><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">Common Module Definition</a></li><li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD 模块定义规范</a></li><li><a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">Universal Module Definition</a></li><li><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ECMAScript 6 Module</a></li><li><a href="http://www.75team.com/archives/882" target="_blank" rel="noopener">什么是 AMD、 CommonJS、 UMD</a></li><li><a href="http://my.oschina.net/felumanman/blog/263330" target="_blank" rel="noopener">关于 CommonJS AMD CMD UMD</a></li><li><a href="http://blog.3gcnbeta.com/2014/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%8E%A8%E8%8D%90requirejs-%E8%80%8C%E4%B8%8D%E6%98%AFseajs/" target="_blank" rel="noopener">为什么我推荐 requirejs 而不是 seajs</a></li><li><a href="http://www.zhihu.com/question/20351507" target="_blank" rel="noopener">AMD 和 CMD 的区别有哪些</a></li><li><a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="noopener">前端模块化开发的价值</a></li><li><a href="http://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/" target="_blank" rel="noopener">What Server Side JavaScript needs</a></li></ul><h4 id="模块系统-1"><a href="#模块系统-1" class="headerlink" title="模块系统"></a>模块系统</h4><ul><li><a href="http://requirejs.org" target="_blank" rel="noopener">RequireJS</a></li><li><a href="https://github.com/cujojs/curl" target="_blank" rel="noopener">curl</a></li><li><a href="http://seajs.org/" target="_blank" rel="noopener">Sea.js</a></li><li><a href="https://github.com/cloudcome/coolie" target="_blank" rel="noopener">coolie</a></li><li><a href="http://browserify.org" target="_blank" rel="noopener">Browserify</a></li><li><a href="https://github.com/medikoo/modules-webmake" target="_blank" rel="noopener">modules-webmake</a></li><li><a href="https://github.com/substack/wreq" target="_blank" rel="noopener">wreq</a></li></ul><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><ul><li><a href="http://webpack.github.io/docs/" target="_blank" rel="noopener">Webpack 官方文档</a></li><li><a href="https://fakefish.github.io/react-webpack-cookbook/" target="_blank" rel="noopener">React Webpack cookbook</a></li></ul><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul><li><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十二部分-webpack&quot;&gt;&lt;a href=&quot;#第十二部分-webpack&quot; class=&quot;headerlink&quot; title=&quot;第十二部分  webpack&quot;&gt;&lt;/a&gt;第十二部分  webpack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;来自网络收集, 如有雷
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="12-webpack" scheme="http://yoursite.com/categories/vue/12-webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>11-vuex</title>
    <link href="http://yoursite.com/2018/05/10/vue/11-vuex/11-vuex/"/>
    <id>http://yoursite.com/2018/05/10/vue/11-vuex/11-vuex/</id>
    <published>2018-05-10T01:32:35.012Z</published>
    <updated>2018-05-10T01:35:27.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一部分-Vuex"><a href="#第十一部分-Vuex" class="headerlink" title="第十一部分  Vuex"></a>第十一部分  Vuex</h1><p><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">参考链接</a></p><h2 id="vuex概述"><a href="#vuex概述" class="headerlink" title="vuex概述"></a>vuex概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>在Vue中，多组件的开发给我们带来了很多的方便，但同时当项目规模变大的时候，多个组件间的数据通信和状态管理就显得难以维护。<br>会造成我们的整个项目维护起来非常的困难。能不能把各个组件的逻辑，数据源和方法整合到一个地方？</p></blockquote><blockquote><p>而Vuex就此应运而生。</p><blockquote><p>将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了</p></blockquote></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p></blockquote><h3 id="什么情况下我应该使用-Vuex？"><a href="#什么情况下我应该使用-Vuex？" class="headerlink" title="什么情况下我应该使用 Vuex？"></a>什么情况下我应该使用 Vuex？</h3><blockquote><p>虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p></blockquote><blockquote><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。<br>但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。</p></blockquote><h2 id="vuex的安装"><a href="#vuex的安装" class="headerlink" title="vuex的安装"></a>vuex的安装</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>不同的使用方式:</strong></p><p>1.直接引入本地下载vuex.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//快捷下载的方式--------------npm install vuex --save-dev</span><br><span class="line">&lt;script src=&quot;/path/to/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/path/to/vuex.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.cdn加速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/vuex</span><br></pre></td></tr></table></figure><h3 id="模块化使用"><a href="#模块化使用" class="headerlink" title="模块化使用"></a>模块化使用</h3><blockquote><p>在一个模块化的打包系统中，您必须显式地通过 Vue.use() 来安装 Vuex：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//commonjs规范</span><br><span class="line">var Vue  = require(&apos;vue&apos;)</span><br><span class="line">var Vuex = require(&apos;vuex&apos;)</span><br><span class="line"></span><br><span class="line">//es6的使用方式</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><blockquote><p>vue的实现依赖于 <code>promise</code> , 如果浏览器不支持promise, 可以使用 <code>polyfill</code> 来解决这个问题</p></blockquote><p><strong>polyfill</strong></p><blockquote><p>Polyfill你可以理解为“腻子”，就是装修的时候，可以把缺损的地方填充抹平。</p></blockquote><p>举个例子，html5的storage(session,local), 不同浏览器，不同版本，有些支持，有些不支持。</p><p>我们又想使用这个特性，怎么办？</p><p>有些人就写对应的Polyfill（Polyfill有很多），帮你把这些差异化抹平，不支持的变得支持了（简单来讲，写些代码判断当前浏览器有没有这个功能，没有的话，就写一些支持的补丁代码）。</p><p>你只需要把需要的Polyfill引入到你的程序里，就可以了。 网上有很多polyfill的相关内容  直接引入就可以了</p><p><strong>当浏览器不支持promise的时候,我们可以引入polyfill来解决这个问题</strong></p><blockquote><p>使用es6-promise就可以以解决这个问题</p></blockquote><ol><li>你可以通过 CDN 将其引入：</li></ol><p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js&quot;&gt;&lt;/script&gt;</code><br>然后 window.Promise 会自动可用。</p><ol start="2"><li>如果你喜欢使用诸如 npm 或 Yarn 等包管理器，可以按照下列方式执行安装：</li></ol><p><code>npm install es6-promise --save # npmyarn add es6-promise # Yarn</code></p><ol start="3"><li>或者更进一步，将下列代码添加到你使用 Vuex 之前的一个地方：</li></ol><p><code>import &#39;es6-promise/auto&#39;</code></p><h2 id="vuex的基本使用"><a href="#vuex的基本使用" class="headerlink" title="vuex的基本使用"></a>vuex的基本使用</h2><blockquote><p>每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你的应用中大部分的状态(state)。Vuex 和单纯的全局对象有以下两点不同：</p></blockquote><blockquote><blockquote><ol><li>Vuex 的状态存储是响应式的(数据的双向绑定)。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，<br>从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol></blockquote></blockquote><h3 id="state-—-单一状态树"><a href="#state-—-单一状态树" class="headerlink" title="state — 单一状态树"></a>state — 单一状态树</h3><blockquote><p>可以简单的理解成数据模型这个数据模型在整个应用中是唯一的</p></blockquote><blockquote><blockquote><p>它是用一个对象包含了应用的所有的<strong>状态  (数据)</strong>,至此,作为<strong>唯一数据源</strong>儿存在</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>每一个应用将仅仅包含一个vuex.store的实例, </p></blockquote></blockquote></blockquote><h3 id="mutations-—-状态更改"><a href="#mutations-—-状态更改" class="headerlink" title="mutations  — 状态更改"></a>mutations  — 状态更改</h3><blockquote><p>通俗来说,也就是进行数据的修改</p></blockquote><blockquote><blockquote><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutations 非常类似于methods和事件</p></blockquote></blockquote><p><img src="img/vuex基本使用.bmp" alt="vuex基本使用.bmp"></p><h2 id="使用vuex进行数据的操作"><a href="#使用vuex进行数据的操作" class="headerlink" title="使用vuex进行数据的操作"></a>使用vuex进行数据的操作</h2><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p><strong>在vue组件中获取vuex的状态,每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/vue.resource/1.2.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vuex&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">                &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const store = new Vuex.Store(&#123;</span><br><span class="line">        //状态----数据模型</span><br><span class="line">        state: &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        //改变----数据操作----箭头函数</span><br><span class="line">        mutations: &#123;</span><br><span class="line">            //increment: state =&gt; state.count++,</span><br><span class="line">            increment: function(state) &#123;</span><br><span class="line">                state.count++</span><br><span class="line">            &#125;,</span><br><span class="line">            //decrement: state =&gt; state.count-- </span><br><span class="line">            decrement: function(state) &#123;</span><br><span class="line">                state.count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            //在vue中获取vuex的状态----状态存储是响应式的(数据的双向绑定)</span><br><span class="line">            //从store实例中读取数据最简单的方式就是在计算属性中获取某个值</span><br><span class="line">            count() &#123;</span><br><span class="line">                return store.state.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            increment() &#123;</span><br><span class="line">                store.commit(&apos;increment&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            decrement() &#123;</span><br><span class="line">                store.commit(&apos;decrement&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><blockquote><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。<br>为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/vue.resource/1.2.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vuex&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">                &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const store = new Vuex.Store(&#123;</span><br><span class="line">        //状态----数据模型</span><br><span class="line">        state: &#123;</span><br><span class="line">            count: 0,</span><br><span class="line">            test:100,</span><br><span class="line">        &#125;,</span><br><span class="line">        //改变----数据操作----箭头函数</span><br><span class="line">        mutations: &#123;</span><br><span class="line">            //increment: state =&gt; state.count++,</span><br><span class="line">            increment: function(state) &#123;</span><br><span class="line">                state.count++</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            //decrement: state =&gt; state.count-- </span><br><span class="line">            decrement: function(state) &#123;</span><br><span class="line">                state.count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        store,</span><br><span class="line">        computed: Vuex.mapState(&#123;</span><br><span class="line">            //当需要使用多个数据的的时候,使用计算属性就显得不方便,vuex提供了一种新的方式</span><br><span class="line">            //为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性</span><br><span class="line">            count:function() &#123;</span><br><span class="line">                return store.state.count + store.state.test</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        methods: &#123;</span><br><span class="line">            increment() &#123;</span><br><span class="line">                store.commit(&apos;increment&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            decrement() &#123;</span><br><span class="line">                store.commit(&apos;decrement&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件间数据的共享"><a href="#组件间数据的共享" class="headerlink" title="组件间数据的共享"></a>组件间数据的共享</h3><blockquote><p>类比于之前所学的内容</p></blockquote><blockquote><blockquote><p>数据传递的几种方式,在这里简单的回顾</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.父组件数据向子组件传递</span><br><span class="line">props</span><br><span class="line"></span><br><span class="line">2.子组件数据向父组件传递</span><br><span class="line">$on(v-on)     $emit</span><br><span class="line"></span><br><span class="line">3.非父子组件数据传递</span><br><span class="line">$on  $emit    bus</span><br></pre></td></tr></table></figure><p><strong>使用vuex实现组件间数据的传递—-数据共享:(了解)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/vue.resource/1.2.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vuex&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &#123;&#123;count&#125;&#125;</span><br><span class="line">            &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;template id=&quot;parent&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button @click=&apos;parent&apos;&gt;在父组件内操作数据++&lt;/button&gt;</span><br><span class="line">                &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;child&gt;&lt;/child&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template id=&quot;child&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button @click=&apos;child&apos;&gt;在子组件内操作数据--&lt;/button&gt;</span><br><span class="line">                &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var store = new Vuex.Store(&#123;</span><br><span class="line">        //状态,共享数据模型</span><br><span class="line">        state: &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        //变化</span><br><span class="line">        //改变----数据操作----箭头函数</span><br><span class="line">        mutations: &#123;</span><br><span class="line">            //increment: state =&gt; state.count++,</span><br><span class="line">            parent: function(state) &#123;</span><br><span class="line">                state.count++</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            //decrement: state =&gt; state.count-- </span><br><span class="line">            child: function(state) &#123;</span><br><span class="line">                state.count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        store: store,</span><br><span class="line">        //我是父组件</span><br><span class="line">        computed: &#123;</span><br><span class="line">            count: function() &#123;</span><br><span class="line">                return store.state.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;parent&apos;: &#123;</span><br><span class="line">                template: &quot;#parent&quot;,</span><br><span class="line">                computed: &#123;</span><br><span class="line">                    count: function() &#123;</span><br><span class="line">                        return store.state.count</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    parent() &#123;</span><br><span class="line">                        store.commit(&apos;parent&apos;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                //我是子组件</span><br><span class="line">                components: &#123;</span><br><span class="line">                    &apos;child&apos;: &#123;</span><br><span class="line">                        template: &quot;#child&quot;,</span><br><span class="line">                        computed: &#123;</span><br><span class="line">                            count: function() &#123;</span><br><span class="line">                                return store.state.count</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        methods: &#123;</span><br><span class="line">                            child() &#123;</span><br><span class="line">                                store.commit(&apos;child&apos;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十一部分-Vuex&quot;&gt;&lt;a href=&quot;#第十一部分-Vuex&quot; class=&quot;headerlink&quot; title=&quot;第十一部分  Vuex&quot;&gt;&lt;/a&gt;第十一部分  Vuex&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh-c
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="11-vuex" scheme="http://yoursite.com/categories/vue/11-vuex/"/>
    
    
  </entry>
  
  <entry>
    <title>10-axios</title>
    <link href="http://yoursite.com/2018/05/10/vue/10-http/10-3-axios/"/>
    <id>http://yoursite.com/2018/05/10/vue/10-http/10-3-axios/</id>
    <published>2018-05-10T01:32:35.011Z</published>
    <updated>2018-05-10T01:35:36.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axiso-有待完善"><a href="#axiso-有待完善" class="headerlink" title="axiso(有待完善)"></a>axiso(有待完善)</h2><blockquote><p>用于浏览器和node.js的基于Promise的HTTP客户端</p></blockquote><h3 id="axios-有待完善—-重点"><a href="#axios-有待完善—-重点" class="headerlink" title="axios(有待完善—-重点)"></a>axios(有待完善—-重点)</h3><h4 id="axios具体用来做什么"><a href="#axios具体用来做什么" class="headerlink" title="axios具体用来做什么"></a>axios具体用来做什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">从浏览器中创建XMLHttpRequests</span><br><span class="line"></span><br><span class="line">支持在node.js中发送http请求</span><br><span class="line"></span><br><span class="line">支持Promise API</span><br><span class="line"></span><br><span class="line">----------------------截取请求和响应</span><br><span class="line"></span><br><span class="line">转换请求和响应数据</span><br><span class="line"></span><br><span class="line">----------------------取消请求</span><br><span class="line"></span><br><span class="line">自动转换JSON数据</span><br><span class="line"></span><br><span class="line">----------------------客户端支持防范XSRF</span><br></pre></td></tr></table></figure><h4 id="为什么要学习axios"><a href="#为什么要学习axios" class="headerlink" title="为什么要学习axios"></a>为什么要学习axios</h4><blockquote><p>vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios</p></blockquote><h4 id="axiso的基本使用"><a href="#axiso的基本使用" class="headerlink" title="axiso的基本使用"></a>axiso的基本使用</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><blockquote><p>使用npm安装并引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><blockquote><p>使用cdn</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src=&apos;https://unpkg.com/axios/dist/axios.min.js&apos;&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="axios的get请求"><a href="#axios的get请求" class="headerlink" title="axios的get请求"></a>axios的get请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;sendGet()&quot;&gt;发送get请求&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sendGet: function() &#123;</span><br><span class="line">                //这里的this指代的是   vm对象</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">                axios.get(url).then(function(res) &#123;</span><br><span class="line">                    console.log(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="axios的post请求"><a href="#axios的post请求" class="headerlink" title="axios的post请求"></a>axios的post请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--添加一条数据--&gt;</span><br><span class="line">            &lt;button v-on:click=&apos;add()&apos;&gt;添加&lt;/button&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--定义文本框--&gt;</span><br><span class="line">            &lt;table class=&quot;text&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;name：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&apos;name&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;age：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt; &lt;input type=&quot;text&quot; v-model=&apos;age&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;sex：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&apos;sex&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;classroom：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt; &lt;input type=&quot;text&quot; v-model=&apos;classroom&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">            &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;条数&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;sex&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tr v-for=&quot;(data,index) in arr&quot;&gt;</span><br><span class="line">                    &lt;td&gt;第&#123;&#123;index+1&#125;&#125;条&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.sex&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;!--点击按钮的时候删除一条数据--&gt;</span><br><span class="line">                        &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &quot;hello vue!&quot;,</span><br><span class="line">        arr: [],</span><br><span class="line"></span><br><span class="line">        //定义文本框绑定值</span><br><span class="line">        name: &quot;&quot;,</span><br><span class="line">        age: &quot;&quot;,</span><br><span class="line">        sex: &quot;&quot;,</span><br><span class="line">        classroom: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel,</span><br><span class="line">        //创建生命周期钩子,初始化页面渲染</span><br><span class="line">        created: function() &#123;</span><br><span class="line">            this.query()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">            //将数据查询的操作封装成一个方法------&gt;   封装一个query方法</span><br><span class="line">            query() &#123;</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">                axios.get(url).then((res) =&gt; &#123;</span><br><span class="line">                    this.arr = res.data</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            //添加一条动态的数据</span><br><span class="line">            add: function() &#123;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                //1. 定义的url路径,也就是请求的路径</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/add1.php&quot;</span><br><span class="line"></span><br><span class="line">                //2. 发送的数据</span><br><span class="line">                var bodyData = `name=$&#123;this.name&#125;&amp;age=$&#123;this.age&#125;&amp;sex=$&#123;this.sex&#125;&amp;classroom=$&#123;this.classroom&#125;`</span><br><span class="line"></span><br><span class="line">                //4. 使用vue-resource发送请求</span><br><span class="line">                axios.post(url, bodyData).then((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                    console.log(res.data)</span><br><span class="line"></span><br><span class="line">                    //重新查询</span><br><span class="line">                    this.query()</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>使用post请求的注意事项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">数据请求的参数有两个</span><br><span class="line"></span><br><span class="line">    参数1: 请求的路径</span><br><span class="line">    参数2: 发送的数据-------发送的数据需要拼接成查询字符串的形式才可以</span><br></pre></td></tr></table></figure><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p><strong>axiso本身不支持jsonp请求</strong></p><blockquote><p>vue提供的的有一个发送跨域请求的插件  vue-jsonp,需要配合项目模板使用,</p><p>先作为连接内容,—–后期进行讲解</p></blockquote><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 安装vue的jsonp模块</span><br><span class="line"></span><br><span class="line">        npm install vue-jsonp --save</span><br><span class="line"></span><br><span class="line">2. 使用vue的jsonp模块</span><br><span class="line"></span><br><span class="line">        import VueJsonp from &apos;vue-jsonp&apos;</span><br><span class="line">        Vue.use(VueJsonp)</span><br><span class="line"></span><br><span class="line">3. 发送jsonp请求 </span><br><span class="line"></span><br><span class="line">        var url =&apos;http://api.douban.com/v2/movie/top250&apos;</span><br><span class="line">        </span><br><span class="line">        this.$jsonp(url)</span><br><span class="line">        .then((res)=&gt;&#123;</span><br><span class="line">            console.log(res.subjects)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h4 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h4><p><strong>jsonp模块详解,在学习完项目模板之后再做详细讲解</strong></p><h5 id="Vue-jsonp"><a href="#Vue-jsonp" class="headerlink" title="Vue-jsonp"></a>Vue-jsonp</h5><p><img src="https://travis-ci.org/LancerComet/vue-jsonp.svg?branch=master" alt="Travis"></p><p>A tiny library for handling JSONP request.</p><h6 id="Usage"><a href="#Usage" class="headerlink" title="Usage."></a>Usage.</h6><p>Static function:<br><code>Vue.jsonp(url, dataObj, timeout)</code></p><p>In Vue component:<br><code>this.$jsonp(url, dataObj, timeout)</code></p><h6 id="Params"><a href="#Params" class="headerlink" title="Params."></a>Params.</h6><ul><li>url: Target url for request.</li><li>dataObj: Object contains datas for querying.</li><li>timeout: Timeout for jsonp request.</li></ul><h6 id="URL"><a href="#URL" class="headerlink" title="URL."></a>URL.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/url?&#123;callbackQuery&#125;=&#123;callbackName&#125;&amp;...'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Default:</span></span><br><span class="line"><span class="string">'/url?callback=jsonp_RANDOM_STRING&amp;...'</span></span><br></pre></td></tr></table></figure><h6 id="Assign-callback-query-name"><a href="#Assign-callback-query-name" class="headerlink" title="Assign callback query name."></a>Assign callback query name.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$jsonp(<span class="string">'/url'</span>, &#123;</span><br><span class="line">  callbackQuery: <span class="string">'cb'</span>  <span class="comment">// Default: callback</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then URL will be: '/url?cb=jsonp_aws84739ssu8e3'</span></span><br></pre></td></tr></table></figure><h6 id="Assign-callback-function-name"><a href="#Assign-callback-function-name" class="headerlink" title="Assign callback function name."></a>Assign callback function name.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$jsonp(<span class="string">'/url'</span>, &#123;</span><br><span class="line">  callbackName: <span class="string">'jsonpFunc'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then URL will be: '/url?callback=jsonpFunc'</span></span><br></pre></td></tr></table></figure><h6 id="Example"><a href="#Example" class="headerlink" title="Example."></a>Example.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueJsonp <span class="keyword">from</span> <span class="string">'vue-jsonp'</span></span><br><span class="line">Vue.use(VueJsonp)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want to setup the global timeout, just:</span></span><br><span class="line">Vue.use(VueJsonp, <span class="number">5000</span>)</span><br><span class="line"><span class="comment">// Now all requests will be expired after 5000ms.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use it in Vue Component.</span></span><br><span class="line"><span class="keyword">const</span> SomeComponent = Vue.extend(&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$jsonp(<span class="string">'http://www.some-site.com/data'</span>, &#123; <span class="attr">name</span>: <span class="string">'MyName'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Success.</span></span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Failed.</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Static Function.</span></span><br><span class="line"><span class="comment">// Request url will be 'http://www.some-site.com/data?name=MyName&amp;age=20&amp;cb=jsonpFunc'</span></span><br><span class="line">Vue.jsonp(<span class="string">'http://www.some-site.com/data'</span>, &#123;</span><br><span class="line">  name: <span class="string">'MyName'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">callbackQuery</span>: <span class="string">'cb'</span>, <span class="attr">callbackName</span>: <span class="string">'jsonpFunc'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Success.</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Failed.</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="License"><a href="#License" class="headerlink" title="License"></a>License</h6><p>MIT.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axiso-有待完善&quot;&gt;&lt;a href=&quot;#axiso-有待完善&quot; class=&quot;headerlink&quot; title=&quot;axiso(有待完善)&quot;&gt;&lt;/a&gt;axiso(有待完善)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于浏览器和node.js的基于Promise
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="10-http" scheme="http://yoursite.com/categories/vue/10-http/"/>
    
    
  </entry>
  
  <entry>
    <title>10-promise</title>
    <link href="http://yoursite.com/2018/05/10/vue/10-http/10-2-2-promise/"/>
    <id>http://yoursite.com/2018/05/10/vue/10-http/10-2-2-promise/</id>
    <published>2018-05-10T01:32:35.002Z</published>
    <updated>2018-05-10T01:35:09.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="promise-new"><a href="#promise-new" class="headerlink" title="promise-new"></a>promise-new</h2><p><a href="https://www.imooc.com/learn/949" target="_blank" rel="noopener">学习视频参考网址</a></p><h3 id="什么是promise"><a href="#什么是promise" class="headerlink" title="什么是promise"></a>什么是promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">promie用于异步计算</span><br><span class="line"></span><br><span class="line">一个promise表示一个现在,将来或者是永远不可能可用的值(一个异步的数据)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise可以将一系列异步操作队列化,按照期望的执行,返回预期的结果</span><br></pre></td></tr></table></figure><h3 id="为什么会有promise"><a href="#为什么会有promise" class="headerlink" title="为什么会有promise"></a>为什么会有promise</h3><h4 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同步:</span><br><span class="line">    代码的同步存在一些问题: 代码的同步执行会造成程序的阻塞</span><br><span class="line"></span><br><span class="line">异步:</span><br><span class="line">    在js中,存在大量异步执行的代码</span><br><span class="line"></span><br><span class="line">        1. 事件操作  document.getElementById().addEventEstener()</span><br><span class="line">        2. ajax</span><br><span class="line">        3. 文件操作  nodejs文件读取</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    在nodejs推行之后,对于异步的依赖进一步加强</span><br><span class="line"></span><br><span class="line">        nodejs的特性: 无阻塞,高并发</span><br><span class="line">            其异步特性主要是通过异步操作实现</span><br><span class="line"></span><br><span class="line">    异步操作能够在很大程度上解决代码的阻塞问题,但是一不小心,就会陷入回调地狱</span><br></pre></td></tr></table></figure><h4 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h4><blockquote><p>看下面一段nodejs文件读取的代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//引入相关模块</span><br><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line">const path=require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">var dirPath=path.resolve(__dirname,&apos;js&apos;);</span><br><span class="line">var filePath=path.resolve(dirPath,&apos;test.txt&apos;);</span><br><span class="line"></span><br><span class="line">var dirExists=fs.existsSync(dirPath);</span><br><span class="line">var fileExists=fs.existsSync(filePath);</span><br><span class="line">//删除文件</span><br><span class="line">if(fileExists)&#123;//如果存在文件先删除文件</span><br><span class="line">    fs.unlinkSync(filePath);</span><br><span class="line">    console.log(&quot;删除文件成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//删除目录</span><br><span class="line">if(dirExists)&#123;//如果存在目录先删除目录</span><br><span class="line">    fs.rmdirSync(dirPath);</span><br><span class="line">    console.log(&quot;删除目录成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//创建目录</span><br><span class="line">fs.mkdir(dirPath,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&quot;创建目录失败&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        console.log(&quot;创建目录成功&quot;);</span><br><span class="line">        //写入文件</span><br><span class="line">        fs.writeFile(filePath,&quot;第二周周考&quot;,(err)=&gt;&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                //输出失败</span><br><span class="line">                console.log(&quot;创建文件失败&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //创建成功</span><br><span class="line">                console.log(&quot;创建文件成功&quot;);</span><br><span class="line">                //读取文件</span><br><span class="line">                fs.readFile(filePath,function(err,data)&#123;</span><br><span class="line">                    if(err)&#123;</span><br><span class="line">                        //读取失败</span><br><span class="line">                        console.log(&quot;读取文件失败&quot;);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        //读取文件内容成功</span><br><span class="line">                        console.log(&quot;读取文件成功，文件内容为：&quot;+data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  1. 回调层次很深, 难以维护</span><br><span class="line">  2. 在多个回调之间难以简历联系</span><br><span class="line">  3. 无法正常检索堆栈信息</span><br><span class="line">  4. 无法正常使用return 和 throw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise的诞生就是解决上述这一类问题</span><br></pre></td></tr></table></figure><h3 id="promise基本使用"><a href="#promise基本使用" class="headerlink" title="promise基本使用"></a>promise基本使用</h3><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><blockquote><p>使用promise  , 可以很有效的解决异步问题(回调地狱)</p><blockquote><p>同时避免了代码深层回调的难易维护的问题</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    // 定义一个异步的操作</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        resolve(&quot;这是异步执行的,与1s之后返回数据&quot;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 通过then方法获取promise 返回的值</span><br><span class="line">p.then(function(data)&#123;</span><br><span class="line">    console.log(data)</span><br><span class="line"></span><br><span class="line">    // 可以在这里再定义一些异步操作</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><p><strong>代码解析</strong></p><p>test阿达</p><ul><li><p>使用new Promise() 创建一个promie对象,参数是一个回调函数</p></li><li><p>回调函数有两个参数</p><ul><li><p>参数1: resolve/fulfilled,表示回调执行成功的状态,当执行成功的时候,使用resolve()定义成功的情况下,promise返回的数据</p></li><li><p>参数2: reject, 表示回调执行失败的状态,当执行失败的时候,使用reject()定义请求失败的情况下返回的数据</p></li></ul></li><li><p>使用promise实例的then方法获取promise对象返回的数据</p></li></ul><p><strong>promise的三种状态</strong></p><ul><li><p>pending : 进行中, 当使用new Promise()创建完promise对象之后,这个异步操作就已经开始在堆栈中执行</p><ul><li><p>在这个过程中确定异步操作的状态,成功或者是失败,而且一旦状态确定之后,是不可改变的</p></li><li><p>当状态发生改变之后, 就会立即执行then()</p></li></ul></li><li><p>fulfiled / resolve: 操作成功的状态</p></li><li><p>reject: 操作失败的状态 </p></li></ul><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p><img src="img/promise的执行.png" alt=""></p><h4 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h4><blockquote><p>promise支持链式调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    // 定义一个异步的操作</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        resolve(&quot;这是异步执行的,与1s之后返回数据&quot;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"></span><br><span class="line">&#125;).then(function(data)&#123;</span><br><span class="line">    console.log(data)</span><br><span class="line"></span><br><span class="line">    // 可以在这里再定义一些异步操作</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><h4 id="多层promise"><a href="#多层promise" class="headerlink" title="多层promise"></a>多层promise</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    // 1. 定义第一个异步的操作</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        resolve(&quot;这是第一个异步执行的操作,与1s之后返回数据&quot;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"></span><br><span class="line">&#125;).then(function(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line"></span><br><span class="line">    // 2. 定义第二个异步的操作  ----  返回一个Promise对象</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&quot;这是第二个异步执行的操作,与1s之后返回数据&quot;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).then(function(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><h3 id="promise实例的方法"><a href="#promise实例的方法" class="headerlink" title="promise实例的方法"></a>promise实例的方法</h3><h4 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h4><blockquote><p><strong>then方法的简单解析</strong></p></blockquote><ol><li><p>then()接收两个函数作为参数,对应promise的两种状态  resolve  reject</p></li><li><p>then()返回一个新的promise实例,支持链式调用</p></li><li><p>then()会根据promise的状态来确定执行的函数</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    // 1. 定义一个异步的操作</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">        if(num &lt;= 5) &#123;</span><br><span class="line">            resolve(num);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject(&apos;数字太大了&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;,function(error)&#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>当回调成功的时候,执行then()的第一个回调,失败的时候,执行第二个回调</p></blockquote><h4 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h4><blockquote><p>catch方法用于错误捕获</p></blockquote><p><strong>推荐使用catch捕获错误,而不是直接使用then的第二个参数,使用catch的好处在于可以避免一些遗漏的错误</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    // 1. 定义一个异步的操作</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">        if(num &lt;= 5) &#123;</span><br><span class="line">            resolve(num);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject(&apos;数字太大了&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(error)&#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *</span><br><span class="line"> * 推荐使用链式调用,增强代码可读性的同时   也有利于错误的整体捕获</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><h4 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h4><blockquote><p>提供了并行执行多个异步操作的能力,技能对个promise实例,包装成一个promise实例</p><blockquote><p>返回的结果根据子promise的状态确定</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码1&quot;)</span><br><span class="line"></span><br><span class="line">function runAsync1() &#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(&apos;异步任务1执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据1&apos;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function runAsync2() &#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(&apos;异步任务2执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据2&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function runAsync3() &#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(&apos;异步任务3执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据3&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">//Promise的all方法提供了并行执行多个异步操作的能力，并且在所有异步操作执行完后才执行回调</span><br><span class="line">Promise</span><br><span class="line">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class="line">    .then(function(results) &#123;</span><br><span class="line">        console.log(results);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;这是同步执行的代码2&quot;)</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 所有的promise执行成功,返回的是所有的子promise的结果组成的数组</span><br><span class="line">2. 有一个子promise失败,返回的是第一个失败的结果</span><br></pre></td></tr></table></figure><h4 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h4><blockquote><p>根据异步执行的事件确定异步执行的次序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//请求某个图片资源</span><br><span class="line">function requestImg() &#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.onload = function() &#123;</span><br><span class="line">            resolve(img);</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = &apos;xxxxxx&apos;;</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//延时函数，用于给请求计时</span><br><span class="line">function timeout() &#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            reject(&apos;图片请求超时&apos;);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise</span><br><span class="line">//all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，</span><br><span class="line">//那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」</span><br><span class="line">    .race([requestImg(), timeout()])</span><br><span class="line">    .then(function(results) &#123;</span><br><span class="line">        console.log(results);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(reason) &#123;</span><br><span class="line">        console.log(reason);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="promise的应用"><a href="#promise的应用" class="headerlink" title="promise的应用"></a>promise的应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. promise.all()和map连用,将一组操作转化成一个promise集合</span><br><span class="line"></span><br><span class="line">2. 实现队列,有的时候,我们不希望所有的事情一次性发生,而是按照一定的顺序进行 all  race</span><br><span class="line"></span><br><span class="line">3. 将回调包装成promise</span><br><span class="line"></span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h3 id="promise的支持"><a href="#promise的支持" class="headerlink" title="promise的支持"></a>promise的支持</h3><h4 id="jquery已经实现了promsise"><a href="#jquery已经实现了promsise" class="headerlink" title="jquery已经实现了promsise"></a>jquery已经实现了promsise</h4><blockquote><p>在新版本里面   jquery的ajax已经实现了promise   返回的是一个promise实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    var url = &apos;./my.json&apos;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    $.ajax(url).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="ie的支持"><a href="#ie的支持" class="headerlink" title="ie的支持"></a>ie的支持</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ie浏览器并不包含原生的promise支持</span><br><span class="line">只想实现异步队列</span><br><span class="line">    使用jQuery.defered</span><br></pre></td></tr></table></figure><h4 id="兼容性类库"><a href="#兼容性类库" class="headerlink" title="兼容性类库"></a>兼容性类库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">promise polyfill</span><br><span class="line">blueBird</span><br></pre></td></tr></table></figure><h3 id="fetch-API"><a href="#fetch-API" class="headerlink" title="fetch API"></a>fetch API</h3><blockquote><p>是XmlHttpRequest的现代化替代方案</p><blockquote><p>更强大,更友好,直接返回一个promise实例</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    var url = &apos;./my.json&apos;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    fetch(url).then((res) =&gt; &#123;</span><br><span class="line">        return res.json()</span><br><span class="line">    &#125;).then((data)=&gt;&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">        // 得到数据使用即可</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="es2017异步函数"><a href="#es2017异步函数" class="headerlink" title="es2017异步函数"></a>es2017异步函数</h3><p><img src="img/es02 (1" alt="">.png)<br><img src="img/es02 (2" alt="">.png)<br><img src="img/es02 (3" alt="">.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;promise-new&quot;&gt;&lt;a href=&quot;#promise-new&quot; class=&quot;headerlink&quot; title=&quot;promise-new&quot;&gt;&lt;/a&gt;promise-new&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/lea
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="10-http" scheme="http://yoursite.com/categories/vue/10-http/"/>
    
    
  </entry>
  
  <entry>
    <title>10-promise</title>
    <link href="http://yoursite.com/2018/05/10/vue/10-http/10-2-1-promise/"/>
    <id>http://yoursite.com/2018/05/10/vue/10-http/10-2-1-promise/</id>
    <published>2018-05-10T01:32:35.000Z</published>
    <updated>2018-05-10T01:34:59.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise-old"><a href="#Promise-old" class="headerlink" title="Promise-old"></a>Promise-old</h2><blockquote><p>就是一个对象,用来传递异步操作的消息,是解决异步编程的一种方案</p></blockquote><h3 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h3><p><strong>promise提供了统一的API,各种异步操作都可以使用同样的方法进行处理</strong></p><p><img src="img/promise.bmp" alt="promise.bmp"></p><blockquote><p>有待完善</p></blockquote><h3 id="promise特点"><a href="#promise特点" class="headerlink" title="promise特点"></a>promise特点</h3><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。<br>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p><p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>简化层层回调</p></blockquote><blockquote><p>Promise的构造函数接收一个参数，这个参数是一个函数，并且传入两个参数：</p></blockquote><blockquote><blockquote><p>resolve: 表示异步操作执行成功后的回调函数</p></blockquote></blockquote><blockquote><blockquote><p>reject: 异步操作执行失败后的回调函数</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">        //resolve:执行成功的回调函数</span><br><span class="line">        //reject:执行失败的回调函数</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">            if(num &lt;= 5) &#123;</span><br><span class="line">                resolve(num);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                reject(&apos;数字太大了&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    p.then(</span><br><span class="line">        //执行成功的回调</span><br><span class="line">        function(data) &#123;</span><br><span class="line">            console.log(&apos;执行成功-resolve回调执行&apos;);</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        //执行失败的回调</span><br><span class="line">        function(reason, data) &#123;</span><br><span class="line">            console.log(&apos;执行失败-reject回调执行&apos;);</span><br><span class="line">            console.log(reason);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><h4 id="自身的方法"><a href="#自身的方法" class="headerlink" title="自身的方法"></a>自身的方法</h4><ol><li><p>all()</p><blockquote><p>提供并行执行异步的能力,也就是说,在所有的异步执行完毕之后才会执行回调</p></blockquote></li><li><p>race()</p><blockquote><p>根据程序执行的时间来决定执行的次序</p></blockquote></li><li><p>reject()</p><blockquote><p>执行失败的回调</p></blockquote></li><li><p>resolve()</p><blockquote><p>执行成功的回调</p></blockquote></li></ol><h4 id="原型上的方法"><a href="#原型上的方法" class="headerlink" title="原型上的方法"></a>原型上的方法</h4><ol><li>then()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function getNumber() &#123;</span><br><span class="line">        var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            //做一些异步操作</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">                if(num &lt;= 5) &#123;</span><br><span class="line">                    resolve(num);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(&apos;数字太大了&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 2000);</span><br><span class="line">        &#125;);</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getNumber()</span><br><span class="line">        .then(</span><br><span class="line">            //执行成功的回调</span><br><span class="line">            function(data) &#123;</span><br><span class="line">                console.log(&apos;resolved&apos;);</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            //执行失败的回调</span><br><span class="line">            function(reason, data) &#123;</span><br><span class="line">                console.log(&apos;rejected&apos;);</span><br><span class="line">                console.log(reason);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>catch()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function getNumber() &#123;</span><br><span class="line">        var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            //做一些异步操作</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">                if(num &lt;= 5) &#123;</span><br><span class="line">                    resolve(num);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(&apos;数字太大了&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getNumber()</span><br><span class="line">        .then(function(data) &#123;</span><br><span class="line">            console.log(&apos;resolved&apos;);</span><br><span class="line">            console.log(data);</span><br><span class="line">            console.log(text)//test未定义</span><br><span class="line">        &#125;)</span><br><span class="line">        //和then的第二个参数一样,用来指定失败的回调</span><br><span class="line">        //与then的第二个参数有区别的是,如果是执行错误的判断</span><br><span class="line">        .catch(function(reason) &#123;</span><br><span class="line">            console.log(&apos;rejected&apos;);</span><br><span class="line">            console.log(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function getNumber() &#123;</span><br><span class="line">        var p = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            //做一些异步操作</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数</span><br><span class="line">                if(num &lt;= 5) &#123;</span><br><span class="line">                    resolve(num);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(&apos;数字太大了&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getNumber()</span><br><span class="line">        //可以传递两个参数,执行成功的回调和执行失败的回调</span><br><span class="line">        .then(function(data) &#123;</span><br><span class="line">            console.log(&apos;resolved&apos;);</span><br><span class="line">            console.log(data);</span><br><span class="line">            console.log(text)//test未定义</span><br><span class="line">        &#125;)</span><br><span class="line">        //和then的第二个参数一样,用来指定失败的回调</span><br><span class="line">        //与then的第二个参数有区别的是,如果是执行错误的判断</span><br><span class="line">        .catch(function(reason) &#123;</span><br><span class="line">            console.log(&apos;rejected&apos;);</span><br><span class="line">            console.log(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Promise-old&quot;&gt;&lt;a href=&quot;#Promise-old&quot; class=&quot;headerlink&quot; title=&quot;Promise-old&quot;&gt;&lt;/a&gt;Promise-old&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;就是一个对象,用来传递异步操作的消息,是解
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="10-http" scheme="http://yoursite.com/categories/vue/10-http/"/>
    
    
  </entry>
  
  <entry>
    <title>10-http</title>
    <link href="http://yoursite.com/2018/05/10/vue/10-http/10-1-vue-resource/"/>
    <id>http://yoursite.com/2018/05/10/vue/10-http/10-1-vue-resource/</id>
    <published>2018-05-10T01:32:34.999Z</published>
    <updated>2018-05-10T01:34:47.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十部分-vue-resource-amp-axios"><a href="#第十部分-vue-resource-amp-axios" class="headerlink" title="第十部分  vue-resource &amp; axios"></a>第十部分  vue-resource &amp; axios</h1><p><strong>问题:在vue中如何请求数据?</strong></p><h2 id="Resource插件简介"><a href="#Resource插件简介" class="headerlink" title="Resource插件简介"></a>Resource插件简介</h2><blockquote><p>Vue.js的插件提供了使用XMLHttpRequest或JSONP 进行Web请求和处理响应的服务。</p></blockquote><blockquote><blockquote><p>单来说，vue-resource就像jQuery里的$.ajax，用来进行数据交互</p></blockquote></blockquote><h3 id="Vue-resource的特点"><a href="#Vue-resource的特点" class="headerlink" title="Vue-resource的特点"></a>Vue-resource的特点</h3><p>1.体积小</p><pre><code>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</code></pre><p>2.支持主流的浏览器</p><pre><code>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</code></pre><p>3.支持Promise API和URI Templates<strong>(了解)</strong></p><pre><code>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</code></pre><p>4.支持拦截器<strong>(了解)</strong></p><pre><code>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</code></pre><h3 id="Vue-resource的使用方法"><a href="#Vue-resource的使用方法" class="headerlink" title="Vue-resource的使用方法"></a>Vue-resource的使用方法</h3><p><strong>详情可参考:<a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">Vue-resource</a></strong></p><h4 id="Vue-resource的安装"><a href="#Vue-resource的安装" class="headerlink" title="Vue-resource的安装"></a>Vue-resource的安装</h4><ol><li><p>下载 vue-resource.js文件,在本地引入</p></li><li><p>使用cdn加速服务</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/vue.resource/1.2.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt; script  src = &quot;https://cdn.jsdelivr.net/vue.resource/1.3.1/vue-resource.min.js&quot; &gt; &lt;/ script &gt;</span><br></pre></td></tr></table></figure><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><p>引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。</p></blockquote><h5 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h5><p><strong>1.基于全局Vue对象使用http</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//[]里面的内容表示的是可选的参数</span><br><span class="line"></span><br><span class="line">Vue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</span><br><span class="line">Vue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure><p><strong>2.代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;sendGet()&quot;&gt;发送get请求&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //这里的this指代的是   vm对象</span><br><span class="line">    var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">    Vue.http.get(url).then(function(res) &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="局部使用—-最常见的形式"><a href="#局部使用—-最常见的形式" class="headerlink" title="局部使用—-最常见的形式"></a>局部使用—-最常见的形式</h5><p><strong>1.在一个Vue实例内使用$http</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//[]里面的内容表示的是可选的参数</span><br><span class="line"></span><br><span class="line">this.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</span><br><span class="line">this.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure></p><blockquote><p>在发送请求后，使用then方法来处理响应结果，</p><blockquote><p>then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。</p></blockquote></blockquote><p><strong>2.代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;sendGet()&quot;&gt;发送get请求&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sendGet: function() &#123;</span><br><span class="line">                //这里的this指代的是   vm对象</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">                this.$resource(url).get().then(function(res) &#123;</span><br><span class="line">                    console.log(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="7种请求API"><a href="#7种请求API" class="headerlink" title="7种请求API"></a>7种请求API</h3><ul><li><code>get(url, [options])</code></li><li><code>head(url, [options])</code></li><li><code>delete(url, [options])</code></li><li><code>jsonp(url, [options])</code></li><li><code>post(url, [body], [options])</code></li><li><code>put(url, [body], [options])</code></li><li><code>patch(url, [body], [options])</code></li></ul><h3 id="选项options"><a href="#选项options" class="headerlink" title="选项options"></a>选项options</h3><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td>发送请求的URL</td></tr><tr><td>body</td><td><code>Object</code>, <code>FormData</code>, <code>string</code></td><td>作为请求主体发送的数据</td></tr><tr><td>headers</td><td><code>Object</code></td><td>标题对象要作为HTTP请求标头发送</td></tr><tr><td>params</td><td><code>Object</code></td><td>作为URL参数发送的参数对象</td></tr><tr><td>method</td><td><code>string</code></td><td>HTTP方法（例如GET，POST，…）</td></tr><tr><td>responseType</td><td><code>string</code></td><td>响应体的类型（例如text，blob，json，…）</td></tr><tr><td>timeout</td><td><code>number</code></td><td>请求超时（毫秒）（0意味着无超时）</td></tr><tr><td>before</td><td><code>function(request)</code></td><td>回调函数在发送请求选项之前修改它</td></tr><tr><td>progress</td><td><code>function(event)</code></td><td>回调函数来处理上传的ProgressEvent <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent" target="_blank" rel="noopener">ProgressEvent</a> of uploads</td></tr><tr><td>credentials</td><td><code>boolean</code></td><td>指示是否应使用凭据进行跨站点访问控制请求</td></tr><tr><td>emulateHTTP</td><td><code>boolean</code></td><td>使用HTTP POST发送PUT，PATCH和DELETE请求，并设置X-HTTP-Method-Override头</td></tr><tr><td>emulateJSON</td><td><code>boolean</code></td><td>发送请求正文作为application/x-www-form-urlencoded内容类型 </td></tr></tbody></table><h3 id="响应response"><a href="#响应response" class="headerlink" title="响应response"></a>响应response</h3><p>请求使用以下属性和方法解析为响应对象：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td>响应URL来源</td></tr><tr><td>body</td><td><code>Object</code>, <code>Blob</code>, <code>string</code></td><td>响应体</td></tr><tr><td>headers</td><td><code>Header</code></td><td>响应标题对象</td></tr><tr><td>ok</td><td><code>boolean</code></td><td>HTTP状态码介于200和299之间</td></tr><tr><td>status</td><td><code>number</code></td><td>HTTP状态代码的响应</td></tr><tr><td>statusText</td><td><code>string</code></td><td>HTTP状态文本的响应</td></tr><tr><td><strong>Method</strong></td><td><strong>Type</strong></td><td><strong>描述</strong></td></tr><tr><td>text()</td><td><code>Promise</code></td><td>将body解释为字符串</td></tr><tr><td>json()</td><td><code>Promise</code></td><td>将body解析为解析的JSON对象</td></tr><tr><td>blob()</td><td><code>Promise</code></td><td>将身body解析为Blob对象</td></tr></tbody></table><h2 id="http方式数据请求"><a href="#http方式数据请求" class="headerlink" title="$http方式数据请求"></a>$http方式数据请求</h2><p><strong>参考资料:<a href="http://www.cnblogs.com/axl234/p/5899137.html" target="_blank" rel="noopener">$http</a></strong></p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;sendGet()&quot;&gt;发送get请求&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sendGet: function() &#123;</span><br><span class="line">                //这里的this指代的是   vm对象</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">                this.$resource(url).get().then(function(res) &#123;</span><br><span class="line">                    console.log(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--添加一条数据--&gt;</span><br><span class="line">            &lt;button v-on:click=&apos;add()&apos;&gt;添加&lt;/button&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--定义文本框--&gt;</span><br><span class="line">            &lt;table class=&quot;text&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;name：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&apos;name&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;age：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt; &lt;input type=&quot;text&quot; v-model=&apos;age&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;sex：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&apos;sex&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;classroom：&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt; &lt;input type=&quot;text&quot; v-model=&apos;classroom&apos; /&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">            &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;条数&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;sex&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tr v-for=&quot;(data,index) in arr&quot;&gt;</span><br><span class="line">                    &lt;td&gt;第&#123;&#123;index+1&#125;&#125;条&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;data.sex&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;!--点击按钮的时候删除一条数据--&gt;</span><br><span class="line">                        &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var dataModel = &#123;</span><br><span class="line">        message: &quot;hello vue!&quot;,</span><br><span class="line">        arr: [],</span><br><span class="line"></span><br><span class="line">        //定义文本框绑定值</span><br><span class="line">        name: &quot;&quot;,</span><br><span class="line">        age: &quot;&quot;,</span><br><span class="line">        sex: &quot;&quot;,</span><br><span class="line">        classroom: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: dataModel,</span><br><span class="line">        //创建生命周期钩子,初始化页面渲染</span><br><span class="line">        created: function() &#123;</span><br><span class="line">            this.query()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">            //将数据查询的操作封装成一个方法------&gt;   封装一个query方法</span><br><span class="line">            query() &#123;</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/select.php&quot;;</span><br><span class="line">                this.$http.get(url).then((res) =&gt; &#123;</span><br><span class="line">                    this.arr = res.data</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            //添加一条动态的数据</span><br><span class="line">            add: function() &#123;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                //1. 定义的url路径,也就是请求的路径</span><br><span class="line">                var url = &quot;http://127.0.0.1/00-vue/add.php&quot;</span><br><span class="line"></span><br><span class="line">                //2. 发送的数据</span><br><span class="line">                var bodyData = &#123;</span><br><span class="line">                    name: this.name,</span><br><span class="line">                    age: this.age,</span><br><span class="line">                    sex: this.sex,</span><br><span class="line">                    classroom: this.classroom</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //3. 选项参数</span><br><span class="line">                var options = &#123;</span><br><span class="line">                    emulateJSON: true</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //使用vue-resource发送请求</span><br><span class="line">                this.$http.post(url, bodyData, options).then((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                    console.log(res.data)</span><br><span class="line"></span><br><span class="line">                    //重新查询</span><br><span class="line">                    this.query()</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>发送post请求,需要传递三个参数</strong></p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;sendJsonp()&quot;&gt;发送jsonp请求&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sendJsonp: function() &#123;</span><br><span class="line">                //这里的this指代的是   vm对象</span><br><span class="line">                var url = &quot;http://api.douban.com/v2/movie/top250&quot;;</span><br><span class="line">                this.$http.jsonp(url).then(function(res) &#123;</span><br><span class="line">                    console.log(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="resource方式数据请求-简单了解"><a href="#resource方式数据请求-简单了解" class="headerlink" title="$resource方式数据请求(简单了解)"></a>$resource方式数据请求(简单了解)</h2><blockquote><p>vue-resource提供了另外一种方式访问HTTP——resource服务，resource服务包含以下几种默认的action：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get: &#123;method: &apos;GET&apos;&#125;,</span><br><span class="line">save: &#123;method: &apos;POST&apos;&#125;,</span><br><span class="line">query: &#123;method: &apos;GET&apos;&#125;,</span><br><span class="line">update: &#123;method: &apos;PUT&apos;&#125;,</span><br><span class="line">remove: &#123;method: &apos;DELETE&apos;&#125;,</span><br><span class="line">delete: &#123;method: &apos;DELETE&apos;&#125;</span><br></pre></td></tr></table></figure><p>resource对象也有两种访问方式：</p><blockquote><p>全局访问：Vue.resource</p></blockquote><blockquote><p>实例访问：this.$resource</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十部分-vue-resource-amp-axios&quot;&gt;&lt;a href=&quot;#第十部分-vue-resource-amp-axios&quot; class=&quot;headerlink&quot; title=&quot;第十部分  vue-resource &amp;amp; axios&quot;&gt;&lt;/a&gt;第十
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="10-http" scheme="http://yoursite.com/categories/vue/10-http/"/>
    
    
  </entry>
  
  <entry>
    <title>09-路由</title>
    <link href="http://yoursite.com/2018/05/10/vue/09-router/09-vue-router/"/>
    <id>http://yoursite.com/2018/05/10/vue/09-router/09-vue-router/</id>
    <published>2018-05-10T01:32:34.996Z</published>
    <updated>2018-05-10T01:34:34.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九部分-Vue-router"><a href="#第九部分-Vue-router" class="headerlink" title="第九部分  Vue-router"></a>第九部分  Vue-router</h1><h2 id="过渡–单页面应用"><a href="#过渡–单页面应用" class="headerlink" title="过渡–单页面应用"></a>过渡–单页面应用</h2><h3 id="什么是单页面应用"><a href="#什么是单页面应用" class="headerlink" title="什么是单页面应用"></a>什么是单页面应用</h3><blockquote><p>　根据不同的链接（也就是不同的路径），　发送ajax , 请求不同的内容， 显示到页面指定的位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单页 Web 应用 (single-page application 简称为 SPA) 是一种特殊的 Web 应用。</span><br><span class="line"></span><br><span class="line">它将所有的活动局限于一个Web页面中，仅在该Web页面初始化时加载相应的HTML、JavaScript 和 CSS。</span><br><span class="line">一旦页面加载完成了，SPA不会因为用户的操作而进行页面的重新加载或跳转。</span><br><span class="line"></span><br><span class="line">取而代之的是利用 JavaScript 动态的变换HTML的内容，从而实现UI与用户的交互。</span><br><span class="line">由于避免了页面的重新加载，SPA 可以提供较为流畅的用户体验。</span><br></pre></td></tr></table></figure><p><strong>举例分析</strong></p><blockquote><p>类比于一个容器(杯子),可以存放各种饮品,但是杯子只有那么一个</p></blockquote><blockquote><p>在页面定义一个容器(div),存放对应的单页面,容器(div)只有一个,但是可以存放不同的页面,并且可以动态切换</p></blockquote><h3 id="单页面优缺点"><a href="#单页面优缺点" class="headerlink" title="单页面优缺点"></a>单页面优缺点</h3><p>1、优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1).良好的交互体验</span><br><span class="line"></span><br><span class="line">用户不需要重新刷新页面，获取数据也是通过Ajax异步获取，页面显示流畅。</span><br><span class="line"></span><br><span class="line">2).良好的前后端工作分离模式</span><br><span class="line"></span><br><span class="line">单页Web应用可以和RESTful规约一起使用，通过REST API提供接口数据，并使用Ajax异步获取，</span><br><span class="line">这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分。</span><br><span class="line"></span><br><span class="line">3).减轻服务器压力</span><br><span class="line"></span><br><span class="line">服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；</span><br><span class="line"></span><br><span class="line">4).共用一套后端程序代码</span><br><span class="line"></span><br><span class="line">不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端；</span><br></pre></td></tr></table></figure><p>2、缺点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1).SEO难度较高</span><br><span class="line"></span><br><span class="line">由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，</span><br><span class="line">且要用单页应用，那么就做些静态页面给搜索引擎用吧。</span><br><span class="line"></span><br><span class="line">2).前进、后退管理</span><br><span class="line"></span><br><span class="line">由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立</span><br><span class="line">堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现。</span><br><span class="line"></span><br><span class="line">3).初次加载耗时多</span><br><span class="line"></span><br><span class="line">为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。</span><br><span class="line">所以必须对JavaScript及CSS代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的。</span><br></pre></td></tr></table></figure><h3 id="单页面应用的实现"><a href="#单页面应用的实现" class="headerlink" title="单页面应用的实现"></a>单页面应用的实现</h3><p><strong>要点:</strong></p><p>1.获取a链接中的hash内容</p><p>2.根据不同的hash值发送不同的请求</p><p>3.将响应回来的html片段渲染到指定的页面部分 </p><p><strong>小案例</strong></p><ol><li><p>页面的文档结构</p><blockquote><p><img src="img/页面结构.bmp" alt="页面结构.bmp"></p></blockquote></li><li><p>页面标签(body)部分</p><blockquote><p><img src="img/文档结构.bmp" alt="文档结构.bmp"></p></blockquote></li><li><p>js实现</p><blockquote><p> <img src="img/js实现.bmp" alt="js实现.bmp"></p></blockquote></li></ol><p><strong>问题:</strong></p><blockquote><p>可以使用原生的js来实现单页面应用,但是这样做是很繁琐的,有没有更好的方式啦帮助我们实现这样的功能呢?</p></blockquote><blockquote><blockquote><p>基于vue的一个插件: vue-router</p></blockquote></blockquote><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h3><blockquote><p>路由:简单来说是指根据url分配到对应的处理程序。也就是响应不同的页面内容</p></blockquote><h3 id="Vue-router简介"><a href="#Vue-router简介" class="headerlink" title="Vue-router简介"></a>Vue-router简介</h3><blockquote><p>对于前端来说，其实浏览器配合超级链接就很好的实现了路由功能。但是对于单页面应用来说，浏览器和超级链接的跳转方式已经不能适用，<br>所以各大框架纷纷给出了单页面应用的解决路由跳转的方案。 </p></blockquote><blockquote><p>Vue框架的兼容性非常好，可以很好的跟其他第三方的路由框架进行结合。当然官方也给出了路由的方案： <code>vue-router</code>;<br>建议还是用官方的最好，使用量也是最大，相对来说Vue框架的升级路由组件升级也会及时跟上，所以为了以后的维护和升级方便还是使用Vue自家的东西最好。</p></blockquote><blockquote><p>注意: <a href="mailto:vue-router@2.x" target="_blank" rel="noopener">vue-router@2.x</a> 只适用于 Vue 2.x 版本。<br><a href="mailto:vue-router@1.x" target="_blank" rel="noopener">vue-router@1.x</a> 对应于Vue1.x版本。</p></blockquote><ul><li>的Github地址：<a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a>   </li><li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">文档地址</a></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>CDN加速连接方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/vue-router/dist/vue-router.js</span><br></pre></td></tr></table></figure><ul><li>npm 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure><h3 id="创建路由的简单案例演示"><a href="#创建路由的简单案例演示" class="headerlink" title="创建路由的简单案例演示"></a>创建路由的简单案例演示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--1. 引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            *&#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            #app&#123;</span><br><span class="line">                width: 400px;</span><br><span class="line">                margin: 100px auto;</span><br><span class="line">            &#125;</span><br><span class="line">        #app a&#123;</span><br><span class="line">            text-decoration: blink;</span><br><span class="line">        &#125;</span><br><span class="line">            #app div&#123;</span><br><span class="line">                width: 400px;</span><br><span class="line">                height: 200px;</span><br><span class="line">                background: pink;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--5. 路由导航  就是一个a连接,点击一个a链接,会跳转到指定的路径,也就是to的位置--&gt;</span><br><span class="line">            &lt;router-link to=&apos;/tab1&apos;&gt;tab1&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&apos;/tab2&apos;&gt;tab2&lt;/router-link&gt;</span><br><span class="line">            &lt;!--6. 路由组件渲染的入口--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //2. 定义组件----使用构造器进行全局扩展,创建全局组件</span><br><span class="line">    //赋值操作,用一个变量名保存组件中所有的内容</span><br><span class="line">    var tab1Component = Vue.extend(&#123;</span><br><span class="line">        template: &apos;&lt;div&gt;这是tab1 组件&lt;/div&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    var tab2Component = Vue.extend(&#123;</span><br><span class="line">        template: &apos;&lt;div&gt;这是tab2 组件&lt;/div&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //3. 使用路由接管组件的注册的组件,也就是说将路由(路径)和组件一一关联</span><br><span class="line">    // 点击一个路由(路径),显示一个组件</span><br><span class="line">    var vueRouter = new VueRouter(&#123;</span><br><span class="line">        routes: [</span><br><span class="line">            &#123;path: &apos;/&apos;,redirect: &apos;tab2&apos;&#125;, </span><br><span class="line">            &#123;path: &apos;/tab1&apos;,component: tab1Component&#125;, </span><br><span class="line">            &#123;path: &apos;/tab2&apos;,component: tab2Component&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //4. 创建Vue对象,挂载路由,实现视图和路由的关联</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        router: vueRouter</span><br><span class="line">    &#125;).$mount(&apos;#app&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由的使用步骤"><a href="#路由的使用步骤" class="headerlink" title="路由的使用步骤"></a>路由的使用步骤</h3><blockquote><p>六部曲<br>根据上面演示的案例做一个分析</p></blockquote><p>1.引入js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.定义(注册)路由跳转的组件—-使用全局扩展的方式,用其他创建组件的方式也可以<br>在这里,进行了一个赋值操作,用一个变量名保存组件中所有的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var tab1Component = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;这是tab1 组件&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">var tab2Component = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;这是tab2 组件&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.使用路由接管我们注册的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    var vueRouter = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;path: &apos;/&apos;,redirect: &apos;tab2&apos;&#125;, </span><br><span class="line">        &#123;path: &apos;/tab1&apos;,component: tab1Component&#125;, </span><br><span class="line">        &#123;path: &apos;/tab2&apos;,component: tab2Component&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.创建router的实例并挂载根节点,将视图和路由进行关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">   router: vueRouter</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure><p>5.指定路由跳转的连接–路由导航,也就相当于一个a链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&apos;/tab1&apos;&gt;tab1&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&apos;/tab2&apos;&gt;tab2&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>6.路由的出口,将路由指定的组件渲染到页面上,相当于一个占位符号,用来显示路由对应的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="图示分析"><a href="#图示分析" class="headerlink" title="图示分析"></a>图示分析</h3><p><img src="img/路由.jpg" alt="路由"></p><blockquote><p>重点</p></blockquote><h2 id="路由导航钩子"><a href="#路由导航钩子" class="headerlink" title="路由导航钩子"></a>路由导航钩子</h2><p>『导航』表示路由正在发生改变</p><blockquote><p>变化是一个过程,在变化的过程中执行哪些东西</p></blockquote><blockquote><p>路由的切换过程，本质上是执行一系列路由钩子函数，钩子函数总体上分为三大类：</p></blockquote><blockquote><blockquote><ol><li>全局的钩子函数 : 定义在全局的路由对象中</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li>某个路由独享的钩子: 可以在路由配置上直接定义 beforeEnter 钩子 </li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li>组件的钩子函数 : 定义在组件的route选项中</li></ol></blockquote></blockquote><h3 id="全局钩子"><a href="#全局钩子" class="headerlink" title="全局钩子"></a>全局钩子</h3><blockquote><p>全局钩子函数有2个：</p></blockquote><blockquote><blockquote><p>beforeEach：在路由切换开始时调用</p></blockquote></blockquote><blockquote><blockquote><p>afterEach：在每次路由切换成功进入激活阶段时被调用</p></blockquote></blockquote><h4 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//ES6语法的箭头函数,尝试着理解一下</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。</span><br><span class="line"></span><br><span class="line">每个钩子方法接收三个参数：</span><br><span class="line"></span><br><span class="line">to: Route: 即将要进入的目标 路由对象</span><br><span class="line"></span><br><span class="line">from: Route: 当前导航正要离开的路由</span><br><span class="line"></span><br><span class="line">next: 异步执行成功之后的回调函数</span><br><span class="line"></span><br><span class="line">next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</span><br><span class="line"></span><br><span class="line">next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），</span><br><span class="line">那么 URL 地址会重置到 from 路由对应的地址。</span><br><span class="line"></span><br><span class="line">next(&apos;/&apos;) 或者 next(&#123; path: &apos;/&apos; &#125;): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</span><br><span class="line"></span><br><span class="line">    确保要调用 next 方法，否则钩子就不会被 resolved。</span><br></pre></td></tr></table></figure><h4 id="afterEach"><a href="#afterEach" class="headerlink" title="afterEach"></a>afterEach</h4><blockquote><p>同样可以注册一个全局的 after 钩子，不过它不像 before 钩子那样，after 钩子没有 next 方法，不能改变导航：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(route =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="某个路由独享的钩子"><a href="#某个路由独享的钩子" class="headerlink" title="某个路由独享的钩子"></a>某个路由独享的钩子</h3><blockquote><p>　你可以在路由配置上直接定义 beforeEnter 钩子：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/foo&apos;,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">        // ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这些钩子与全局 before 钩子的方法参数是一样的。</p></blockquote><h3 id="组件内的钩子"><a href="#组件内的钩子" class="headerlink" title="组件内的钩子"></a>组件内的钩子</h3><p>最后，你可以在路由组件内直接定义以下路由导航钩子：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate (2.2 新增)</li><li>beforeRouteLeave</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const Foo = &#123;</span><br><span class="line">  template: `...`,</span><br><span class="line">  beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    // 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">    // 不！能！获取组件实例 `this`</span><br><span class="line">    // 因为当钩子执行前，组件实例还没被创建</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    // 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br><span class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    // 导航离开该组件的对应路由时调用</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">beforeRouteEnter 钩子 不能 访问 this，因为钩子在导航确认前被调用,因此即将登场的新组件还没被创建。</span><br></pre></td></tr></table></figure><p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">  next(vm =&gt; &#123;</span><br><span class="line">    // 通过 `vm` 访问组件实例</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你可以 在 beforeRouteLeave 中直接访问 this。这个 leave 钩子通常用来禁止用户在还未保存修改前突然离开。<br>可以通过 next(false) 来取消导航。</p></blockquote><h3 id="路由参数传递"><a href="#路由参数传递" class="headerlink" title="路由参数传递"></a>路由参数传递</h3><blockquote><p>在进行路由跳转的时候传递参数 , 大致有两种形式</p><blockquote><p>在这两种形式下分别有两种书写形式,一种是标签的形式,一种是js的方式</p></blockquote></blockquote><h4 id="query"><a href="#query" class="headerlink" title="query"></a>query</h4><h4 id="params"><a href="#params" class="headerlink" title="params"></a>params</h4><blockquote><p> 形似   /:id</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--5 添加路由跳转入口--&gt;</span><br><span class="line">            &lt;router-link to=&quot;/login/9&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--6 组件的显示--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //1. 定义组件</span><br><span class="line">    var loginComponent = &#123;</span><br><span class="line">        template: &quot;&lt;h2&gt;登录组件-----------&#123;&#123;$route.params.id&#125;&#125; +1&lt;/h2&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    var registerComponent = &#123;</span><br><span class="line">        template: &quot;&lt;h2&gt;注册组件&lt;/h2&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2. 定义路由规则</span><br><span class="line">    var routes = [</span><br><span class="line">        //通过name和redirect实现默认路由</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            redirect: &apos;login&apos; //默认显示name为login的页面</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: &apos;login&apos;,</span><br><span class="line">            path: &apos;/login/:id&apos;,</span><br><span class="line">            component: loginComponent</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: &apos;register&apos;,</span><br><span class="line">            path: &apos;/register&apos;,</span><br><span class="line">            component: registerComponent</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    //3. 创建路由</span><br><span class="line">    var VueRouter = new VueRouter(&#123;</span><br><span class="line">        routes: routes</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //4. 创建vue对象,并添加路由</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        router: VueRouter</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//  this.$route.params  获取参数</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 形似   ?name=1&amp;age=2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--添加路由跳转入口--&gt;</span><br><span class="line">            &lt;router-link to=&quot;/login/9&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link :to=&quot;&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;&quot;&gt; 注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--组件的显示--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //1. 定义组件</span><br><span class="line">    var loginComponent = &#123;</span><br><span class="line">        template: &quot;&lt;h2&gt;登录组件-----------&#123;&#123;$route.params.id&#125;&#125; +1&lt;/h2&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    var registerComponent = &#123;</span><br><span class="line">        template: &quot;&lt;h2&gt;注册组件&#123;&#123;getName&#125;&#125;&lt;/h2&gt;&quot;,</span><br><span class="line">        //组件中的data是一个方法,并且这个方法要返回一个对象,这个和new &lt;Vue&gt;  &lt;/Vue&gt;中的data不一样</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                uname: &apos;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //组件中的created是一个方法,返回一个对象</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(this.$route.query);</span><br><span class="line">            this.uname = this.$route;</span><br><span class="line">        &#125;,</span><br><span class="line">        //computed相当于属性的一个实时计算，如果实时计算里关联了对象，</span><br><span class="line">        //那么当对象的某个值改变的时候，同时会出发实时计算。</span><br><span class="line">        computed: &#123;</span><br><span class="line">            getName: function() &#123;</span><br><span class="line">                return &quot;hello&quot; + this.$route</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2. 定义路由规则</span><br><span class="line">    var routes = [</span><br><span class="line">        //通过name和redirect实现默认路由</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            redirect: &apos;login&apos; //默认显示name为login的页面</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: &apos;login&apos;,</span><br><span class="line">            path: &apos;/login/:id&apos;,</span><br><span class="line">            component: loginComponent</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: &apos;register&apos;,</span><br><span class="line">            path: &apos;/register&apos;,</span><br><span class="line">            component: registerComponent</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    //3. 创建路由</span><br><span class="line">    var VueRouter = new VueRouter(&#123;</span><br><span class="line">        routes: routes</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //4. 创建vue对象,并添加路由</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        router: VueRouter</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="高级路由匹配模式"><a href="#高级路由匹配模式" class="headerlink" title="高级路由匹配模式"></a>高级路由匹配模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!-- 1. 引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Route Matching&lt;/h1&gt;</span><br><span class="line">            &lt;!--5. 定义路由跳转的链接--&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/&quot;&gt;/&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/params/foo/bar&quot;&gt;/params/foo/bar&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/optional-params&quot;&gt;/optional-params&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/optional-params/foo&quot;&gt;/optional-params/foo&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/params-with-regex/123&quot;&gt;/params-with-regex/123&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/params-with-regex/abc&quot;&gt;/params-with-regex/abc&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/asterisk/foo&quot;&gt;/asterisk/foo&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/asterisk/foo/bar&quot;&gt;/asterisk/foo/bar&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/optional-group/bar&quot;&gt;/optional-group/bar&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/optional-group/foo/bar&quot;&gt;/optional-group/foo/bar&lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;p&gt;Route context&lt;/p&gt;</span><br><span class="line">            &lt;pre&gt;&#123;&#123; JSON.stringify($route, null, 2) &#125;&#125;&lt;/pre&gt;</span><br><span class="line">            &lt;!--6 路由对应的组件的显示--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //2 定义组件</span><br><span class="line"></span><br><span class="line">    //3 定义路由表</span><br><span class="line">    var vueRouter = new VueRouter(&#123;</span><br><span class="line">        mode:&apos;history&apos;,</span><br><span class="line">        routes: [&#123;</span><br><span class="line">                path: &apos;/&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // params are denoted with a colon &quot;:&quot;</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/params/:foo/:bar&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // a param can be made optional by adding &quot;?&quot;</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/optional-params/:foo?&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // a param can be followed by a regex pattern in parens</span><br><span class="line">            // this route will only be matched if :id is all numbers</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/params-with-regex/:id(\\d+)&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // asterisk can match anything</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/asterisk/*&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // make part of th path optional by wrapping with parens and add &quot;?&quot;</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/optional-group/(foo/)?bar&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //4 挂载路由</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        router: vueRouter</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><blockquote><p>在项目模板中,使用webpack模板 或者是  webpack-simple模板的时候根据以上步骤简单改写即可, 但是在学习的过程中,推荐使用webpack-simple,便于加深理解</p><blockquote><p>这一部分详细的内容不多做介绍</p></blockquote></blockquote><h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><blockquote><p>在文件的体积和请求次数之间做好权衡</p></blockquote><blockquote><p>打包的文件过大, 请求时间长,影响页面加载, 效果体验差</p><p>文件分割, 文件个数多,请求次数增加  …… </p><blockquote><p>按需请求是一种比较理想的状态</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当打包构建应用时，Javascript 包会变得非常大，影响页面加载。</span><br><span class="line"></span><br><span class="line">    如果我们能把不同路由对应的组件分割成不同的代码块，</span><br><span class="line"></span><br><span class="line">    然后当路由被访问的时候才加载对应组件，这样就更加高效了。</span><br></pre></td></tr></table></figure><h4 id="路由中配置组件懒加载"><a href="#路由中配置组件懒加载" class="headerlink" title="路由中配置组件懒加载"></a>路由中配置组件懒加载</h4><blockquote><p>平时我们书写的方式,这种方式下,所有的组件都会合并到一个文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">import tab1 from &apos;@/components/tab1&apos;</span><br><span class="line">import tab2 from &apos;@/components/tab2&apos;</span><br><span class="line">import tab3 from &apos;@/components/tab3&apos;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;HelloWorld&apos;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab1&apos;,</span><br><span class="line">        component:tab1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab2&apos;,</span><br><span class="line">        component:tab2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab3&apos;,</span><br><span class="line">        component:tab3</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>也就是实现异步组件,在异步组件的时候,所有的组件单独分割到一个文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;HelloWorld&apos;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab1&apos;,</span><br><span class="line">        component:resolve =&gt; require([&apos;../components/tab1.vue&apos;], resolve),//懒加载</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab2&apos;,</span><br><span class="line">        component:resolve =&gt; require([&apos;../components/tab2.vue&apos;], resolve),//懒加载</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&apos;/tab3&apos;,</span><br><span class="line">        component:resolve =&gt; require([&apos;../components/tab3.vue&apos;], resolve),//懒加载</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第九部分-Vue-router&quot;&gt;&lt;a href=&quot;#第九部分-Vue-router&quot; class=&quot;headerlink&quot; title=&quot;第九部分  Vue-router&quot;&gt;&lt;/a&gt;第九部分  Vue-router&lt;/h1&gt;&lt;h2 id=&quot;过渡–单页面应用&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="09-router" scheme="http://yoursite.com/categories/vue/09-router/"/>
    
    
  </entry>
  
  <entry>
    <title>08-组件下</title>
    <link href="http://yoursite.com/2018/05/10/vue/08-%E7%BB%84%E4%BB%B6%E4%B8%8B/08-component2/"/>
    <id>http://yoursite.com/2018/05/10/vue/08-组件下/08-component2/</id>
    <published>2018-05-10T01:32:34.995Z</published>
    <updated>2018-05-10T01:34:25.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八部分-Vue-js组件（下）"><a href="#第八部分-Vue-js组件（下）" class="headerlink" title="第八部分  Vue.js组件（下）"></a>第八部分  Vue.js组件（下）</h1><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><blockquote><p>之前已经讲解过了父组件数据向子组件数据的传递</p></blockquote><blockquote><p><strong>子组件要把数据传递回去,应该怎样做？</strong></p></blockquote><blockquote><blockquote><p>vue提供的解决的方案: 自定义事件</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">每个 Vue 实例都实现了事件接口(Events interface)，即：</span><br><span class="line"></span><br><span class="line">使用 $on(eventName) 监听事件</span><br><span class="line"></span><br><span class="line">使用 $emit(eventName) 触发事件</span><br><span class="line"></span><br><span class="line">类似于我们注册(vue中是$on)点击事件,通过鼠标点击触发(vue中是emit)</span><br><span class="line">    document.onclick = function(event)&#123;</span><br><span class="line">        console.log(111)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on 和 $emit 不是addEventListener 和 dispatchEvent 的别名。</span><br><span class="line"></span><br><span class="line">另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</span><br></pre></td></tr></table></figure><blockquote><p><strong>不能用$on侦听子组件抛出的事件，而必须在模板里直接用v-on绑定</strong></p></blockquote><h3 id="使用v-on绑定自定义事件"><a href="#使用v-on绑定自定义事件" class="headerlink" title="使用v-on绑定自定义事件"></a>使用v-on绑定自定义事件</h3><p><img src="img/自定义事件.bmp" alt="自定义事件.bmp"></p><h2 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h2><blockquote><p>也就是不相关的组件之间的通信,在这里涉及到不同的实例的组件</p></blockquote><blockquote><blockquote><p>这一部分的问题有点复杂,今天先做一个简单的了解,在今后的课程中还会给大家详细的讲解</p></blockquote></blockquote><h3 id="知识点解读"><a href="#知识点解读" class="headerlink" title="知识点解读"></a>知识点解读</h3><p><img src="img/非父子组件通信.bmp" alt="非父子组件通信.bmp"></p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><blockquote><p>我们先看下面的这个简单的例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            #dv1,</span><br><span class="line">            #dv2 &#123;</span><br><span class="line">                width: 500px;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            #dv1 &#123;</span><br><span class="line">                border: 1px solid red;</span><br><span class="line">                margin: 50px auto;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            #dv2 &#123;</span><br><span class="line">                border: 1px solid green;</span><br><span class="line">                margin: 50px auto;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;app2&quot;&gt;</span><br><span class="line">            &lt;component2&gt;&lt;/component2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;app1&quot;&gt;</span><br><span class="line">            &lt;component1&gt;&lt;/component1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //1. 创建一个空的公共的vue对象</span><br><span class="line">    var bus = new Vue();</span><br><span class="line"></span><br><span class="line">    //2. 在vm1实例中创建组件1,定义$emit来发送数据</span><br><span class="line">    var vm1 = new Vue(&#123;</span><br><span class="line">        el: &apos;#app1&apos;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            component1: &#123;</span><br><span class="line">                template: `&lt;div id=&quot;dv1&quot;  v-on:click=&quot;add&quot;&gt;</span><br><span class="line">                                &lt;div&gt;点击我,触发自定义事件,进行数据的传递&lt;/div&gt;</span><br><span class="line">                                &lt;div&gt;当前的数据是:&#123;&#123;num&#125;&#125;&lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;`,</span><br><span class="line">                data: function() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        num: 0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    add: function() &#123;</span><br><span class="line">                        this.num++;</span><br><span class="line">                        bus.$emit(&apos;test&apos;, this.num)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //在vm2实例中创建组件2,定义$on来接收传递的数据</span><br><span class="line">    var vm2 = new Vue(&#123;</span><br><span class="line">        el: &apos;#app2&apos;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            component2: &#123;</span><br><span class="line">                template: `&lt;div id=&quot;dv2&quot; v-on:click=&quot;result&quot;&gt;</span><br><span class="line">                                &lt;div&gt;点击我,进行自定义事件的注册&lt;/div&gt;</span><br><span class="line">                                &lt;div&gt;传递过来的数据是&#123;&#123;getData&#125;&#125;&lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;`,</span><br><span class="line">                data: function() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        getData: 0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    result: function() &#123;</span><br><span class="line">                        //this问题</span><br><span class="line">                        var vm2This = this;</span><br><span class="line">                        bus.$on(&apos;test&apos;, function(num) &#123;</span><br><span class="line">                            vm2This.getData = num;</span><br><span class="line">                            //事件的解绑问题</span><br><span class="line">                            bus.$off(&quot;test&quot;)</span><br><span class="line">                        &#125;)</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>我们对上述的例子做一个分析,大致可以分成下面几个步骤</p></blockquote><p>1.创建一个空的公共的vue对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bus = new Vue();</span><br></pre></td></tr></table></figure><p>2.在vm1实例中创建组件1,定义$emit来发送数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var vm1 = new Vue(&#123;</span><br><span class="line">    el: &apos;#app1&apos;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        component1: &#123;</span><br><span class="line">            template: `&lt;div id=&quot;dv1&quot;  v-on:click=&quot;add&quot;&gt;</span><br><span class="line">                            &lt;div&gt;点击我,触发自定义事件,进行数据的传递&lt;/div&gt;</span><br><span class="line">                            &lt;div&gt;当前的数据是:&#123;&#123;num&#125;&#125;&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;`,</span><br><span class="line">            data: function() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    num: 0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                add: function() &#123;</span><br><span class="line">                    this.num++;</span><br><span class="line">                    bus.$emit(&apos;test&apos;, this.num)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.在vm2实例中创建组件2,定义$on来接收传递的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var vm2 = new Vue(&#123;</span><br><span class="line">    el: &apos;#app2&apos;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        component2: &#123;</span><br><span class="line">            template: `&lt;div id=&quot;dv2&quot; v-on:click=&quot;result&quot;&gt;</span><br><span class="line">                            &lt;div&gt;点击我,进行自定义事件的注册&lt;/div&gt;</span><br><span class="line">                            &lt;div&gt;传递过来的数据是&#123;&#123;getData&#125;&#125;&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;`,</span><br><span class="line">            data: function() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    getData: 0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                result: function() &#123;</span><br><span class="line">                    //this问题</span><br><span class="line">                    var vm2This = this;</span><br><span class="line">                    //事件的解绑问题</span><br><span class="line">                    bus.$off(&quot;test&quot;)</span><br><span class="line">                    </span><br><span class="line">                    bus.$on(&apos;test&apos;, function(num) &#123;</span><br><span class="line">                        vm2This.getData = num;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>4.将组件添加到页面中指定的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app2&quot;&gt;</span><br><span class="line">    &lt;component2&gt;&lt;/component2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app1&quot;&gt;</span><br><span class="line">    &lt;component1&gt;&lt;/component1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><h3 id="引入-问什么要有slot"><a href="#引入-问什么要有slot" class="headerlink" title="引入:问什么要有slot"></a>引入:问什么要有slot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">之前我们学习了组件的注册(创建)以及组件之间的通信,这些都是将已经提前封装好的组件拿来使用,都是已经写死的组件,</span><br><span class="line"></span><br><span class="line">存在的问题: 有时候由于某些原因,我们需要对组件进行局部的改变</span><br><span class="line"></span><br><span class="line">如果还是按照之前的观点,我们就需要重新定义组件,这样就会显得有点复杂了!</span><br><span class="line"></span><br><span class="line">也就是说我们有时候需要的不是固定不变的组件,需要的是可以进行内容修改的组件</span><br><span class="line"></span><br><span class="line">--类似于之前讲解的动态的prop和静态的prop--大家可以简单的体味一下</span><br><span class="line"></span><br><span class="line">针对这样的问题,vue给我们提供了一种解决的方案,也就是使用slot</span><br></pre></td></tr></table></figure><h3 id="slot简介"><a href="#slot简介" class="headerlink" title="slot简介"></a>slot简介</h3><blockquote><p>有时候,我们需要对组件进行局部的修改,</p></blockquote><blockquote><blockquote><p>vue提供了一种方式来<strong>混合父组件的内容与子组件自己的模板</strong></p></blockquote></blockquote><blockquote><blockquote><blockquote><p>这个过程被称为 内容分发  <strong>也就是slot</strong></p></blockquote></blockquote></blockquote><h3 id="如何使用slot"><a href="#如何使用slot" class="headerlink" title="如何使用slot"></a>如何使用slot</h3><blockquote><p>slot协助子组件对父容器写入的标签进行管理。</p></blockquote><blockquote><blockquote><p>具体可分成几种不同的情况,我们结合下面的例子做一个具体的分析</p></blockquote></blockquote><p><strong>一个简单的例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue入门之extend全局方法&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--父容器输入标签,会将slot标签替换掉--&gt;</span><br><span class="line">            &lt;my-slot&gt;</span><br><span class="line">                &lt;h3&gt;这里是父容器写入的&lt;/h3&gt;</span><br><span class="line">            &lt;/my-slot&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--父容器绑定数据到子容器的slot,会将slot中的数据替换掉--&gt;</span><br><span class="line">            &lt;my-slot&gt;&#123;&#123; email &#125;&#125;&lt;/my-slot&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--父容器什么都不传内容--&gt;</span><br><span class="line">            &lt;my-slot&gt;&lt;/my-slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 反引号：可以定义多行字符串。</span><br><span class="line">        var temp = `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这里是子组件&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;slot&gt;slot标签会被父容器写的额外的内容替换掉，如果父容器没有写入任何东西，此标签将保留！&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `;</span><br><span class="line">        Vue.component(&apos;MySlot&apos;, &#123; // 如果定义的组件为MySlot，那么用组件的时候：&lt;my-slot&gt;&lt;/my-slot&gt;</span><br><span class="line">            template: temp,</span><br><span class="line">        &#125;);</span><br><span class="line">        // 初始化一个Vue实例</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                email: &apos;flydragon@gmail.com&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h3><blockquote><p><slot> 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。</slot></p></blockquote><blockquote><blockquote><p>　具名 slot 将匹配内容片段中有对应 slot 特性的元素</p></blockquote></blockquote><blockquote><p>仍然可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。</p></blockquote><p><img src="img/slot.bmp" alt="slot.bmp"></p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><blockquote><p>通过使用保留的 <component> 元素，动态地绑定到它的 is 特性，我们让多个组件可以使用同一个挂载点，并动态切换</component></p></blockquote><blockquote><blockquote><p>　如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;动态组件&lt;/h3&gt;</span><br><span class="line">        &lt;!-- 定义三个temp模板，用于切换 --&gt;</span><br><span class="line">        &lt;template id=&quot;temp-tab01&quot;&gt;</span><br><span class="line">            &lt;div&gt;this is tab01&lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template id=&quot;temp-tab02&quot;&gt;</span><br><span class="line">            &lt;div&gt;this is tab02&lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template id=&quot;temp-tab03&quot;&gt;</span><br><span class="line">            &lt;div&gt;this is tab03&lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;dr01&quot;&gt;</span><br><span class="line">            &lt;!-- 导航栏 --&gt;</span><br><span class="line">            &lt;div class=&quot;border cf&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;a href=&quot;javascript:void(0);&quot; @click=&quot;toggleTabs(tab01Text);&quot;&gt;&#123;&#123;tab01Text&#125;&#125;&lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;a href=&quot;javascript:void(0);&quot; @click=&quot;toggleTabs(tab02Text);&quot;&gt;&#123;&#123;tab02Text&#125;&#125;&lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;a href=&quot;javascript:void(0);&quot; @click=&quot;toggleTabs(tab03Text);&quot;&gt;&#123;&#123;tab03Text&#125;&#125;&lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 点击导航后要切换的内容 --&gt;</span><br><span class="line">            &lt;div class=&quot;border&quot; style=&quot;height: 100px;&quot;&gt;</span><br><span class="line">                &lt;!-- 如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数 --&gt;</span><br><span class="line">                &lt;component :is=&quot;currentView&quot; keep-alive&gt;&lt;/component&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//通过使用保留的 &lt;component&gt; 元素，动态地绑定到它的is属性，我们让多个组件可以使用同一个挂载点，并动态切换：</span><br><span class="line">    //扩展组件tab01</span><br><span class="line">    var tab01 = Vue.extend(&#123;</span><br><span class="line">        template: &quot;#temp-tab01&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    //扩展组件tab02</span><br><span class="line">    var tab02 = Vue.extend(&#123;</span><br><span class="line">        template: &quot;#temp-tab02&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    //扩展组件tab03</span><br><span class="line">    var tab03 = Vue.extend(&#123;</span><br><span class="line">        template: &quot;#temp-tab03&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    //新建vue实例</span><br><span class="line">    var dr01 = new Vue(&#123;</span><br><span class="line">        el: &quot;#dr01&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            tab01Text: &quot;tab01&quot;, //导航栏文本1</span><br><span class="line">            tab02Text: &quot;tab02&quot;, //导航栏文本2</span><br><span class="line">            tab03Text: &quot;tab03&quot;, //导航栏文本3</span><br><span class="line">            currentView: &apos;tab01&apos;, //默认选中的导航栏</span><br><span class="line">        &#125;,</span><br><span class="line">        //局部注册组件</span><br><span class="line">        components: &#123;</span><br><span class="line">            tab01: tab01,</span><br><span class="line">            tab02: tab02,</span><br><span class="line">            tab03: tab03,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //绑定tab的切换事件</span><br><span class="line">            toggleTabs: function(tabText) &#123;</span><br><span class="line">                this.currentView = tabText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第八部分-Vue-js组件（下）&quot;&gt;&lt;a href=&quot;#第八部分-Vue-js组件（下）&quot; class=&quot;headerlink&quot; title=&quot;第八部分  Vue.js组件（下）&quot;&gt;&lt;/a&gt;第八部分  Vue.js组件（下）&lt;/h1&gt;&lt;h2 id=&quot;自定义事件&quot;&gt;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="08-组件下" scheme="http://yoursite.com/categories/vue/08-%E7%BB%84%E4%BB%B6%E4%B8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>07-组件上</title>
    <link href="http://yoursite.com/2018/05/10/vue/07-%E7%BB%84%E4%BB%B6%E4%B8%8A/07-component1/"/>
    <id>http://yoursite.com/2018/05/10/vue/07-组件上/07-component1/</id>
    <published>2018-05-10T01:32:34.994Z</published>
    <updated>2018-05-10T01:34:17.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七部分-Vue-js组件（上）"><a href="#第七部分-Vue-js组件（上）" class="headerlink" title="第七部分  Vue.js组件（上）"></a>第七部分  Vue.js组件（上）</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 笔记本电脑的外置鼠标和键盘</span><br><span class="line">2. 手机的内存卡, u盘, 耳机</span><br><span class="line">3. 女孩子的发卡饰物</span><br><span class="line"></span><br><span class="line">共性</span><br><span class="line"> 1. 这些东西都可以看成是整体可缺的一部分(组成部分),但是他们的存在都有其存在的意义, 有着难以替代(相对而言)的好处</span><br><span class="line"> </span><br><span class="line">2. 复用(重用)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">组件: 顾名思义, 也就是组成的部件, 即整体的组成部分</span><br><span class="line"></span><br><span class="line">这个组成部分是可以缺少的,但是其存在的意义是无可替代的</span><br><span class="line">这个组成部分也是可以复用的</span><br></pre></td></tr></table></figure><p><strong>vue组件化又是什么呢?</strong></p><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vue组件</span><br><span class="line"></span><br><span class="line">1. 是页面组成的一部分</span><br><span class="line">2. 是封装好的可重用的代码</span><br><span class="line"></span><br><span class="line">也就是说,我们将页面上的一些元素抽取出来,做成一个组件, 需要的时候直接调用组件就可以了</span><br><span class="line"></span><br><span class="line">这样就避免了多次写重复的内容</span><br></pre></td></tr></table></figure><p><img src="img/04-组件化.bmp" alt="04-组件化.bmp"></p><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><blockquote><p>注册的方式有很多种</p></blockquote><h3 id="全局注册1"><a href="#全局注册1" class="headerlink" title="全局注册1"></a>全局注册1</h3><blockquote><p>大致可以分成三步</p></blockquote><blockquote><blockquote><ol><li>在我们引入vue.js之后,Vue会被注册为一个全局对象,我们使用对象本身的方法进行组件的创建<blockquote><p>使用Vue这个全局对象的component方法进行全局注册一个组件</p></blockquote></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li>创建根实例,进行视图的绑定</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li>组件的显示<blockquote><p>将组价的名称作为标签写在视图内部,就能够完成组件的显示</p></blockquote></li></ol></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--3. 定义的组件名作为标签存在,将组件显示在页面上--&gt;</span><br><span class="line">            &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    //1. 使用vue这个全局队形内置的components方法进行组件的创建</span><br><span class="line">    //在components这个方法中有两个重要的参数,第一个参数是组件的名称,第二个参数是组件的内容</span><br><span class="line">    Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">        //在这里使用一个父标签将组件包裹起来</span><br><span class="line">        template: &apos;&lt;div&gt;&lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //2. 创建根实例,也就是实例化一个vue对象,进行视图的绑定</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="全局注册2"><a href="#全局注册2" class="headerlink" title="全局注册2"></a>全局注册2</h3><blockquote><p>使用全局的Vue.extend()构造器进行注册</p><p>Vue.extend()类似于继承,通过这个构造器扩展(继承)之后,相当于Vue对象本身添加了一些这个对象原先没有的东西</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue入门之extend全局方法&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   </span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //通过构造器创建一个组件,相当于在vue这个全局对象本身上添加了一些新的内容,作用相当于构造函数</span><br><span class="line">    //----继承自vue,但是比vue本身更强大</span><br><span class="line">    var myVue = Vue.extend(&#123;</span><br><span class="line">        template: &apos;&lt;div&gt;这是通过构造器创建出来的组件&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    var app = new myVue(&#123;</span><br><span class="line">        el: &apos;#app&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="局部注册1"><a href="#局部注册1" class="headerlink" title="局部注册1"></a>局部注册1</h3><blockquote><p>大致分成两个部分</p></blockquote><blockquote><blockquote><ol><li>穿件跟实例</li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li>在跟实例内部定义组件</li></ol></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--3. 这是我定义的组件    占位标签--&gt;</span><br><span class="line">            &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //1. 创建根实例</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        //2. 在根实例内部创建组件</span><br><span class="line">        components:&#123;</span><br><span class="line">           &apos;my-component&apos;:&#123;</span><br><span class="line">               template: &apos;&lt;div&gt;&lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;&apos;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件注册的其它方式1"><a href="#组件注册的其它方式1" class="headerlink" title="组件注册的其它方式1"></a>组件注册的其它方式1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--这是我定义的组件--&gt;</span><br><span class="line">            &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;template id=&quot;my-template&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">    注意组件的模板替换了自定义元素，自定义元素的作用只是作为一个挂载点。</span><br><span class="line">    </span><br><span class="line">    ----这可以用实例选项 replace 改变。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //1. --定义  +  注册 组件构造器</span><br><span class="line">    Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">        //将template的内容提取到一个标签中,通过id来获取</span><br><span class="line">        template: &apos;#my-template&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //2. 创建根实例</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件注册的其它方式2"><a href="#组件注册的其它方式2" class="headerlink" title="组件注册的其它方式2"></a>组件注册的其它方式2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--这是我定义的组件--&gt;</span><br><span class="line">            &lt;template&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    </span><br><span class="line">自定义的标签只是自定义组件的一个挂载点,自定义组件会将其替换掉</span><br><span class="line"></span><br><span class="line">----直接使用自定义的组件将自定义的标签替换</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //2. 创建根实例</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件内部的data"><a href="#组件内部的data" class="headerlink" title="组件内部的data"></a>组件内部的data</h3><blockquote><p><strong>组件内部的data属性必须是一个函数</strong></p><blockquote><p>以全局注册的组件为例</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--全局的组件--&gt;</span><br><span class="line">            &lt;ab&gt;&lt;/ab&gt;</span><br><span class="line">            &lt;!--局部的组件--&gt;</span><br><span class="line">            &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //自定义指令</span><br><span class="line">    //Vue.directive(&apos;指令名&apos;,&#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义组件    参数1:组件的名称    参数2: 对象</span><br><span class="line">    Vue.component(&quot;ab&quot;,&#123;</span><br><span class="line">        template:</span><br><span class="line">            `&lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;name&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;age&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;sex&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;`,</span><br><span class="line">        //data属性的属性值是一个函数----函数内部返回一个对象</span><br><span class="line">        data:function()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&quot;首页&quot;,</span><br><span class="line">                age:&quot;联系我们&quot;,</span><br><span class="line">                sex:&quot;新闻&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //2. 创建根实例-----并在根实例下面创建一个局部的组件</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        //局部组件</span><br><span class="line">         components:&#123;</span><br><span class="line">           &apos;my-component&apos;:&#123;</span><br><span class="line">               template: `&lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;name&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;age&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&#123;&#123;sex&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;`,</span><br><span class="line">            data:function()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    name:1,</span><br><span class="line">                    age:2,</span><br><span class="line">                    sex:3</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><blockquote><p>之前在第四章介绍构造器的时候简单的涉及了一些父子组件的概念</p></blockquote><h3 id="什么是父子组件"><a href="#什么是父子组件" class="headerlink" title="什么是父子组件"></a>什么是父子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 我们可以把页面当成是一个父组件,里面包含的元素就是子组件,只不过当时的讲解不是太清晰</span><br></pre></td></tr></table></figure><p><img src="img/广义上的父子组件.bmp" alt="广义上的父子组件.bmp"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们已经学习过组件的创建,我们可以创建两个组件,一个组件的内部包含另外一个组件</span><br><span class="line"></span><br><span class="line">内部的组件称为子组件,外部的组件称为父组件,这就是父子组件</span><br><span class="line"></span><br><span class="line">可以理解成组建的嵌套</span><br></pre></td></tr></table></figure><p><img src="img/父子组件.bmp" alt="父子组件.bmp"></p><h3 id="组件的作用域问题"><a href="#组件的作用域问题" class="headerlink" title="组件的作用域问题"></a>组件的作用域问题</h3><blockquote><p>在理解上,可以参考我们js中变量的作用域,但是有些区别</p></blockquote><blockquote><blockquote><p>组件会产生独立的作用域,不能在子组件中使用父组件的数据,这个要与变量的作用域区分开来</p></blockquote></blockquote><blockquote><blockquote><p>为了解决这种问题,vue提供了响应的解决方案</p></blockquote></blockquote><blockquote><p>我们在这里以简单的父子组件作为演示–<strong>直接传值是会报错的</strong></p></blockquote><p><img src="img/组件作用域问题.bmp" alt="组件作用域问题.bmp"></p><h3 id="父子组件通信—-解决父子组件传值问题"><a href="#父子组件通信—-解决父子组件传值问题" class="headerlink" title="父子组件通信—-解决父子组件传值问题"></a>父子组件通信—-解决父子组件传值问题</h3><blockquote><p>就是信息的传递,在vue里面指的就是数据的传递</p></blockquote><blockquote><p>在这里涉及到数据的传递的概念</p></blockquote><blockquote><blockquote><p>在上下级组件之间进行数据的传递,也就是父子组件通信</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>父组件需要将数据传递给子组件</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>自组件需要将其内部发生的事情通告给父组件</p></blockquote></blockquote></blockquote><p><img src="img/父子组件通信.png" alt="父子组件通信.png"></p><p><strong>父组件将数据传递给自组件使用prop</strong><br><strong>子组件将其内部发生的事情通告给父组件使用emit</strong></p><h3 id="Props-与-camelCase"><a href="#Props-与-camelCase" class="headerlink" title="Props 与 camelCase"></a>Props 与 camelCase</h3><p><strong>使用prop实现父组件上的数据向子组件的传递</strong></p><p>数据传输分三步:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 进行数据的传输,首先要有数据,也就是要在父组件上定义数据</span><br><span class="line"></span><br><span class="line">2. 使用props建立数据通信的渠道</span><br><span class="line"></span><br><span class="line">3. 在子组件中接收父组件通过props传递过来的数据</span><br></pre></td></tr></table></figure></p><p><img src="img/父子组件间传递数据与驼峰命名.bmp" alt="父子组件间传递数据与驼峰命名"></p><h3 id="动态props"><a href="#动态props" class="headerlink" title="动态props"></a>动态props</h3><blockquote><p>上面传递的数据是静态的  写死的数据,不会变化,vue讲究的是数据的双向绑定,是动态的,显然这样并不能够达到我们的要求</p></blockquote><blockquote><p>在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用<strong> v-bind</strong></p></blockquote><blockquote><blockquote><p><strong>每当父组件的数据变化时，该变化也会传导给子组件</strong></p></blockquote></blockquote><h4 id="动态props-vs-静态props"><a href="#动态props-vs-静态props" class="headerlink" title="动态props vs 静态props"></a>动态props vs 静态props</h4><blockquote><p>降低了数据的灵活性,没有做到视图与数据分离,而导致数据操作的不方便</p></blockquote><p><img src="img/动态prop.bmp" alt="动态prop.bmp"> </p><h4 id="动态props使用技能提升-列表渲染"><a href="#动态props使用技能提升-列表渲染" class="headerlink" title="动态props使用技能提升-列表渲染"></a>动态props使用技能提升-列表渲染</h4><p><img src="img/动态的prop.bmp" alt="动态的prop.bmp"></p><h3 id="复杂的父子组件的props"><a href="#复杂的父子组件的props" class="headerlink" title="复杂的父子组件的props"></a>复杂的父子组件的props</h3><blockquote><p>有能力的同学可以多做尝试,按照自己的想法自定义父子组件,进行值的传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;template id=&quot;parent&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;我是父组件&lt;/div&gt;</span><br><span class="line">                &lt;child :message=&quot;message&quot;&gt;&lt;/child&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template id=&quot;child&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;我是子组件&lt;/div&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        //我是父组件</span><br><span class="line">        components:&#123;&apos;parent&apos;:&#123;</span><br><span class="line">            template:&quot;#parent&quot;,</span><br><span class="line">            data:function()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    message:&quot;hello world&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //我是子组件</span><br><span class="line">            components:&#123;&apos;child&apos;:&#123;</span><br><span class="line">                props:[&apos;message&apos;],</span><br><span class="line">                template:&quot;#child&quot;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="字面量语法-vs-动态语法"><a href="#字面量语法-vs-动态语法" class="headerlink" title="字面量语法 vs 动态语法"></a>字面量语法 vs 动态语法</h3><blockquote><p>使用字面量语法传递数字,有时候会出现问题</p></blockquote><p><img src="img/字面量语法存在的问题.bmp" alt="字面量语法存在的问题.bmp"></p><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><blockquote><p>数据从父组件传递到子组件,但是不会反过来传递</p></blockquote><p><img src="img/单向数据流.bmp" alt="单向数据流.bmp"></p><h3 id="数据传递-注意事项"><a href="#数据传递-注意事项" class="headerlink" title="数据传递-注意事项"></a>数据传递-注意事项</h3><blockquote><p>在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，</p></blockquote><blockquote><blockquote><p>如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。</p></blockquote></blockquote><h3 id="prop验证-了解"><a href="#prop验证-了解" class="headerlink" title="prop验证(了解)"></a>prop验证(了解)</h3><blockquote><p>我们可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。</p></blockquote><p><strong>简单示例</strong></p><blockquote><p>要尝试着去做一些新的东西,不要只是满足于课堂所学</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;!--引入js--&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;!--在这里加入模型数据--&gt;</span><br><span class="line">            &lt;prop-ver :prop-a=&quot;num&quot; :prop-b=&quot;num2&quot; :prop-c=&quot;num3&quot; :prop-d=&quot;num4&quot; :prop-e=&quot;num5&quot; :prop-f=&quot;num6&quot;&gt;&lt;/prop-ver&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var propVer = &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            // 基础类型检测 （`null` 意思是任何类型都可以）</span><br><span class="line">            propA: Number,</span><br><span class="line">            // 多种类型</span><br><span class="line">            propB: [String, Number],</span><br><span class="line">            // 必传且是字符串</span><br><span class="line">            propC: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true</span><br><span class="line">            &#125;,</span><br><span class="line">            // 数字，有默认值</span><br><span class="line">            propD: &#123;</span><br><span class="line">                type: Number,</span><br><span class="line">                default: 100</span><br><span class="line">            &#125;,</span><br><span class="line">            // 数组／对象的默认值应当由一个工厂函数返回</span><br><span class="line">            propE: &#123;</span><br><span class="line">                type: Object,</span><br><span class="line">                default: function() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        message: &apos;hello&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 自定义验证函数</span><br><span class="line">            propF: &#123;</span><br><span class="line">                validator: function(value) &#123;</span><br><span class="line">                    return value &gt; 10</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &apos;&lt;div&gt;&#123;&#123;propA&#125;&#125;---&#123;&#123;propB&#125;&#125;---&#123;&#123;propC&#125;&#125;---&#123;&#123;propD&#125;&#125;---&#123;&#123;propE&#125;&#125;---&#123;&#123;propF&#125;&#125;&lt;/div&gt;&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 1,</span><br><span class="line">            num2: 1,</span><br><span class="line">            num3: &quot;12&quot;,</span><br><span class="line">            num4: 222,</span><br><span class="line">            num5: &#123;&#125;,</span><br><span class="line">            num6: 11</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;prop-ver&apos;: propVer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第七部分-Vue-js组件（上）&quot;&gt;&lt;a href=&quot;#第七部分-Vue-js组件（上）&quot; class=&quot;headerlink&quot; title=&quot;第七部分  Vue.js组件（上）&quot;&gt;&lt;/a&gt;第七部分  Vue.js组件（上）&lt;/h1&gt;&lt;h2 id=&quot;引入&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="07-组件上" scheme="http://yoursite.com/categories/vue/07-%E7%BB%84%E4%BB%B6%E4%B8%8A/"/>
    
    
  </entry>
  
</feed>
